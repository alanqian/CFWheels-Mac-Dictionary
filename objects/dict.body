<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="cfwheels_application" d:title="CFWheels">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<p>CFWheels (ColdFusion on Wheels) is an open-source ColdFusion (CFML) framework inspired by Ruby on Rails.</p>
		<p>
			It provides fast application development, a great organization system for code, and is just plain fun to use.
		</p>
		<p>
			To find out more, go to http://cfwheels.org/
		</p>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="accessibleproperties" d:title="accessibleProperties" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>accessibleProperties()</code></h1>
		<h2>Description</h2>
		<p>Use this method to specify which properties can be set through mass assignment.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">accessibleProperties([ <em>properties</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>properties</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Property name (or list of property names) that are allowed to be altered through mass assignment.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_F1BECC061CC8F28A3A47653AF19419AE' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;In&#32;`models/User.cfc`,&#32;only&#32;`isActive`&#32;can&#32;be&#32;set&#32;through&#32;mass&#32;assignment&#32;operations&#32;like&#32;`updateAll()`&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"init"</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;accessibleProperties(<span style='color:#006600'>"isActive"</span>)</span>&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="adddefaultroutes" d:title="addDefaultRoutes" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>addDefaultRoutes()</code></h1>
		<h2>Description</h2>
		<p>Adds the default Wheels routes (for example, `[controller]/[action]/[key]`, etc.) to your application. Only use this method if you have set `loadDefaultRoutes` to `false` and want to control exactly where in the route order you want to place the default routes.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">addDefaultRoutes()</span></code></p>
		<h2>Parameters</h2>
		<p>None.</p>
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_A257EA3DA8532D80910B48EF8298A28D' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Adds&#32;the&#32;default&#32;routes&#32;to&#32;your&#32;application&#32;(done&#32;in&#32;`config/routes.cfm`)&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;addDefaultRoutes()</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="adderror" d:title="addError" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>addError()</code></h1>
		<h2>Description</h2>
		<p>Adds an error on a specific property.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">addError(<em>property</em>, <em>message</em> [, <em>name</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>property</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The name of the property you want to add an error on.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>message</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The error message (such as "Please enter a correct name in the form field" for example).</td>
			</tr>
			<tr>
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">A name to identify the error by (useful when you need to distinguish one error from another one set on the same object and you don't want to use the error message itself for that).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_57B491B5CAFC598C97F943D6B0900EA5' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Add&#32;an&#32;error&#32;to&#32;the&#32;`email`&#32;property&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;this.addError(property=<span style='color:#006600'>"email"</span>,&#32;message=<span style='color:#006600'>"Sorry,&#32;you&#32;are&#32;not&#32;allowed&#32;to&#32;use&#32;that&#32;email.&#32;Try&#32;again,&#32;please."</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="adderrortobase" d:title="addErrorToBase" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>addErrorToBase()</code></h1>
		<h2>Description</h2>
		<p>Adds an error on the object as a whole (not related to any specific property).</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">addErrorToBase(<em>message</em> [, <em>name</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>message</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The error message (such as "Please enter a correct name in the form field" for example).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">A name to identify the error by (useful when you need to distinguish one error from another one set on the same object and you don't want to use the error message itself for that).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_65D0E9EEC24CE023521B2283E5DE162C' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Add&#32;an&#32;error&#32;on&#32;the&#32;object&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;this.addErrorToBase(message=<span style='color:#006600'>"Your&#32;email&#32;address&#32;must&#32;be&#32;the&#32;same&#32;as&#32;your&#32;domain&#32;name."</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="addformat" d:title="addFormat" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>addFormat()</code></h1>
		<h2>Description</h2>
		<p>Adds a new MIME format to your Wheels application for use with responding to multiple formats.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">addFormat(<em>extension</em>, <em>mimeType</em>)</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>extension</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">File extension to add.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>mimeType</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Matching MIME type to associate with the file extension.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_72335ADF044375C63355F327F1F46A72' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Add&#32;the&#32;`js`&#32;format&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;addFormat(extension=<span style='color:#006600'>"js"</span>,&#32;mimeType=<span style='color:#006600'>"text/javascript"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Add&#32;the&#32;`ppt`&#32;and&#32;`pptx`&#32;formats&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;addFormat(extension=<span style='color:#006600'>"ppt"</span>,&#32;mimeType=<span style='color:#006600'>"application/vnd.ms-powerpoint"</span>)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;addFormat(extension=<span style='color:#006600'>"pptx"</span>,&#32;mimeType=<span style='color:#006600'>"application/vnd.ms-powerpoint"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="addroute" d:title="addRoute" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>addRoute()</code></h1>
		<h2>Description</h2>
		<p>Adds a new route to your application.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">addRoute(<em>pattern</em> [, <em>name</em>, <em>controller</em>, <em>action</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name for the route. This is referenced as the `name` argument in functions based on @URLFor like @linkTo, @startFormTag, etc.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>pattern</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The URL pattern that the route will match.</td>
			</tr>
			<tr>
				<td valign="top"><code>controller</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Controller to call when route matches (unless the controller name exists in the pattern).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>action</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Action to call when route matches (unless the action name exists in the pattern).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_6AFECE9149CE207DB285F501D5DF4209' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Example&#32;1:&#32;Adds&#32;a&#32;route&#32;which&#32;will&#32;invoke&#32;the&#32;`profile`&#32;action&#32;on&#32;the&#32;`user`&#32;controller&#32;with&#32;`params.userName`&#32;set&#32;when&#32;the&#32;URL&#32;matches&#32;the&#32;`pattern`&#32;argument&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;addRoute(name=<span style='color:#006600'>"userProfile"</span>,&#32;pattern=<span style='color:#006600'>"user/[username]"</span>,&#32;controller=<span style='color:#006600'>"user"</span>,&#32;action=<span style='color:#006600'>"profile"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Example&#32;2:&#32;Category/product&#32;URLs.&#32;Note&#32;the&#32;order&#32;of&#32;precedence&#32;is&#32;such&#32;that&#32;the&#32;more&#32;specific&#32;route&#32;should&#32;be&#32;defined&#32;first&#32;so&#32;Wheels&#32;will&#32;fall&#32;back&#32;to&#32;the&#32;less-specific&#32;version&#32;if&#32;it's&#32;not&#32;found&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;addRoute(name=<span style='color:#006600'>"product"</span>,&#32;pattern=<span style='color:#006600'>"products/[categorySlug]/[productSlug]"</span>,&#32;controller=<span style='color:#006600'>"products"</span>,&#32;action=<span style='color:#006600'>"product"</span>)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;addRoute(name=<span style='color:#006600'>"productCategory"</span>,&#32;pattern=<span style='color:#006600'>"products/[categorySlug]"</span>,&#32;controller=<span style='color:#006600'>"products"</span>,&#32;action=<span style='color:#006600'>"category"</span>)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;addRoute(name=<span style='color:#006600'>"products"</span>,&#32;pattern=<span style='color:#006600'>"products"</span>,&#32;controller=<span style='color:#006600'>"products"</span>,&#32;action=<span style='color:#006600'>"index"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Example&#32;3:&#32;Change&#32;the&#32;`home`&#32;route.&#32;This&#32;should&#32;be&#32;listed&#32;last&#32;because&#32;it&#32;is&#32;least&#32;specific&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;addRoute(name=<span style='color:#006600'>"home"</span>,&#32;pattern=<span style='color:#006600'>""</span>,&#32;controller=<span style='color:#006600'>"main"</span>,&#32;action=<span style='color:#006600'>"index"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="aftercreate" d:title="afterCreate" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>afterCreate()</code></h1>
		<h2>Description</h2>
		<p>Registers method(s) that should be called after a new object is created.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">afterCreate([ <em>methods</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>methods</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_28F9C40697DE56CD4403D6727B54C3B1' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Instruct&#32;Wheels&#32;to&#32;call&#32;the&#32;`fixObj`&#32;method&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;afterCreate(<span style='color:#006600'>"fixObj"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="afterdelete" d:title="afterDelete" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>afterDelete()</code></h1>
		<h2>Description</h2>
		<p>Registers method(s) that should be called after an object is deleted.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">afterDelete([ <em>methods</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>methods</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_90D1218BBC3565F543B8C1680C0B267C' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Instruct&#32;Wheels&#32;to&#32;call&#32;the&#32;`fixObj`&#32;method&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;afterDelete(<span style='color:#006600'>"fixObj"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="afterfind" d:title="afterFind" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>afterFind()</code></h1>
		<h2>Description</h2>
		<p>Registers method(s) that should be called after an existing object has been initialized (which is usually done with the @findByKey or @findOne method).</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">afterFind([ <em>methods</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>methods</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_9289923757335BD7FFCAB7DFCD55A449' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Instruct&#32;Wheels&#32;to&#32;call&#32;the&#32;`setTime`&#32;method&#32;after&#32;getting&#32;objects&#32;or&#32;records&#32;with&#32;one&#32;of&#32;the&#32;finder&#32;methods&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"init"</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;afterFind(<span style='color:#006600'>"setTime"</span>)</span>&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /><br /><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"setTime"</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;arguments.fetchedAt&#32;=&#32;<span style='color:blue'>Now</span>()</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfreturn&#32;arguments&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="afterinitialization" d:title="afterInitialization" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>afterInitialization()</code></h1>
		<h2>Description</h2>
		<p>Registers method(s) that should be called after an object has been initialized.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">afterInitialization([ <em>methods</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>methods</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_A7119C7066D949C0DEDBE3A9EBF397AE' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Instruct&#32;Wheels&#32;to&#32;call&#32;the&#32;`fixObj`&#32;method&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;afterInitialization(<span style='color:#006600'>"fixObj"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="afternew" d:title="afterNew" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>afterNew()</code></h1>
		<h2>Description</h2>
		<p>Registers method(s) that should be called after a new object has been initialized (which is usually done with the @new method).</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">afterNew([ <em>methods</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>methods</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_3F3B1A1B2A4578AB24B860C67B6B0F11' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Instruct&#32;Wheels&#32;to&#32;call&#32;the&#32;`fixObj`&#32;method&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;afterNew(<span style='color:#006600'>"fixObj"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="aftersave" d:title="afterSave" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>afterSave()</code></h1>
		<h2>Description</h2>
		<p>Registers method(s) that should be called after an object is saved.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">afterSave([ <em>methods</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>methods</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_71E95943E80DE633DF10A7DA81F08F93' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Instruct&#32;Wheels&#32;to&#32;call&#32;the&#32;`fixObj`&#32;method&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;afterSave(<span style='color:#006600'>"fixObj"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="afterupdate" d:title="afterUpdate" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>afterUpdate()</code></h1>
		<h2>Description</h2>
		<p>Registers method(s) that should be called after an existing object is updated.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">afterUpdate([ <em>methods</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>methods</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_84573A80C149BBC540A6ECF00693C91A' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Instruct&#32;Wheels&#32;to&#32;call&#32;the&#32;`fixObj`&#32;method&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;afterUpdate(<span style='color:#006600'>"fixObj"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="aftervalidation" d:title="afterValidation" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>afterValidation()</code></h1>
		<h2>Description</h2>
		<p>Registers method(s) that should be called after an object is validated.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">afterValidation([ <em>methods</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>methods</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_DA3369AB8B71128CF58C1B1870715159' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Instruct&#32;Wheels&#32;to&#32;call&#32;the&#32;`fixObj`&#32;method&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;afterValidation(<span style='color:#006600'>"fixObj"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="aftervalidationoncreate" d:title="afterValidationOnCreate" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>afterValidationOnCreate()</code></h1>
		<h2>Description</h2>
		<p>Registers method(s) that should be called after a new object is validated.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">afterValidationOnCreate([ <em>methods</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>methods</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_92CDF6E31B0C978352D11E290E454B2A' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Instruct&#32;Wheels&#32;to&#32;call&#32;the&#32;`fixObj`&#32;method&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;afterValidationOnCreate(<span style='color:#006600'>"fixObj"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="aftervalidationonupdate" d:title="afterValidationOnUpdate" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>afterValidationOnUpdate()</code></h1>
		<h2>Description</h2>
		<p>Registers method(s) that should be called after an existing object is validated.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">afterValidationOnUpdate([ <em>methods</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>methods</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_0EBCE30C5F57D854E8B107AA2FC7F3E8' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Instruct&#32;Wheels&#32;to&#32;call&#32;the&#32;`fixObj`&#32;method&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;afterValidationOnUpdate(<span style='color:#006600'>"fixObj"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="allchanges" d:title="allChanges" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>allChanges()</code></h1>
		<h2>Description</h2>
		<p>Returns a struct detailing all changes that have been made on the object but not yet saved to the database.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">allChanges()</span></code></p>
		<h2>Parameters</h2>
		<p>None.</p>
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_7C7DA57BD48EEA152D0280595BC07673' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Get&#32;an&#32;object,&#32;change&#32;it,&#32;and&#32;then&#32;ask&#32;for&#32;its&#32;changes&#32;(will&#32;return&#32;a&#32;struct&#32;containing&#32;the&#32;changes,&#32;both&#32;property&#32;names&#32;and&#32;their&#32;values)&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;member&#32;=&#32;model(<span style='color:#006600'>"member"</span>).findByKey(params.memberId)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;member.firstName&#32;=&#32;params.newFirstName</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;member.email&#32;=&#32;params.newEmail</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;allChanges&#32;=&#32;member.allChanges()</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="allerrors" d:title="allErrors" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>allErrors()</code></h1>
		<h2>Description</h2>
		<p>Returns an array of all the errors on the object.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">allErrors()</span></code></p>
		<h2>Parameters</h2>
		<p>None.</p>
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_C22B32DE724B6BF89278DF0E76FF817B' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Get&#32;all&#32;the&#32;errors&#32;for&#32;the&#32;`user`&#32;object&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;errorInfo&#32;=&#32;user.allErrors()</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="autolink" d:title="autoLink" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>autoLink()</code></h1>
		<h2>Description</h2>
		<p>Turns all URLs and email addresses into hyperlinks.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">autoLink(<em>text</em> [, <em>link</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>text</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The text to create links in.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>link</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>all</code></td>
				<td valign="top">Whether to link URLs, email addresses or both. Possible values are: `all` (default), `URLs` and `emailAddresses`.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/autolink for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="automaticvalidations" d:title="automaticValidations" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>automaticValidations()</code></h1>
		<h2>Description</h2>
		<p>Whether or not to enable default validations for this model.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">automaticValidations()</span></code></p>
		<h2>Parameters</h2>
		<p>None.</p>
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_4166F91F127E157150E8BB0E6C148F20' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;In&#32;`models/User.cfc`,&#32;disable&#32;automatic&#32;validations.&#32;In&#32;this&#32;case,&#32;automatic&#32;validations&#32;are&#32;probably&#32;enabled&#32;globally,&#32;but&#32;we&#32;want&#32;to&#32;disable&#32;just&#32;for&#32;this&#32;model&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"init"</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;automaticValidations(false)</span>&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="average" d:title="average" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>average()</code></h1>
		<h2>Description</h2>
		<p>Calculates the average value for a given property. Uses the SQL function `AVG`. If no records can be found to perform the calculation on you can use the `ifNull` argument to decide what should be returned.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">average(<em>property</em> [, <em>where</em>, <em>include</em>, <em>distinct</em>, <em>parameterize</em>, <em>ifNull</em>, <em>includeSoftDeletes</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>property</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of the property to calculate the average for.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>where</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">This argument maps to the `WHERE` clause of the query. The following operators are supported: `=`, `!=`, `<>`, `<`, `<=`, `>`, `>=`, `LIKE`, `NOT LIKE`, `IN`, `NOT IN`, `IS NULL`, `IS NOT NULL`, `AND`, and `OR`. (Note that the key words need to be written in upper case.) You can also use parentheses to group statements. You do not need to specify the table name(s); Wheels will do that for you.</td>
			</tr>
			<tr>
				<td valign="top"><code>include</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Associations that should be included in the query using `INNER` or `LEFT OUTER` joins (which join type that is used depends on how the association has been set up in your model). If all included associations are set on the current model, you can specify them in a list (e.g. `department,addresses,emails`). You can build more complex `include` strings by using parentheses when the association is set on an included model, like `album(artist(genre))`, for example. These complex `include` strings only work when `returnAs` is set to `query` though.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>distinct</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">When `true`, `AVG` will be performed only on each unique instance of a value, regardless of how many times the value occurs.</td>
			</tr>
			<tr>
				<td valign="top"><code>parameterize</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `true` to use `cfqueryparam` on all columns, or pass in a list of property names to use `cfqueryparam` on those only.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>ifNull</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The value returned if no records are found. Common usage is to set this to `0` to make sure a numeric value is always returned instead of a blank string.</td>
			</tr>
			<tr>
				<td valign="top"><code>includeSoftDeletes</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">You can set this argument to `true` to include soft-deleted records in the results.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/average for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="beforecreate" d:title="beforeCreate" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>beforeCreate()</code></h1>
		<h2>Description</h2>
		<p>Registers method(s) that should be called before a new object is created.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">beforeCreate([ <em>methods</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>methods</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_8F403EDD64AA71AEB969FA890009155B' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Instruct&#32;Wheels&#32;to&#32;call&#32;the&#32;`fixObj`&#32;method&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;beforeCreate(<span style='color:#006600'>"fixObj"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="beforedelete" d:title="beforeDelete" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>beforeDelete()</code></h1>
		<h2>Description</h2>
		<p>Registers method(s) that should be called before an object is deleted.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">beforeDelete([ <em>methods</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>methods</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_91A7DF0E75CD4C83656951CB72277A3A' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Instruct&#32;Wheels&#32;to&#32;call&#32;the&#32;`fixObj`&#32;method&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;beforeDelete(<span style='color:#006600'>"fixObj"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="beforesave" d:title="beforeSave" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>beforeSave()</code></h1>
		<h2>Description</h2>
		<p>Registers method(s) that should be called before an object is saved.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">beforeSave([ <em>methods</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>methods</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_203824E6AD868D0236DB13036AF624B3' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Instruct&#32;Wheels&#32;to&#32;call&#32;the&#32;`fixObj`&#32;method&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;beforeSave(<span style='color:#006600'>"fixObj"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="beforeupdate" d:title="beforeUpdate" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>beforeUpdate()</code></h1>
		<h2>Description</h2>
		<p>Registers method(s) that should be called before an existing object is updated.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">beforeUpdate([ <em>methods</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>methods</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_9721784D117E0FB1974AE7EFCB93EBCB' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Instruct&#32;Wheels&#32;to&#32;call&#32;the&#32;`fixObj`&#32;method&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;beforeUpdate(<span style='color:#006600'>"fixObj"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="beforevalidation" d:title="beforeValidation" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>beforeValidation()</code></h1>
		<h2>Description</h2>
		<p>Registers method(s) that should be called before an object is validated.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">beforeValidation([ <em>methods</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>methods</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_5C244CF1C6555A31558D7539409B6DED' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Instruct&#32;Wheels&#32;to&#32;call&#32;the&#32;`fixObj`&#32;method&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;beforeValidation(<span style='color:#006600'>"fixObj"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="beforevalidationoncreate" d:title="beforeValidationOnCreate" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>beforeValidationOnCreate()</code></h1>
		<h2>Description</h2>
		<p>Registers method(s) that should be called before a new object is validated.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">beforeValidationOnCreate([ <em>methods</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>methods</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_6C62D6705B46DE7D9CE0E7297CF2D33A' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Instruct&#32;Wheels&#32;to&#32;call&#32;the&#32;`fixObj`&#32;method&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;beforeValidationOnCreate(<span style='color:#006600'>"fixObj"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="beforevalidationonupdate" d:title="beforeValidationOnUpdate" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>beforeValidationOnUpdate()</code></h1>
		<h2>Description</h2>
		<p>Registers method(s) that should be called before an existing object is validated.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">beforeValidationOnUpdate([ <em>methods</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>methods</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_E2A70DE1255BADB8CA6F02B2116A9991' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Instruct&#32;Wheels&#32;to&#32;call&#32;the&#32;`fixObj`&#32;method&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;beforeValidationOnUpdate(<span style='color:#006600'>"fixObj"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="belongsto" d:title="belongsTo" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>belongsTo()</code></h1>
		<h2>Description</h2>
		<p>Sets up a `belongsTo` association between this model and the specified one. Use this association when this model contains a foreign key referencing another model.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">belongsTo(<em>name</em> [, <em>modelName</em>, <em>foreignKey</em>, <em>joinType</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Gives the association a name that you refer to when working with the association (in the `include` argument to @findAll, to name one example).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>modelName</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of associated model (usually not needed if you follow Wheels conventions because the model name will be deduced from the `name` argument).</td>
			</tr>
			<tr>
				<td valign="top"><code>foreignKey</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Foreign key property name (usually not needed if you follow Wheels conventions since the foreign key name will be deduced from the `name` argument).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>joinType</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>inner</code></td>
				<td valign="top">Use to set the join type when joining associated tables. Possible values are `inner` (for `INNER JOIN`) and `outer` (for `LEFT OUTER JOIN`).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_8B2B10B78B00F315B0F01AB7A42999D1' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Specify&#32;that&#32;instances&#32;of&#32;this&#32;model&#32;belong&#32;to&#32;an&#32;author.&#32;(The&#32;table&#32;for&#32;this&#32;model&#32;should&#32;have&#32;a&#32;foreign&#32;key&#32;set&#32;on&#32;it,&#32;typically&#32;named&#32;`authorid`.)&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;belongsTo(<span style='color:#006600'>"author"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Same&#32;as&#32;above,&#32;but&#32;because&#32;we&#32;have&#32;broken&#32;away&#32;from&#32;the&#32;foreign&#32;key&#32;naming&#32;convention,&#32;we&#32;need&#32;to&#32;set&#32;`modelName`&#32;and&#32;`foreignKey`&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;belongsTo(name=<span style='color:#006600'>"bookWriter"</span>,&#32;modelName=<span style='color:#006600'>"author"</span>,&#32;foreignKey=<span style='color:#006600'>"authorId"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="buttontag" d:title="buttonTag" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>buttonTag()</code></h1>
		<h2>Description</h2>
		<p>Builds and returns a string containing a button `form` control.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">buttonTag([ <em>content</em>, <em>type</em>, <em>image</em>, <em>value</em>, <em>disable</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>content</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>Save changes</code></td>
				<td valign="top">Content to display inside the button.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>type</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>submit</code></td>
				<td valign="top">The type for the button: `button`, `reset`, or `submit`.</td>
			</tr>
			<tr>
				<td valign="top"><code>image</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">File name of the image file to use in the button form control.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>value</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>save</code></td>
				<td valign="top">The value of the button when submitted.</td>
			</tr>
			<tr>
				<td valign="top"><code>disable</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Whether or not to disable the button upon clicking. (Prevents double-clicking.)</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/buttontag for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="buttonto" d:title="buttonTo" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>buttonTo()</code></h1>
		<h2>Description</h2>
		<p>Creates a form containing a single button that submits to the URL. The URL is built the same way as the @linkTo function.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">buttonTo([ <em>text</em>, <em>confirm</em>, <em>image</em>, <em>disable</em>, <em>route</em>, <em>controller</em>, <em>action</em>, <em>key</em>, <em>params</em>, <em>anchor</em>, <em>onlyPath</em>, <em>host</em>, <em>protocol</em>, <em>port</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>text</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The text content of the button.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>confirm</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Pass a message here to cause a JavaScript confirmation dialog box to pop up containing the message.</td>
			</tr>
			<tr>
				<td valign="top"><code>image</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">If you want to use an image for the button pass in the link to it here (relative from the `images` folder).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>disable</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Pass in `true` if you want the button to be disabled when clicked (can help prevent multiple clicks), or pass in a string if you want the button disabled and the text on the button updated (to "please wait...", for example).</td>
			</tr>
			<tr>
				<td valign="top"><code>route</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of a route that you have configured in `config/routes.cfm`.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>controller</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of the controller to include in the URL.</td>
			</tr>
			<tr>
				<td valign="top"><code>action</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of the action to include in the URL.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>key</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Key(s) to include in the URL.</td>
			</tr>
			<tr>
				<td valign="top"><code>params</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Any additional params to be set in the query string.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>anchor</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Sets an anchor name to be appended to the path.</td>
			</tr>
			<tr>
				<td valign="top"><code>onlyPath</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">If `true`, returns only the relative URL (no protocol, host name or port).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>host</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Set this to override the current host.</td>
			</tr>
			<tr>
				<td valign="top"><code>protocol</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Set this to override the current protocol.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>port</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>0</code></td>
				<td valign="top">Set this to override the current port number.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/buttonto for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="caches" d:title="caches" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>caches()</code></h1>
		<h2>Description</h2>
		<p>Tells Wheels to cache one or more actions.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">caches([ <em>action</em>, <em>time</em>, <em>static</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>action</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Action(s) to cache. This argument is also aliased as `actions`.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>time</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>60</code></td>
				<td valign="top">Minutes to cache the action(s) for.</td>
			</tr>
			<tr>
				<td valign="top"><code>static</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Set to `true` to tell Wheels that this is a static page and that it can skip running the controller filters (before and after filters set on actions) and application events (onSessionStart, onRequestStart etc).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_CE41CBC6AFAD3B34B662124036845060' style='color:#000'><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;caches(actions=<span style='color:#006600'>"browseByUser,browseByTitle"</span>,&#32;time=30)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="capitalize" d:title="capitalize" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>capitalize()</code></h1>
		<h2>Description</h2>
		<p>Returns the text with the first character converted to uppercase.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">capitalize(<em>text</em>)</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>text</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Text to capitalize.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/capitalize for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="changedfrom" d:title="changedFrom" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>changedFrom()</code></h1>
		<h2>Description</h2>
		<p>Returns the previous value of a property that has changed. Returns an empty string if no previous value exists. Wheels will keep a note of the previous property value until the object is saved to the database.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">changedFrom(<em>property</em>)</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>property</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of property to get the previous value for.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_80F7DED8FBFC6E9F4FB5B418A3778F55' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Get&#32;a&#32;member&#32;object&#32;and&#32;change&#32;the&#32;`email`&#32;property&#32;on&#32;it&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;member&#32;=&#32;model(<span style='color:#006600'>"member"</span>).findByKey(params.memberId)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;member.email&#32;=&#32;params.newEmail</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Get&#32;the&#32;previous&#32;value&#32;(what&#32;the&#32;`email`&#32;property&#32;was&#32;before&#32;it&#32;was&#32;changed)---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;oldValue&#32;=&#32;member.changedFrom(<span style='color:#006600'>"email"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;The&#32;above&#32;can&#32;also&#32;be&#32;done&#32;using&#32;a&#32;dynamic&#32;function&#32;like&#32;this&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;oldValue&#32;=&#32;member.emailChangedFrom()</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="changedproperties" d:title="changedProperties" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>changedProperties()</code></h1>
		<h2>Description</h2>
		<p>Returns a list of the object properties that have been changed but not yet saved to the database.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">changedProperties()</span></code></p>
		<h2>Parameters</h2>
		<p>None.</p>
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_32B9C43C35216C3A7DF6A53008020085' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Get&#32;an&#32;object,&#32;change&#32;it,&#32;and&#32;then&#32;ask&#32;for&#32;its&#32;changes&#32;(will&#32;return&#32;a&#32;list&#32;of&#32;the&#32;property&#32;names&#32;that&#32;have&#32;changed,&#32;not&#32;the&#32;values&#32;themselves)&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;member&#32;=&#32;model(<span style='color:#006600'>"member"</span>).findByKey(params.memberId)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;member.firstName&#32;=&#32;params.newFirstName</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;member.email&#32;=&#32;params.newEmail</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;changedProperties&#32;=&#32;member.changedProperties()</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="checkbox" d:title="checkBox" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>checkBox()</code></h1>
		<h2>Description</h2>
		<p>Builds and returns a string containing a check box form control based on the supplied `objectName` and `property`. In most cases, this function generates a form field that should represent a `boolean` style field in your data. Use @checkBoxTag or @hasManyCheckBox to generate check boxes for selecting multiple values. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">checkBox(<em>objectName</em>, <em>property</em> [, <em>association</em>, <em>position</em>, <em>checkedValue</em>, <em>uncheckedValue</em>, <em>label</em>, <em>labelPlacement</em>, <em>prepend</em>, <em>append</em>, <em>prependToLabel</em>, <em>appendToLabel</em>, <em>errorElement</em>, <em>errorClass</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>objectName</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The variable name of the object to build the form control for.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>property</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The name of the property to use in the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>association</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The name of the association that the property is located on. Used for building nested forms that work with nested properties. If you are building a form with deep nesting, simply pass in a list to the nested object, and Wheels will figure it out.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>position</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The position used when referencing a `hasMany` relationship in the `association` argument. Used for building nested forms that work with nested properties. If you are building a form with deep nestings, simply pass in a list of positions, and Wheels will figure it out.</td>
			</tr>
			<tr>
				<td valign="top"><code>checkedValue</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>1</code></td>
				<td valign="top">The value of the check box when it's in the `checked` state.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>uncheckedValue</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>0</code></td>
				<td valign="top">The value of the check box when it's in the `unchecked` state.</td>
			</tr>
			<tr>
				<td valign="top"><code>label</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>useDefaultLabel</code></td>
				<td valign="top">The label text to use in the form control.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>labelPlacement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>around</code></td>
				<td valign="top">Whether to place the label `before`, `after`, or wrapped `around` the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>prepend</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>append</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>prependToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>appendToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>errorElement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>span</code></td>
				<td valign="top">HTML tag to wrap the form control with when the object contains errors.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>errorClass</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>fieldWithErrors</code></td>
				<td valign="top">The class name of the HTML tag that wraps the form control when there are errors.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/checkbox for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="checkboxtag" d:title="checkBoxTag" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>checkBoxTag()</code></h1>
		<h2>Description</h2>
		<p>Builds and returns a string containing a check box form control based on the supplied `name`. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">checkBoxTag(<em>name</em> [, <em>checked</em>, <em>value</em>, <em>uncheckedValue</em>, <em>label</em>, <em>labelPlacement</em>, <em>prepend</em>, <em>append</em>, <em>prependToLabel</em>, <em>appendToLabel</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name to populate in tag's `name` attribute.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>checked</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Whether or not the check box should be checked by default.</td>
			</tr>
			<tr>
				<td valign="top"><code>value</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>1</code></td>
				<td valign="top">Value of check box in its `checked` state.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>uncheckedValue</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The value of the check box when it's on the `unchecked` state.</td>
			</tr>
			<tr>
				<td valign="top"><code>label</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The label text to use in the form control.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>labelPlacement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>around</code></td>
				<td valign="top">Whether to place the label `before`, `after`, or wrapped `around` the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>prepend</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>append</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>prependToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>appendToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/checkboxtag for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="clearerrors" d:title="clearErrors" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>clearErrors()</code></h1>
		<h2>Description</h2>
		<p>Clears out all errors set on the object or only the ones set for a specific property or name.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">clearErrors([ <em>property</em>, <em>name</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>property</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Specify a property name here if you want to clear all errors set on that property.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Specify an error name here if you want to clear all errors set with that error name.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_7D2460DC442E4422CE3A309251D52929' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Clear&#32;all&#32;errors&#32;on&#32;the&#32;object&#32;as&#32;a&#32;whole&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;this.clearErrors()</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Clear&#32;all&#32;errors&#32;on&#32;`firstName`&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;this.clearErrors(<span style='color:#006600'>"firstName"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="columndataforproperty" d:title="columnDataForProperty" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>columnDataForProperty()</code></h1>
		<h2>Description</h2>
		<p>Returns a struct with data for the named property.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">columnDataForProperty(<em>property</em>)</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>property</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of column to retrieve data for.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_D01900BEEDD9BD317C0D6DA5121E614A' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Get&#32;an&#32;object,&#32;set&#32;a&#32;value&#32;and&#32;then&#32;see&#32;if&#32;the&#32;property&#32;exists&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;employee&#32;=&#32;model(<span style='color:#006600'>"employee"</span>).new()</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;employee.columnDataForProperty(<span style='color:#006600'>"firstName"</span>)</span>&gt;</span><span style='color:Gray;'>&lt;!---&#32;returns&#32;column&#32;struct&#32;---&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="columnforproperty" d:title="columnForProperty" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>columnForProperty()</code></h1>
		<h2>Description</h2>
		<p>Returns the column name mapped for the named model property.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">columnForProperty(<em>property</em>)</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>property</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of property to inspect.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_3433B66161A2282AC281583ED10296A6' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Get&#32;an&#32;object,&#32;set&#32;a&#32;value&#32;and&#32;then&#32;see&#32;if&#32;the&#32;property&#32;exists&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;employee&#32;=&#32;model(<span style='color:#006600'>"employee"</span>).new()</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;employee.columnForProperty(<span style='color:#006600'>"firstName"</span>)</span>&gt;</span><span style='color:Gray;'>&lt;!---&#32;returns&#32;column&#32;name,&#32;in&#32;this&#32;case&#32;"firstname"&#32;if&#32;the&#32;convention&#32;is&#32;used&#32;---&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="columnnames" d:title="columnNames" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>columnNames()</code></h1>
		<h2>Description</h2>
		<p>Returns a list of column names in the table mapped to this model. The list is ordered according to the columns' ordinal positions in the database table.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">columnNames()</span></code></p>
		<h2>Parameters</h2>
		<p>None.</p>
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_1C588620ACF747F3D5B8A954D776E71A' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Get&#32;a&#32;list&#32;of&#32;all&#32;the&#32;column&#32;names&#32;in&#32;the&#32;table&#32;mapped&#32;to&#32;the&#32;`author`&#32;model&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;columns&#32;=&#32;model(<span style='color:#006600'>"author"</span>).columnNames()</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="columns" d:title="columns" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>columns()</code></h1>
		<h2>Description</h2>
		<p>Returns an array of columns names for the table associated with this class. Does not include calculated properties that will be generated by the Wheels ORM.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">columns()</span></code></p>
		<h2>Parameters</h2>
		<p>None.</p>
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_5615E2AA1A0A447840FE0E2831DD1F42' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Get&#32;the&#32;columns&#32;names&#32;in&#32;the&#32;order&#32;they&#32;are&#32;in&#32;the&#32;database&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;employee&#32;=&#32;model(<span style='color:#006600'>"employee"</span>).columns()</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="compareto" d:title="compareTo" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>compareTo()</code></h1>
		<h2>Description</h2>
		<p>Pass in another Wheels model object to see if the two objects are the same.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">compareTo()</span></code></p>
		<h2>Parameters</h2>
		<p>None.</p>
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_17092C421940ECC14B06EB57DAB9F80C' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Load&#32;a&#32;user&#32;requested&#32;in&#32;the&#32;URL/form&#32;and&#32;restrict&#32;access&#32;if&#32;it&#32;doesn't&#32;match&#32;the&#32;user&#32;stored&#32;in&#32;the&#32;session&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;user&#32;=&#32;model(<span style='color:#006600'>"user"</span>).findByKey(params.key)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfif&#32;not&#32;user.compareTo(session.user)&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;renderPage(action=<span style='color:#006600'>"accessDenied"</span>)</span>&gt;</span><br /><span style='color:#990033'>&lt;/cfif&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="contentfor" d:title="contentFor" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>contentFor()</code></h1>
		<h2>Description</h2>
		<p>Used to store a section's output for rendering within a layout. This content store acts as a stack, so you can store multiple pieces of content for a given section.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">contentFor([ <em>position</em>, <em>overwrite</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>position</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>last</code></td>
				<td valign="top">The position in the section's stack where you want the content placed. Valid values are `first`, `last`, or the numeric position.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>overwrite</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Whether or not to overwrite any of the content. Valid values are `false`, `true`, or `all`.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/contentfor for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="contentforlayout" d:title="contentForLayout" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>contentForLayout()</code></h1>
		<h2>Description</h2>
		<p>Includes content for the `body` section, which equates to the output generated by the view template run by the request.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">contentForLayout()</span></code></p>
		<h2>Parameters</h2>
		<p>None.</p>
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/contentforlayout for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="controller" d:title="controller" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>controller()</code></h1>
		<h2>Description</h2>
		<p>Creates and returns a controller object with your own custom `name` and `params`. Used primarily for testing purposes.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">controller(<em>name</em> [, <em>params</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of the controller to create.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>params</code></td>
				<td valign="top"><code>struct</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[runtime expression]</code></td>
				<td valign="top">The params struct (combination of `form` and `URL` variables).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_957108BFE4E6856FB02988AFF7E1116F' style='color:#000'><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;testController&#32;=&#32;controller(<span style='color:#006600'>"users"</span>,&#32;params)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="count" d:title="count" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>count()</code></h1>
		<h2>Description</h2>
		<p>Returns the number of rows that match the arguments (or all rows if no arguments are passed in). Uses the SQL function `COUNT`. If no records can be found to perform the calculation on, `0` is returned.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">count([ <em>where</em>, <em>include</em>, <em>parameterize</em>, <em>includeSoftDeletes</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>where</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">This argument maps to the `WHERE` clause of the query. The following operators are supported: `=`, `!=`, `<>`, `<`, `<=`, `>`, `>=`, `LIKE`, `NOT LIKE`, `IN`, `NOT IN`, `IS NULL`, `IS NOT NULL`, `AND`, and `OR`. (Note that the key words need to be written in upper case.) You can also use parentheses to group statements. You do not need to specify the table name(s); Wheels will do that for you.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>include</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Associations that should be included in the query using `INNER` or `LEFT OUTER` joins (which join type that is used depends on how the association has been set up in your model). If all included associations are set on the current model, you can specify them in a list (e.g. `department,addresses,emails`). You can build more complex `include` strings by using parentheses when the association is set on an included model, like `album(artist(genre))`, for example. These complex `include` strings only work when `returnAs` is set to `query` though.</td>
			</tr>
			<tr>
				<td valign="top"><code>parameterize</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `true` to use `cfqueryparam` on all columns, or pass in a list of property names to use `cfqueryparam` on those only.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>includeSoftDeletes</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">You can set this argument to `true` to include soft-deleted records in the results.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/count for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="create" d:title="create" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>create()</code></h1>
		<h2>Description</h2>
		<p>Creates a new object, saves it to the database (if the validation permits it), and returns it. If the validation fails, the unsaved object (with errors added to it) is still returned. Property names and values can be passed in either using named arguments or as a struct to the `properties` argument.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">create([ <em>properties</em>, <em>parameterize</em>, <em>reload</em>, <em>transaction</em>, <em>callbacks</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>properties</code></td>
				<td valign="top"><code>struct</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[runtime expression]</code></td>
				<td valign="top">The properties you want to set on the object (can also be passed in as named arguments).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>parameterize</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `true` to use `cfqueryparam` on all columns, or pass in a list of property names to use `cfqueryparam` on those only.</td>
			</tr>
			<tr>
				<td valign="top"><code>reload</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Set to `true` to reload the object from the database once an insert/update has completed.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>transaction</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[runtime expression]</code></td>
				<td valign="top">Set this to `commit` to update the database when the save has completed, `rollback` to run all the database queries but not commit them, or `none` to skip transaction handling altogether.</td>
			</tr>
			<tr>
				<td valign="top"><code>callbacks</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `false` to disable callbacks for this operation.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_AA094A153DAD25A4387EEE18D809FFA5' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Create&#32;a&#32;new&#32;author&#32;and&#32;save&#32;it&#32;to&#32;the&#32;database&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;newAuthor&#32;=&#32;model(<span style='color:#006600'>"author"</span>).create(params.author)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Same&#32;as&#32;above&#32;using&#32;named&#32;arguments&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;newAuthor&#32;=&#32;model(<span style='color:#006600'>"author"</span>).create(firstName=<span style='color:#006600'>"John"</span>,&#32;lastName=<span style='color:#006600'>"Doe"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Same&#32;as&#32;above&#32;using&#32;both&#32;named&#32;arguments&#32;and&#32;a&#32;struct&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;newAuthor&#32;=&#32;model(<span style='color:#006600'>"author"</span>).create(active=1,&#32;properties=params.author)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;If&#32;you&#32;have&#32;a&#32;`hasOne`&#32;or&#32;`hasMany`&#32;association&#32;setup&#32;from&#32;`customer`&#32;to&#32;`order`,&#32;you&#32;can&#32;do&#32;a&#32;scoped&#32;call.&#32;(The&#32;`createOrder`&#32;method&#32;below&#32;will&#32;call&#32;`model("order").create(customerId=aCustomer.id,&#32;shipping=params.shipping)`&#32;internally.)&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;aCustomer&#32;=&#32;model(<span style='color:#006600'>"customer"</span>).findByKey(params.customerId)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;anOrder&#32;=&#32;aCustomer.createOrder(shipping=params.shipping)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="cycle" d:title="cycle" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>cycle()</code></h1>
		<h2>Description</h2>
		<p>Cycles through list values every time it is called.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">cycle(<em>values</em> [, <em>name</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>values</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">List of values to cycle through.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>default</code></td>
				<td valign="top">Name to give the cycle. Useful when you use multiple cycles on a page.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/cycle for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="datasource" d:title="dataSource" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>dataSource()</code></h1>
		<h2>Description</h2>
		<p>Use this method to override the data source connection information for this model.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">dataSource(<em>datasource</em> [, <em>username</em>, <em>password</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>datasource</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The data source name to connect to.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>username</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The username for the data source.</td>
			</tr>
			<tr>
				<td valign="top"><code>password</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The password for the data source.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_6FA21AE7D2EB08849908C02906289412' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;In&#32;models/User.cfc&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"init"</span>&gt;</span><br />    <span style='color:Gray;'>&lt;!---&#32;Tell&#32;Wheels&#32;to&#32;use&#32;the&#32;data&#32;source&#32;named&#32;`users_source`&#32;instead&#32;of&#32;the&#32;default&#32;one&#32;whenever&#32;this&#32;model&#32;makes&#32;SQL&#32;calls&#32;&#32;---&gt;</span><br />&#32;&#32;            <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;dataSource(<span style='color:#006600'>"users_source"</span>)</span>&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="dateselect" d:title="dateSelect" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>dateSelect()</code></h1>
		<h2>Description</h2>
		<p>Builds and returns a string containing three select form controls for month, day, and year based on the supplied `objectName` and `property`.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">dateSelect([ <em>objectName</em>, <em>property</em>, <em>association</em>, <em>position</em>, <em>order</em>, <em>separator</em>, <em>startYear</em>, <em>endYear</em>, <em>monthDisplay</em>, <em>includeBlank</em>, <em>label</em>, <em>labelPlacement</em>, <em>prepend</em>, <em>append</em>, <em>prependToLabel</em>, <em>appendToLabel</em>, <em>errorElement</em>, <em>errorClass</em>, <em>combine</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>objectName</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The variable name of the object to build the form control for.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>property</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The name of the property to use in the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>association</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The name of the association that the property is located on. Used for building nested forms that work with nested properties. If you are building a form with deep nesting, simply pass in a list to the nested object, and Wheels will figure it out.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>position</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The position used when referencing a `hasMany` relationship in the `association` argument. Used for building nested forms that work with nested properties. If you are building a form with deep nestings, simply pass in a list of positions, and Wheels will figure it out.</td>
			</tr>
			<tr>
				<td valign="top"><code>order</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>month,day,year</code></td>
				<td valign="top">Use to change the order of or exclude date select tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>separator</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Use to change the character that is displayed between the date select tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>startYear</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>2005</code></td>
				<td valign="top">First year in select list.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>endYear</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>2015</code></td>
				<td valign="top">Last year in select list.</td>
			</tr>
			<tr>
				<td valign="top"><code>monthDisplay</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>names</code></td>
				<td valign="top">Pass in `names`, `numbers`, or `abbreviations` to control display.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>includeBlank</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").</td>
			</tr>
			<tr>
				<td valign="top"><code>label</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">The label text to use in the form control. The label will be applied to all `select` tags, but you can pass in a list to cutomize each one individually.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>labelPlacement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>around</code></td>
				<td valign="top">Whether to place the label `before`, `after`, or wrapped `around` the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>prepend</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>append</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>prependToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>appendToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>errorElement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>span</code></td>
				<td valign="top">HTML tag to wrap the form control with when the object contains errors.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>errorClass</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>fieldWithErrors</code></td>
				<td valign="top">The class name of the HTML tag that wraps the form control when there are errors.</td>
			</tr>
			<tr>
				<td valign="top"><code>combine</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Set to `false` to not combine the select parts into a single `DateTime` object.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/dateselect for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="dateselecttags" d:title="dateSelectTags" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>dateSelectTags()</code></h1>
		<h2>Description</h2>
		<p>Builds and returns a string containing three select form controls (month, day, and year) based on a `name` and `value`.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">dateSelectTags(<em>name</em> [, <em>selected</em>, <em>order</em>, <em>separator</em>, <em>startYear</em>, <em>endYear</em>, <em>monthDisplay</em>, <em>includeBlank</em>, <em>label</em>, <em>labelPlacement</em>, <em>prepend</em>, <em>append</em>, <em>prependToLabel</em>, <em>appendToLabel</em>, <em>combine</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name to populate in tag's `name` attribute.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>selected</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Value of option that should be selected by default.</td>
			</tr>
			<tr>
				<td valign="top"><code>order</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>month,day,year</code></td>
				<td valign="top">Use to change the order of or exclude date select tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>separator</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Use to change the character that is displayed between the date select tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>startYear</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>2005</code></td>
				<td valign="top">First year in select list.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>endYear</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>2015</code></td>
				<td valign="top">Last year in select list.</td>
			</tr>
			<tr>
				<td valign="top"><code>monthDisplay</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>names</code></td>
				<td valign="top">Pass in `names`, `numbers`, or `abbreviations` to control display.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>includeBlank</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").</td>
			</tr>
			<tr>
				<td valign="top"><code>label</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The label text to use in the form control. The label will be applied to all `select` tags, but you can pass in a list to cutomize each one individually.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>labelPlacement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>around</code></td>
				<td valign="top">Whether to place the label `before`, `after`, or wrapped `around` the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>prepend</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>append</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>prependToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>appendToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>combine</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Set to `false` to not combine the select parts into a single `DateTime` object.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/dateselecttags for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="datetimeselect" d:title="dateTimeSelect" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>dateTimeSelect()</code></h1>
		<h2>Description</h2>
		<p>Builds and returns a string containing six select form controls (three for date selection and the remaining three for time selection) based on the supplied `objectName` and `property`.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">dateTimeSelect(<em>objectName</em>, <em>property</em> [, <em>association</em>, <em>position</em>, <em>dateOrder</em>, <em>dateSeparator</em>, <em>startYear</em>, <em>endYear</em>, <em>monthDisplay</em>, <em>timeOrder</em>, <em>timeSeparator</em>, <em>minuteStep</em>, <em>separator</em>, <em>includeBlank</em>, <em>label</em>, <em>labelPlacement</em>, <em>prepend</em>, <em>append</em>, <em>prependToLabel</em>, <em>appendToLabel</em>, <em>errorElement</em>, <em>errorClass</em>, <em>combine</em>, <em>twelveHour</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>objectName</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The variable name of the object to build the form control for.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>property</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The name of the property to use in the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>association</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The name of the association that the property is located on. Used for building nested forms that work with nested properties. If you are building a form with deep nesting, simply pass in a list to the nested object, and Wheels will figure it out.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>position</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The position used when referencing a `hasMany` relationship in the `association` argument. Used for building nested forms that work with nested properties. If you are building a form with deep nestings, simply pass in a list of positions, and Wheels will figure it out.</td>
			</tr>
			<tr>
				<td valign="top"><code>dateOrder</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>month,day,year</code></td>
				<td valign="top">Use to change the order of or exclude date select tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>dateSeparator</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Use to change the character that is displayed between the date select tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>startYear</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>2005</code></td>
				<td valign="top">First year in select list.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>endYear</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>2015</code></td>
				<td valign="top">Last year in select list.</td>
			</tr>
			<tr>
				<td valign="top"><code>monthDisplay</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>names</code></td>
				<td valign="top">Pass in `names`, `numbers`, or `abbreviations` to control display.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>timeOrder</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>hour,minute,second</code></td>
				<td valign="top">Use to change the order of or exclude time select tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>timeSeparator</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>:</code></td>
				<td valign="top">Use to change the character that is displayed between the time select tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>minuteStep</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>1</code></td>
				<td valign="top">Pass in `10` to only show minute 10, 20, 30, etc.</td>
			</tr>
			<tr>
				<td valign="top"><code>separator</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code> - </code></td>
				<td valign="top">Use to change the character that is displayed between the first and second set of select tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>includeBlank</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").</td>
			</tr>
			<tr>
				<td valign="top"><code>label</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">The label text to use in the form control. The label will be applied to all `select` tags, but you can pass in a list to cutomize each one individually.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>labelPlacement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>around</code></td>
				<td valign="top">Whether to place the label `before`, `after`, or wrapped `around` the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>prepend</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>append</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>prependToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>appendToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>errorElement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>span</code></td>
				<td valign="top">HTML tag to wrap the form control with when the object contains errors.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>errorClass</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>fieldWithErrors</code></td>
				<td valign="top">The class name of the HTML tag that wraps the form control when there are errors.</td>
			</tr>
			<tr>
				<td valign="top"><code>combine</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Set to `false` to not combine the select parts into a single `DateTime` object.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>twelveHour</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">whether to display the hours in 24 or 12 hour format. 12 hour format has AM/PM drop downs</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/datetimeselect for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="datetimeselecttags" d:title="dateTimeSelectTags" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>dateTimeSelectTags()</code></h1>
		<h2>Description</h2>
		<p>Builds and returns a string containing six select form controls (three for date selection and the remaining three for time selection) based on a `name`.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">dateTimeSelectTags(<em>name</em> [, <em>selected</em>, <em>dateOrder</em>, <em>dateSeparator</em>, <em>startYear</em>, <em>endYear</em>, <em>monthDisplay</em>, <em>timeOrder</em>, <em>timeSeparator</em>, <em>minuteStep</em>, <em>separator</em>, <em>includeBlank</em>, <em>label</em>, <em>labelPlacement</em>, <em>prepend</em>, <em>append</em>, <em>prependToLabel</em>, <em>appendToLabel</em>, <em>combine</em>, <em>twelveHour</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name to populate in tag's `name` attribute.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>selected</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Value of option that should be selected by default.</td>
			</tr>
			<tr>
				<td valign="top"><code>dateOrder</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>month,day,year</code></td>
				<td valign="top">Use to change the order of or exclude date select tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>dateSeparator</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Use to change the character that is displayed between the date select tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>startYear</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>2005</code></td>
				<td valign="top">First year in select list.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>endYear</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>2015</code></td>
				<td valign="top">Last year in select list.</td>
			</tr>
			<tr>
				<td valign="top"><code>monthDisplay</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>names</code></td>
				<td valign="top">Pass in `names`, `numbers`, or `abbreviations` to control display.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>timeOrder</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>hour,minute,second</code></td>
				<td valign="top">Use to change the order of or exclude time select tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>timeSeparator</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>:</code></td>
				<td valign="top">Use to change the character that is displayed between the time select tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>minuteStep</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>1</code></td>
				<td valign="top">Pass in `10` to only show minute 10, 20, 30, etc.</td>
			</tr>
			<tr>
				<td valign="top"><code>separator</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code> - </code></td>
				<td valign="top">Use to change the character that is displayed between the first and second set of select tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>includeBlank</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").</td>
			</tr>
			<tr>
				<td valign="top"><code>label</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The label text to use in the form control. The label will be applied to all `select` tags, but you can pass in a list to cutomize each one individually.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>labelPlacement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>around</code></td>
				<td valign="top">Whether to place the label `before`, `after`, or wrapped `around` the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>prepend</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>append</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>prependToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>appendToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>combine</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Set to `false` to not combine the select parts into a single `DateTime` object.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>twelveHour</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">whether to display the hours in 24 or 12 hour format. 12 hour format has AM/PM drop downs</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/datetimeselecttags for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="dayselecttag" d:title="daySelectTag" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>daySelectTag()</code></h1>
		<h2>Description</h2>
		<p>Builds and returns a string containing a select form control for the days of the week based on the supplied `name`.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">daySelectTag(<em>name</em> [, <em>selected</em>, <em>includeBlank</em>, <em>label</em>, <em>labelPlacement</em>, <em>prepend</em>, <em>append</em>, <em>prependToLabel</em>, <em>appendToLabel</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name to populate in tag's `name` attribute.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>selected</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The day that should be selected initially.</td>
			</tr>
			<tr>
				<td valign="top"><code>includeBlank</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>label</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The label text to use in the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>labelPlacement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>around</code></td>
				<td valign="top">Whether to place the label `before`, `after`, or wrapped `around` the form control.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>prepend</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>append</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>prependToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>appendToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/dayselecttag for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="delete" d:title="delete" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>delete()</code></h1>
		<h2>Description</h2>
		<p>Deletes the object, which means the row is deleted from the database (unless prevented by a `beforeDelete` callback). Returns `true` on successful deletion of the row, `false` otherwise.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">delete([ <em>parameterize</em>, <em>transaction</em>, <em>callbacks</em>, <em>includeSoftDeletes</em>, <em>softDelete</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>parameterize</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `true` to use `cfqueryparam` on all columns, or pass in a list of property names to use `cfqueryparam` on those only.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>transaction</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[runtime expression]</code></td>
				<td valign="top">Set this to `commit` to update the database when the save has completed, `rollback` to run all the database queries but not commit them, or `none` to skip transaction handling altogether.</td>
			</tr>
			<tr>
				<td valign="top"><code>callbacks</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `false` to disable callbacks for this operation.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>includeSoftDeletes</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">You can set this argument to `true` to include soft-deleted records in the results.</td>
			</tr>
			<tr>
				<td valign="top"><code>softDelete</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `false` to permanently delete a record, even if it has a soft delete column.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_7FFD35E03319D383323CDF8CDA540E3D' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Get&#32;a&#32;post&#32;object&#32;and&#32;then&#32;delete&#32;it&#32;from&#32;the&#32;database&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;post&#32;=&#32;model(<span style='color:#006600'>"post"</span>).findByKey(33)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;post.delete()</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;If&#32;you&#32;have&#32;a&#32;`hasMany`&#32;association&#32;setup&#32;from&#32;`post`&#32;to&#32;`comment`,&#32;you&#32;can&#32;do&#32;a&#32;scoped&#32;call.&#32;(The&#32;`deleteComment`&#32;method&#32;below&#32;will&#32;call&#32;`comment.delete()`&#32;internally.)&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;post&#32;=&#32;model(<span style='color:#006600'>"post"</span>).findByKey(params.postId)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;comment&#32;=&#32;model(<span style='color:#006600'>"comment"</span>).findByKey(params.commentId)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;post.deleteComment(comment)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="deleteall" d:title="deleteAll" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>deleteAll()</code></h1>
		<h2>Description</h2>
		<p>Deletes all records that match the `where` argument. By default, objects will not be instantiated and therefore callbacks and validations are not invoked. You can change this behavior by passing in `instantiate=true`. Returns the number of records that were deleted.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">deleteAll([ <em>where</em>, <em>include</em>, <em>reload</em>, <em>parameterize</em>, <em>instantiate</em>, <em>transaction</em>, <em>callbacks</em>, <em>includeSoftDeletes</em>, <em>softDelete</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>where</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">This argument maps to the `WHERE` clause of the query. The following operators are supported: `=`, `!=`, `<>`, `<`, `<=`, `>`, `>=`, `LIKE`, `NOT LIKE`, `IN`, `NOT IN`, `IS NULL`, `IS NOT NULL`, `AND`, and `OR`. (Note that the key words need to be written in upper case.) You can also use parentheses to group statements. You do not need to specify the table name(s); Wheels will do that for you.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>include</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Associations that should be included in the query using `INNER` or `LEFT OUTER` joins (which join type that is used depends on how the association has been set up in your model). If all included associations are set on the current model, you can specify them in a list (e.g. `department,addresses,emails`). You can build more complex `include` strings by using parentheses when the association is set on an included model, like `album(artist(genre))`, for example. These complex `include` strings only work when `returnAs` is set to `query` though.</td>
			</tr>
			<tr>
				<td valign="top"><code>reload</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Set to `true` to force Wheels to query the database even though an identical query may have been run in the same request. (The default in Wheels is to get the second query from the request-level cache.)</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>parameterize</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `true` to use `cfqueryparam` on all columns, or pass in a list of property names to use `cfqueryparam` on those only.</td>
			</tr>
			<tr>
				<td valign="top"><code>instantiate</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Whether or not to instantiate the object(s) first. When objects are not instantiated, any callbacks and validations set on them will be skipped.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>transaction</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[runtime expression]</code></td>
				<td valign="top">Set this to `commit` to update the database when the save has completed, `rollback` to run all the database queries but not commit them, or `none` to skip transaction handling altogether.</td>
			</tr>
			<tr>
				<td valign="top"><code>callbacks</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `false` to disable callbacks for this operation.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>includeSoftDeletes</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">You can set this argument to `true` to include soft-deleted records in the results.</td>
			</tr>
			<tr>
				<td valign="top"><code>softDelete</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `false` to permanently delete a record, even if it has a soft delete column.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/deleteall for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="deletebykey" d:title="deleteByKey" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>deleteByKey()</code></h1>
		<h2>Description</h2>
		<p>Finds the record with the supplied key and deletes it. Returns `true` on successful deletion of the row, `false` otherwise.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">deleteByKey(<em>key</em> [, <em>reload</em>, <em>transaction</em>, <em>callbacks</em>, <em>includeSoftDeletes</em>, <em>softDelete</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>key</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Primary key value(s) of the record to fetch. Separate with comma if passing in multiple primary key values. Accepts a string, list, or a numeric value.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>reload</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Set to `true` to force Wheels to query the database even though an identical query may have been run in the same request. (The default in Wheels is to get the second query from the request-level cache.)</td>
			</tr>
			<tr>
				<td valign="top"><code>transaction</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[runtime expression]</code></td>
				<td valign="top">Set this to `commit` to update the database when the save has completed, `rollback` to run all the database queries but not commit them, or `none` to skip transaction handling altogether.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>callbacks</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `false` to disable callbacks for this operation.</td>
			</tr>
			<tr>
				<td valign="top"><code>includeSoftDeletes</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">You can set this argument to `true` to include soft-deleted records in the results.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>softDelete</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `false` to permanently delete a record, even if it has a soft delete column.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_C3501590E22258F7626790A98FB0542C' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Delete&#32;the&#32;user&#32;with&#32;the&#32;primary&#32;key&#32;value&#32;of&#32;`1`&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;result&#32;=&#32;model(<span style='color:#006600'>"user"</span>).deleteByKey(1)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="deleteone" d:title="deleteOne" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>deleteOne()</code></h1>
		<h2>Description</h2>
		<p>Gets an object based on conditions and deletes it.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">deleteOne([ <em>where</em>, <em>order</em>, <em>reload</em>, <em>transaction</em>, <em>callbacks</em>, <em>includeSoftDeletes</em>, <em>softDelete</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>where</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">This argument maps to the `WHERE` clause of the query. The following operators are supported: `=`, `!=`, `<>`, `<`, `<=`, `>`, `>=`, `LIKE`, `NOT LIKE`, `IN`, `NOT IN`, `IS NULL`, `IS NOT NULL`, `AND`, and `OR`. (Note that the key words need to be written in upper case.) You can also use parentheses to group statements. You do not need to specify the table name(s); Wheels will do that for you.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>order</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Maps to the `ORDER BY` clause of the query. You do not need to specify the table name(s); Wheels will do that for you.</td>
			</tr>
			<tr>
				<td valign="top"><code>reload</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Set to `true` to force Wheels to query the database even though an identical query may have been run in the same request. (The default in Wheels is to get the second query from the request-level cache.)</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>transaction</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[runtime expression]</code></td>
				<td valign="top">Set this to `commit` to update the database when the save has completed, `rollback` to run all the database queries but not commit them, or `none` to skip transaction handling altogether.</td>
			</tr>
			<tr>
				<td valign="top"><code>callbacks</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `false` to disable callbacks for this operation.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>includeSoftDeletes</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">You can set this argument to `true` to include soft-deleted records in the results.</td>
			</tr>
			<tr>
				<td valign="top"><code>softDelete</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `false` to permanently delete a record, even if it has a soft delete column.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/deleteone for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="deobfuscateparam" d:title="deobfuscateParam" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>deobfuscateParam()</code></h1>
		<h2>Description</h2>
		<p>Deobfuscates a value.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">deobfuscateParam(<em>param</em>)</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>param</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Value to deobfuscate.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_56D6864576C1205D9FEE02DC150CE16B' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Get&#32;the&#32;original&#32;value&#32;from&#32;an&#32;obfuscated&#32;one&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;originalValue&#32;=&#32;deobfuscateParam(<span style='color:#006600'>"b7ab9a50"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="distanceoftimeinwords" d:title="distanceOfTimeInWords" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>distanceOfTimeInWords()</code></h1>
		<h2>Description</h2>
		<p>Pass in two dates to this method, and it will return a string describing the difference between them.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">distanceOfTimeInWords(<em>fromTime</em>, <em>toTime</em> [, <em>includeSeconds</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>fromTime</code></td>
				<td valign="top"><code>date</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Date to compare from.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>toTime</code></td>
				<td valign="top"><code>date</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Date to compare to.</td>
			</tr>
			<tr>
				<td valign="top"><code>includeSeconds</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Whether or not to include the number of seconds in the returned string.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/distanceoftimeinwords for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="endformtag" d:title="endFormTag" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>endFormTag()</code></h1>
		<h2>Description</h2>
		<p>Builds and returns a string containing the closing `form` tag.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">endFormTag()</span></code></p>
		<h2>Parameters</h2>
		<p>None.</p>
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/endformtag for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="errorcount" d:title="errorCount" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>errorCount()</code></h1>
		<h2>Description</h2>
		<p>Returns the number of errors this object has associated with it. Specify `property` or `name` if you wish to count only specific errors.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">errorCount([ <em>property</em>, <em>name</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>property</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Specify a property name here if you want to count only errors set on a specific property.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Specify an error name here if you want to count only errors set with a specific error name.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_75688419DB35825FC0A95C782C0FFCA8' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Check&#32;how&#32;many&#32;errors&#32;are&#32;set&#32;on&#32;the&#32;object&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfif&#32;author.errorCount()&#32;GTE&#32;10&gt;</span><br />    <span style='color:Gray;'>&lt;!---&#32;Do&#32;something&#32;to&#32;deal&#32;with&#32;this&#32;very&#32;erroneous&#32;author&#32;here...&#32;---&gt;</span><br /><span style='color:#990033'>&lt;/cfif&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Check&#32;how&#32;many&#32;errors&#32;are&#32;associated&#32;with&#32;the&#32;`email`&#32;property&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfif&#32;author.errorCount(<span style='color:#0000CC'>"email"</span>)&#32;gt&#32;0&gt;</span><br />    <span style='color:Gray;'>&lt;!---&#32;Do&#32;something&#32;to&#32;deal&#32;with&#32;this&#32;erroneous&#32;author&#32;here...&#32;---&gt;</span><br /><span style='color:#990033'>&lt;/cfif&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="errormessageon" d:title="errorMessageOn" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>errorMessageOn()</code></h1>
		<h2>Description</h2>
		<p>Returns the error message, if one exists, on the object's property. If multiple error messages exist, the first one is returned.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">errorMessageOn(<em>objectName</em>, <em>property</em> [, <em>prependText</em>, <em>appendText</em>, <em>wrapperElement</em>, <em>class</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>objectName</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The variable name of the object to display the error message for.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>property</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The name of the property to display the error message for.</td>
			</tr>
			<tr>
				<td valign="top"><code>prependText</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the error message.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>appendText</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the error message.</td>
			</tr>
			<tr>
				<td valign="top"><code>wrapperElement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>span</code></td>
				<td valign="top">HTML element to wrap the error message in.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>class</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>errorMessage</code></td>
				<td valign="top">CSS class to set on the wrapper element.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/errormessageon for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="errormessagesfor" d:title="errorMessagesFor" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>errorMessagesFor()</code></h1>
		<h2>Description</h2>
		<p>Builds and returns a list (`ul` tag with a class of `error-messages`) containing all the error messages for all the properties of the object (if any). Returns an empty string otherwise.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">errorMessagesFor(<em>objectName</em> [, <em>class</em>, <em>showDuplicates</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>objectName</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The variable name of the object to display error messages for.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>class</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>errorMessages</code></td>
				<td valign="top">CSS class to set on the `ul` element.</td>
			</tr>
			<tr>
				<td valign="top"><code>showDuplicates</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Whether or not to show duplicate error messages.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/errormessagesfor for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="errorson" d:title="errorsOn" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>errorsOn()</code></h1>
		<h2>Description</h2>
		<p>Returns an array of all errors associated with the supplied property (and error name if passed in).</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">errorsOn(<em>property</em> [, <em>name</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>property</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Specify the property name to return errors for here.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">If you want to return only errors on the above property set with a specific error name you can specify it here.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_85ED1428D63525332B4C866B81F763A6' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Get&#32;all&#32;errors&#32;related&#32;to&#32;the&#32;email&#32;address&#32;of&#32;the&#32;user&#32;object&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;errors&#32;=&#32;user.errorsOn(<span style='color:#006600'>"emailAddress"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="errorsonbase" d:title="errorsOnBase" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>errorsOnBase()</code></h1>
		<h2>Description</h2>
		<p>Returns an array of all errors associated with the object as a whole (not related to any specific property).</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">errorsOnBase([ <em>name</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Specify an error name here to only return errors for that error name.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_720B57E52CC73A85E744216ADAF2EA32' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Get&#32;all&#32;general&#32;type&#32;errors&#32;for&#32;the&#32;user&#32;object&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;errors&#32;=&#32;user.errorsOnBase()</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="excerpt" d:title="excerpt" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>excerpt()</code></h1>
		<h2>Description</h2>
		<p>Extracts an excerpt from text that matches the first instance of a given phrase.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">excerpt(<em>text</em>, <em>phrase</em> [, <em>radius</em>, <em>excerptString</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>text</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The text to extract an excerpt from.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>phrase</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The phrase to extract.</td>
			</tr>
			<tr>
				<td valign="top"><code>radius</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>100</code></td>
				<td valign="top">Number of characters to extract surrounding the phrase.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>excerptString</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>...</code></td>
				<td valign="top">String to replace first and/or last characters with.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/excerpt for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="exists" d:title="exists" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>exists()</code></h1>
		<h2>Description</h2>
		<p>Checks if a record exists in the table. You can pass in either a primary key value to the `key` argument or a string to the `where` argument.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">exists([ <em>key</em>, <em>where</em>, <em>reload</em>, <em>parameterize</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>key</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Primary key value(s) of the record to fetch. Separate with comma if passing in multiple primary key values. Accepts a string, list, or a numeric value.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>where</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">This argument maps to the `WHERE` clause of the query. The following operators are supported: `=`, `!=`, `<>`, `<`, `<=`, `>`, `>=`, `LIKE`, `NOT LIKE`, `IN`, `NOT IN`, `IS NULL`, `IS NOT NULL`, `AND`, and `OR`. (Note that the key words need to be written in upper case.) You can also use parentheses to group statements. You do not need to specify the table name(s); Wheels will do that for you.</td>
			</tr>
			<tr>
				<td valign="top"><code>reload</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Set to `true` to force Wheels to query the database even though an identical query may have been run in the same request. (The default in Wheels is to get the second query from the request-level cache.)</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>parameterize</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `true` to use `cfqueryparam` on all columns, or pass in a list of property names to use `cfqueryparam` on those only.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/exists for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="filefield" d:title="fileField" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>fileField()</code></h1>
		<h2>Description</h2>
		<p>Builds and returns a string containing a file field form control based on the supplied `objectName` and `property`. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">fileField(<em>objectName</em>, <em>property</em> [, <em>association</em>, <em>position</em>, <em>label</em>, <em>labelPlacement</em>, <em>prepend</em>, <em>append</em>, <em>prependToLabel</em>, <em>appendToLabel</em>, <em>errorElement</em>, <em>errorClass</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>objectName</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The variable name of the object to build the form control for.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>property</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The name of the property to use in the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>association</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The name of the association that the property is located on. Used for building nested forms that work with nested properties. If you are building a form with deep nesting, simply pass in a list to the nested object, and Wheels will figure it out.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>position</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The position used when referencing a `hasMany` relationship in the `association` argument. Used for building nested forms that work with nested properties. If you are building a form with deep nestings, simply pass in a list of positions, and Wheels will figure it out.</td>
			</tr>
			<tr>
				<td valign="top"><code>label</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>useDefaultLabel</code></td>
				<td valign="top">The label text to use in the form control.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>labelPlacement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>around</code></td>
				<td valign="top">Whether to place the label `before`, `after`, or wrapped `around` the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>prepend</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>append</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>prependToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>appendToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>errorElement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>span</code></td>
				<td valign="top">HTML tag to wrap the form control with when the object contains errors.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>errorClass</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>fieldWithErrors</code></td>
				<td valign="top">The class name of the HTML tag that wraps the form control when there are errors.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/filefield for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="filefieldtag" d:title="fileFieldTag" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>fileFieldTag()</code></h1>
		<h2>Description</h2>
		<p>Builds and returns a string containing a file form control based on the supplied `name`. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">fileFieldTag(<em>name</em> [, <em>label</em>, <em>labelPlacement</em>, <em>prepend</em>, <em>append</em>, <em>prependToLabel</em>, <em>appendToLabel</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name to populate in tag's `name` attribute.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>label</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The label text to use in the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>labelPlacement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>around</code></td>
				<td valign="top">Whether to place the label `before`, `after`, or wrapped `around` the form control.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>prepend</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>append</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>prependToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>appendToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/filefieldtag for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="filterchain" d:title="filterChain" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>filterChain()</code></h1>
		<h2>Description</h2>
		<p>Returns an array of all the filters set on this controller in the order in which they will be executed.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">filterChain([ <em>type</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>type</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>all</code></td>
				<td valign="top">Use this argument to return only `before` or `after` filters.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_36313595A850C7469BE826A07C9E5818' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Get&#32;filter&#32;chain,&#32;remove&#32;the&#32;first&#32;item,&#32;and&#32;set&#32;it&#32;back&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;myFilterChain&#32;=&#32;filterChain()</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;<span style='color:blue'>ArrayDeleteAt</span>(myFilterChain,&#32;1)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;setFilterChain(myFilterChain)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="filters" d:title="filters" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>filters()</code></h1>
		<h2>Description</h2>
		<p>Tells Wheels to run a function before an action is run or after an action has been run. You can also specify multiple functions and actions.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">filters(<em>through</em> [, <em>type</em>, <em>only</em>, <em>except</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>through</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Function(s) to execute before or after the action(s).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>type</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>before</code></td>
				<td valign="top">Whether to run the function(s) before or after the action(s).</td>
			</tr>
			<tr>
				<td valign="top"><code>only</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Pass in a list of action names (or one action name) to tell Wheels that the filter function(s) should only be run on these actions.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>except</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Pass in a list of action names (or one action name) to tell Wheels that the filter function(s) should be run on all actions except the specified ones.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_568BEC0D0FFE6A27E78F758EB5274E1D' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Always&#32;execute&#32;`restrictAccess`&#32;before&#32;all&#32;actions&#32;in&#32;this&#32;controller&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;filters(<span style='color:#006600'>"restrictAccess"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Always&#32;execute&#32;`isLoggedIn`&#32;and&#32;`checkIPAddress`&#32;(in&#32;that&#32;order)&#32;before&#32;all&#32;actions&#32;in&#32;this&#32;controller&#32;except&#32;the&#32;`home`&#32;and&#32;`login`&#32;actions&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;filters(through=<span style='color:#006600'>"isLoggedIn,checkIPAddress"</span>,&#32;except=<span style='color:#006600'>"home,login"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="findall" d:title="findAll" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>findAll()</code></h1>
		<h2>Description</h2>
		<p>Returns records from the database table mapped to this model according to the arguments passed in. (Use the `where` argument to decide which records to get, use the `order` argument to set in what order those records should be returned, and so on). The records will be returned as either a `cfquery` result set or an array of objects (depending on what the `returnAs` argument is set to). Instead of using the `where` argument, you can create cleaner code by making use of a concept called dynamic finders.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">findAll([ <em>where</em>, <em>order</em>, <em>group</em>, <em>select</em>, <em>distinct</em>, <em>include</em>, <em>maxRows</em>, <em>page</em>, <em>perPage</em>, <em>count</em>, <em>handle</em>, <em>cache</em>, <em>reload</em>, <em>parameterize</em>, <em>returnAs</em>, <em>returnIncluded</em>, <em>callbacks</em>, <em>includeSoftDeletes</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>where</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">This argument maps to the `WHERE` clause of the query. The following operators are supported: `=`, `!=`, `<>`, `<`, `<=`, `>`, `>=`, `LIKE`, `NOT LIKE`, `IN`, `NOT IN`, `IS NULL`, `IS NOT NULL`, `AND`, and `OR`. (Note that the key words need to be written in upper case.) You can also use parentheses to group statements. You do not need to specify the table name(s); Wheels will do that for you.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>order</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Maps to the `ORDER BY` clause of the query. You do not need to specify the table name(s); Wheels will do that for you.</td>
			</tr>
			<tr>
				<td valign="top"><code>group</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Maps to the `GROUP BY` clause of the query. You do not need to specify the table name(s); Wheels will do that for you.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>select</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Determines how the `SELECT` clause for the query used to return data will look.	You can pass in a list of the properties (which map to columns) that you want returned from your table(s). If you don't set this argument at all, Wheels will select all properties from your table(s). If you specify a table name (e.g. `users.email`) or alias a column (e.g. `fn AS firstName`) in the list, then the entire list will be passed through unchanged and used in the `SELECT` clause of the query. By default, all column names in tables `JOIN`ed via the `include` argument will be prepended with the singular version of the included table name.</td>
			</tr>
			<tr>
				<td valign="top"><code>distinct</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Whether to add the `DISTINCT` keyword to your `SELECT` clause. Wheels will, when necessary, add this automatically (when using pagination and a `hasMany` association is used in the `include` argument, to name one example).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>include</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Associations that should be included in the query using `INNER` or `LEFT OUTER` joins (which join type that is used depends on how the association has been set up in your model). If all included associations are set on the current model, you can specify them in a list (e.g. `department,addresses,emails`). You can build more complex `include` strings by using parentheses when the association is set on an included model, like `album(artist(genre))`, for example. These complex `include` strings only work when `returnAs` is set to `query` though.</td>
			</tr>
			<tr>
				<td valign="top"><code>maxRows</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>-1</code></td>
				<td valign="top">Maximum number of records to retrieve. Passed on to the `maxRows` `cfquery` attribute. The default, `-1`, means that all records will be retrieved.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>page</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>0</code></td>
				<td valign="top">If you want to paginate records, you can do so by specifying a page number here. For example, getting records 11-20 would be page number 2 when `perPage` is kept at the default setting (10 records per page). The default, `0`, means that records won't be paginated and that the `perPage`, `count`, and `handle` arguments will be ignored.</td>
			</tr>
			<tr>
				<td valign="top"><code>perPage</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>10</code></td>
				<td valign="top">When using pagination, you can specify how many records you want to fetch per page here. This argument is only used when the `page` argument has been passed in.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>count</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>0</code></td>
				<td valign="top">When using pagination and you know in advance how many records you want to paginate through, you can pass in that value here. Doing so will prevent Wheels from running a `COUNT` query to get this value. This argument is only used when the `page` argument has been passed in.</td>
			</tr>
			<tr>
				<td valign="top"><code>handle</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>query</code></td>
				<td valign="top">Handle to use for the query in pagination. This is useful when you're paginating multiple queries and need to reference them in the @paginationLinks function, for example. This argument is only used when the `page` argument has been passed in.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>cache</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">If you want to cache the query, you can do so by specifying the number of minutes you want to cache the query for here. If you set it to `true`, the default cache time will be used (60 minutes).</td>
			</tr>
			<tr>
				<td valign="top"><code>reload</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Set to `true` to force Wheels to query the database even though an identical query may have been run in the same request. (The default in Wheels is to get the second query from the request-level cache.)</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>parameterize</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `true` to use `cfqueryparam` on all columns, or pass in a list of property names to use `cfqueryparam` on those only.</td>
			</tr>
			<tr>
				<td valign="top"><code>returnAs</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>query</code></td>
				<td valign="top">Set this to `objects` to return an array of objects. Set this to `query` to return a query result set.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>returnIncluded</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">When `returnAs` is set to `objects`, you can set this argument to `false` to prevent returning objects fetched from associations specified in the `include` argument. This is useful when you only need to include associations for use in the `WHERE` clause only and want to avoid the performance hit that comes with object creation.</td>
			</tr>
			<tr>
				<td valign="top"><code>callbacks</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">You can set this argument to `false` to prevent running the execution of callbacks for a method call.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>includeSoftDeletes</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">You can set this argument to `true` to include soft-deleted records in the results.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/findall for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="findbykey" d:title="findByKey" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>findByKey()</code></h1>
		<h2>Description</h2>
		<p>Fetches the requested record by primary key and returns it as an object. Returns `false` if no record is found. You can override this behavior to return a `cfquery` result set instead, similar to what's described in the documentation for @findOne.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">findByKey(<em>key</em> [, <em>select</em>, <em>include</em>, <em>cache</em>, <em>reload</em>, <em>parameterize</em>, <em>returnAs</em>, <em>callbacks</em>, <em>includeSoftDeletes</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>key</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Primary key value(s) of the record to fetch. Separate with comma if passing in multiple primary key values. Accepts a string, list, or a numeric value.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>select</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Determines how the `SELECT` clause for the query used to return data will look.	You can pass in a list of the properties (which map to columns) that you want returned from your table(s). If you don't set this argument at all, Wheels will select all properties from your table(s). If you specify a table name (e.g. `users.email`) or alias a column (e.g. `fn AS firstName`) in the list, then the entire list will be passed through unchanged and used in the `SELECT` clause of the query. By default, all column names in tables `JOIN`ed via the `include` argument will be prepended with the singular version of the included table name.</td>
			</tr>
			<tr>
				<td valign="top"><code>include</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Associations that should be included in the query using `INNER` or `LEFT OUTER` joins (which join type that is used depends on how the association has been set up in your model). If all included associations are set on the current model, you can specify them in a list (e.g. `department,addresses,emails`). You can build more complex `include` strings by using parentheses when the association is set on an included model, like `album(artist(genre))`, for example. These complex `include` strings only work when `returnAs` is set to `query` though.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>cache</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">If you want to cache the query, you can do so by specifying the number of minutes you want to cache the query for here. If you set it to `true`, the default cache time will be used (60 minutes).</td>
			</tr>
			<tr>
				<td valign="top"><code>reload</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Set to `true` to force Wheels to query the database even though an identical query may have been run in the same request. (The default in Wheels is to get the second query from the request-level cache.)</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>parameterize</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `true` to use `cfqueryparam` on all columns, or pass in a list of property names to use `cfqueryparam` on those only.</td>
			</tr>
			<tr>
				<td valign="top"><code>returnAs</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>object</code></td>
				<td valign="top">Set this to `query` to return as a single-row query result set. Set this to `object` to return as an object.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>callbacks</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `false` to disable callbacks for this operation.</td>
			</tr>
			<tr>
				<td valign="top"><code>includeSoftDeletes</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">You can set this argument to `true` to include soft-deleted records in the results.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/findbykey for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="findone" d:title="findOne" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>findOne()</code></h1>
		<h2>Description</h2>
		<p>Fetches the first record found based on the `WHERE` and `ORDER BY` clauses. With the default settings (i.e. the `returnAs` argument set to `object`), a model object will be returned if the record is found and the boolean value `false` if not. Instead of using the `where` argument, you can create cleaner code by making use of a concept called dynamic finders.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">findOne([ <em>where</em>, <em>order</em>, <em>select</em>, <em>include</em>, <em>cache</em>, <em>reload</em>, <em>parameterize</em>, <em>returnAs</em>, <em>includeSoftDeletes</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>where</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">This argument maps to the `WHERE` clause of the query. The following operators are supported: `=`, `!=`, `<>`, `<`, `<=`, `>`, `>=`, `LIKE`, `NOT LIKE`, `IN`, `NOT IN`, `IS NULL`, `IS NOT NULL`, `AND`, and `OR`. (Note that the key words need to be written in upper case.) You can also use parentheses to group statements. You do not need to specify the table name(s); Wheels will do that for you.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>order</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Maps to the `ORDER BY` clause of the query. You do not need to specify the table name(s); Wheels will do that for you.</td>
			</tr>
			<tr>
				<td valign="top"><code>select</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Determines how the `SELECT` clause for the query used to return data will look.	You can pass in a list of the properties (which map to columns) that you want returned from your table(s). If you don't set this argument at all, Wheels will select all properties from your table(s). If you specify a table name (e.g. `users.email`) or alias a column (e.g. `fn AS firstName`) in the list, then the entire list will be passed through unchanged and used in the `SELECT` clause of the query. By default, all column names in tables `JOIN`ed via the `include` argument will be prepended with the singular version of the included table name.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>include</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Associations that should be included in the query using `INNER` or `LEFT OUTER` joins (which join type that is used depends on how the association has been set up in your model). If all included associations are set on the current model, you can specify them in a list (e.g. `department,addresses,emails`). You can build more complex `include` strings by using parentheses when the association is set on an included model, like `album(artist(genre))`, for example. These complex `include` strings only work when `returnAs` is set to `query` though.</td>
			</tr>
			<tr>
				<td valign="top"><code>cache</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">If you want to cache the query, you can do so by specifying the number of minutes you want to cache the query for here. If you set it to `true`, the default cache time will be used (60 minutes).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>reload</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Set to `true` to force Wheels to query the database even though an identical query may have been run in the same request. (The default in Wheels is to get the second query from the request-level cache.)</td>
			</tr>
			<tr>
				<td valign="top"><code>parameterize</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `true` to use `cfqueryparam` on all columns, or pass in a list of property names to use `cfqueryparam` on those only.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>returnAs</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>object</code></td>
				<td valign="top">Set this to `query` to return as a single-row query result set. Set this to `object` to return as an object.</td>
			</tr>
			<tr>
				<td valign="top"><code>includeSoftDeletes</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">You can set this argument to `true` to include soft-deleted records in the results.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/findone for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="flash" d:title="flash" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>flash()</code></h1>
		<h2>Description</h2>
		<p>Returns the value of a specific key in the Flash (or the entire Flash as a struct if no key is passed in).</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">flash([ <em>key</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>key</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The key to get the value for.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/flash for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="flashclear" d:title="flashClear" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>flashClear()</code></h1>
		<h2>Description</h2>
		<p>Deletes everything from the Flash.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">flashClear()</span></code></p>
		<h2>Parameters</h2>
		<p>None.</p>
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_88FD2E9038A0F6C7F5968AC0B97D06D0' style='color:#000'><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;flashClear()</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="flashcount" d:title="flashCount" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>flashCount()</code></h1>
		<h2>Description</h2>
		<p>Returns how many keys exist in the Flash.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">flashCount()</span></code></p>
		<h2>Parameters</h2>
		<p>None.</p>
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_F12A099C14250D7E516E8380200EDD9A' style='color:#000'><span style='color:#990033'>&lt;cfif&#32;flashCount()&#32;gt&#32;0&gt;</span><br />    do&#32;something...<br /><span style='color:#990033'>&lt;/cfif&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="flashdelete" d:title="flashDelete" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>flashDelete()</code></h1>
		<h2>Description</h2>
		<p>Deletes a specific key from the Flash.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">flashDelete(<em>key</em>)</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>key</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The key to delete.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_7603DF7E69BA8E6D7C16F282995715EE' style='color:#000'><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;flashDelete(key=<span style='color:#006600'>"errorMessage"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="flashinsert" d:title="flashInsert" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>flashInsert()</code></h1>
		<h2>Description</h2>
		<p>Inserts a new key/value into the Flash.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">flashInsert()</span></code></p>
		<h2>Parameters</h2>
		<p>None.</p>
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_8E3427F8E6F63A585EAA614FA7A00505' style='color:#000'><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;flashInsert(msg=<span style='color:#006600'>"It&#32;Worked!"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="flashisempty" d:title="flashIsEmpty" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>flashIsEmpty()</code></h1>
		<h2>Description</h2>
		<p>Returns whether or not the Flash is empty.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">flashIsEmpty()</span></code></p>
		<h2>Parameters</h2>
		<p>None.</p>
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/flashisempty for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="flashkeep" d:title="flashKeep" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>flashKeep()</code></h1>
		<h2>Description</h2>
		<p>Make the entire Flash or specific key in it stick around for one more request.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">flashKeep([ <em>key</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>key</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">A key or list of keys to flag for keeping. This argument is also aliased as `keys`.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_13ACF0CC99D4020778770751224FCD63' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Keep&#32;the&#32;entire&#32;Flash&#32;for&#32;the&#32;next&#32;request&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;flashKeep()</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Keep&#32;the&#32;"error"&#32;key&#32;in&#32;the&#32;Flash&#32;for&#32;the&#32;next&#32;request&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;flashKeep(<span style='color:#006600'>"error"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Keep&#32;both&#32;the&#32;"error"&#32;and&#32;"success"&#32;keys&#32;in&#32;the&#32;Flash&#32;for&#32;the&#32;next&#32;request&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;flashKeep(<span style='color:#006600'>"error,success"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="flashkeyexists" d:title="flashKeyExists" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>flashKeyExists()</code></h1>
		<h2>Description</h2>
		<p>Checks if a specific key exists in the Flash.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">flashKeyExists(<em>key</em>)</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>key</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The key to check if it exists.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/flashkeyexists for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="flashmessages" d:title="flashMessages" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>flashMessages()</code></h1>
		<h2>Description</h2>
		<p>Displays a marked-up listing of messages that exists in the Flash.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">flashMessages([ <em>keys</em>, <em>class</em>, <em>includeEmptyContainer</em>, <em>lowerCaseDynamicClassValues</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>keys</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The key (or list of keys) to show the value for. You can also use the `key` argument instead for better readability when accessing a single key.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>class</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>flashMessages</code></td>
				<td valign="top">HTML `class` to set on the `div` element that contains the messages.</td>
			</tr>
			<tr>
				<td valign="top"><code>includeEmptyContainer</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Includes the DIV container even if the flash is empty.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>lowerCaseDynamicClassValues</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Outputs all class attribute values in lower case (except the main one).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/flashmessages for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="get" d:title="get" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>get()</code></h1>
		<h2>Description</h2>
		<p>Returns the current setting for the supplied Wheels setting or the current default for the supplied Wheels function argument.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">get(<em>name</em> [, <em>functionName</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Variable name to get setting for.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>functionName</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Function name to get setting for.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_38CE1EB43D693FF7F39BAD237AA0AD56' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Get&#32;the&#32;current&#32;value&#32;for&#32;the&#32;`tableNamePrefix`&#32;Wheels&#32;setting&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;setting&#32;=&#32;get(<span style='color:#006600'>"tableNamePrefix"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Get&#32;the&#32;default&#32;for&#32;the&#32;`message`&#32;argument&#32;of&#32;the&#32;`validatesConfirmationOf`&#32;method&#32;&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;setting&#32;=&#32;get(functionName=<span style='color:#006600'>"validatesConfirmationOf"</span>,&#32;name=<span style='color:#006600'>"message"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="gettablenameprefix" d:title="getTableNamePrefix" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>getTableNamePrefix()</code></h1>
		<h2>Description</h2>
		<p>Returns the table name prefix set for the table.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">getTableNamePrefix()</span></code></p>
		<h2>Parameters</h2>
		<p>None.</p>
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/gettablenameprefix for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="haschanged" d:title="hasChanged" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>hasChanged()</code></h1>
		<h2>Description</h2>
		<p>Returns `true` if the specified property (or any if none was passed in) has been changed but not yet saved to the database. Will also return `true` if the object is new and no record for it exists in the database.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">hasChanged([ <em>property</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>property</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of property to check for change.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_A6D568983089A1E472FBEB3249A03542' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Get&#32;a&#32;member&#32;object&#32;and&#32;change&#32;the&#32;`email`&#32;property&#32;on&#32;it&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;member&#32;=&#32;model(<span style='color:#006600'>"member"</span>).findByKey(params.memberId)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;member.email&#32;=&#32;params.newEmail</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Check&#32;if&#32;the&#32;`email`&#32;property&#32;has&#32;changed&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfif&#32;member.hasChanged(<span style='color:#0000CC'>"email"</span>)&gt;</span><br />    <span style='color:Gray;'>&lt;!---&#32;Do&#32;something...&#32;---&gt;</span><br /><span style='color:#990033'>&lt;/cfif&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;The&#32;above&#32;can&#32;also&#32;be&#32;done&#32;using&#32;a&#32;dynamic&#32;function&#32;like&#32;this&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfif&#32;member.emailHasChanged()&gt;</span><br />    <span style='color:Gray;'>&lt;!---&#32;Do&#32;something...&#32;---&gt;</span><br /><span style='color:#990033'>&lt;/cfif&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="haserrors" d:title="hasErrors" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>hasErrors()</code></h1>
		<h2>Description</h2>
		<p>Returns `true` if the object has any errors. You can also limit to only check a specific property or name for errors.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">hasErrors([ <em>property</em>, <em>name</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>property</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of the property to check if there are any errors set on.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Error name to check if there are any errors set with.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_8F50F8BA392684EC1AAB958C543566C7' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Check&#32;if&#32;the&#32;post&#32;object&#32;has&#32;any&#32;errors&#32;set&#32;on&#32;it&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfif&#32;post.hasErrors()&gt;</span><br />    <span style='color:Gray;'>&lt;!---&#32;Send&#32;user&#32;to&#32;a&#32;form&#32;to&#32;correct&#32;the&#32;errors...&#32;---&gt;</span><br /><span style='color:#990033'>&lt;/cfif&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="hasmany" d:title="hasMany" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>hasMany()</code></h1>
		<h2>Description</h2>
		<p>Sets up a `hasMany` association between this model and the specified one.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">hasMany(<em>name</em> [, <em>modelName</em>, <em>foreignKey</em>, <em>joinType</em>, <em>dependent</em>, <em>shortcut</em>, <em>through</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Gives the association a name that you refer to when working with the association (in the `include` argument to @findAll, to name one example).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>modelName</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of associated model (usually not needed if you follow Wheels conventions because the model name will be deduced from the `name` argument).</td>
			</tr>
			<tr>
				<td valign="top"><code>foreignKey</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Foreign key property name (usually not needed if you follow Wheels conventions since the foreign key name will be deduced from the `name` argument).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>joinType</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>outer</code></td>
				<td valign="top">Use to set the join type when joining associated tables. Possible values are `inner` (for `INNER JOIN`) and `outer` (for `LEFT OUTER JOIN`).</td>
			</tr>
			<tr>
				<td valign="top"><code>dependent</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Defines how to handle dependent models when you delete a record from this model. Set to `delete` to instantiate associated models and call their @delete method, `deleteAll` to delete without instantiating, `nullify` to remove the foreign key, or `false` to do nothing.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>shortcut</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Set this argument to create an additional dynamic method that gets the object(s) from the other side of a many-to-many association.</td>
			</tr>
			<tr>
				<td valign="top"><code>through</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[runtime expression]</code></td>
				<td valign="top">Set this argument if you need to override Wheels conventions when using the `shortcut` argument. Accepts a list of two association names representing the chain from the opposite side of the many-to-many relationship to this model.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_E70CCDD8BE7DA71DB76B8AD562E7CF08' style='color:#000'><span style='color:Gray;'>&lt;!---<br />    Example1:&#32;Specify&#32;that&#32;instances&#32;of&#32;this&#32;model&#32;has&#32;many&#32;comments.<br />    (The&#32;table&#32;for&#32;the&#32;associated&#32;model,&#32;not&#32;the&#32;current,&#32;should&#32;have&#32;the&#32;foreign&#32;key&#32;set&#32;on&#32;it.)<br />---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;hasMany(<span style='color:#006600'>"comments"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---<br />    Example&#32;2:&#32;Specify&#32;that&#32;this&#32;model&#32;(let's&#32;call&#32;it&#32;`reader`&#32;in&#32;this&#32;case)&#32;has&#32;many&#32;subscriptions&#32;and&#32;setup&#32;a&#32;shortcut&#32;to&#32;the&#32;`publication`&#32;model.<br />    (Useful&#32;when&#32;dealing&#32;with&#32;many-to-many&#32;relationships.)<br />---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;hasMany(name=<span style='color:#006600'>"subscriptions"</span>,&#32;shortcut=<span style='color:#006600'>"publications"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Example&#32;3:&#32;Automatically&#32;delete&#32;all&#32;associated&#32;`comments`&#32;whenever&#32;this&#32;object&#32;is&#32;deleted&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;hasMany(name=<span style='color:#006600'>"comments"</span>,&#32;dependent=<span style='color:#006600'>"deleteAll"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---<br />    Example&#32;4:&#32;When&#32;not&#32;following&#32;Wheels&#32;naming&#32;conventions&#32;for&#32;associations,&#32;it&#32;can&#32;get&#32;complex&#32;to&#32;define&#32;how&#32;a&#32;`shortcut`&#32;works.<br />    In&#32;this&#32;example,&#32;we&#32;are&#32;naming&#32;our&#32;`shortcut`&#32;differently&#32;than&#32;the&#32;actual&#32;model's&#32;name.<br />---&gt;</span><br /><span style='color:Gray;'>&lt;!---&#32;In&#32;the&#32;models/Customer.cfc&#32;`init()`&#32;method&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;hasMany(name=<span style='color:#006600'>"subscriptions"</span>,&#32;shortcut=<span style='color:#006600'>"magazines"</span>,&#32;through=<span style='color:#006600'>"publication,subscriptions"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;In&#32;the&#32;models/Subscriptions.cfc&#32;`init()`&#32;method&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;belongsTo(<span style='color:#006600'>"customer"</span>)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;belongsTo(<span style='color:#006600'>"publication"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;In&#32;the&#32;models/Publication&#32;`init()`&#32;method&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;hasMany(<span style='color:#006600'>"subscriptions"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="hasmanycheckbox" d:title="hasManyCheckBox" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>hasManyCheckBox()</code></h1>
		<h2>Description</h2>
		<p>Used as a shortcut to output the proper form elements for an association. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">hasManyCheckBox(<em>objectName</em>, <em>association</em>, <em>keys</em> [, <em>label</em>, <em>labelPlacement</em>, <em>prepend</em>, <em>append</em>, <em>prependToLabel</em>, <em>appendToLabel</em>, <em>errorElement</em>, <em>errorClass</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>objectName</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of the variable containing the parent object to represent with this form field.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>association</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of the association set in the parent object to represent with this form field.</td>
			</tr>
			<tr>
				<td valign="top"><code>keys</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Primary keys associated with this form field.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>label</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The label text to use in the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>labelPlacement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Whether to place the label `before`, `after`, or wrapped `around` the form control.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>prepend</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>append</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>prependToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>appendToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>errorElement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">HTML tag to wrap the form control with when the object contains errors.</td>
			</tr>
			<tr>
				<td valign="top"><code>errorClass</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The class name of the HTML tag that wraps the form control when there are errors.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/hasmanycheckbox for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="hasmanyradiobutton" d:title="hasManyRadioButton" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>hasManyRadioButton()</code></h1>
		<h2>Description</h2>
		<p>Used as a shortcut to output the proper form elements for an association. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">hasManyRadioButton(<em>objectName</em>, <em>association</em>, <em>property</em>, <em>keys</em>, <em>tagValue</em> [, <em>checkIfBlank</em>, <em>label</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>objectName</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of the variable containing the parent object to represent with this form field.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>association</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of the association set in the parent object to represent with this form field.</td>
			</tr>
			<tr>
				<td valign="top"><code>property</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of the property in the child object to represent with this form field.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>keys</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Primary keys associated with this form field.</td>
			</tr>
			<tr>
				<td valign="top"><code>tagValue</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The value of the radio button when `selected`.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>checkIfBlank</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Whether or not to check this form field as a default if there is a blank value set for the property.</td>
			</tr>
			<tr>
				<td valign="top"><code>label</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The label text to use in the form control.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/hasmanyradiobutton for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="hasone" d:title="hasOne" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>hasOne()</code></h1>
		<h2>Description</h2>
		<p>Sets up a `hasOne` association between this model and the specified one.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">hasOne(<em>name</em> [, <em>modelName</em>, <em>foreignKey</em>, <em>joinType</em>, <em>dependent</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Gives the association a name that you refer to when working with the association (in the `include` argument to @findAll, to name one example).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>modelName</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of associated model (usually not needed if you follow Wheels conventions because the model name will be deduced from the `name` argument).</td>
			</tr>
			<tr>
				<td valign="top"><code>foreignKey</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Foreign key property name (usually not needed if you follow Wheels conventions since the foreign key name will be deduced from the `name` argument).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>joinType</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>outer</code></td>
				<td valign="top">Use to set the join type when joining associated tables. Possible values are `inner` (for `INNER JOIN`) and `outer` (for `LEFT OUTER JOIN`).</td>
			</tr>
			<tr>
				<td valign="top"><code>dependent</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Defines how to handle dependent models when you delete a record from this model. Set to `delete` to instantiate associated models and call their @delete method, `deleteAll` to delete without instantiating, `nullify` to remove the foreign key, or `false` to do nothing.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_0DCD901C434924DCD0FEA2397E140F7A' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Specify&#32;that&#32;instances&#32;of&#32;this&#32;model&#32;has&#32;one&#32;profile.&#32;(The&#32;table&#32;for&#32;the&#32;associated&#32;model,&#32;not&#32;the&#32;current,&#32;should&#32;have&#32;the&#32;foreign&#32;key&#32;set&#32;on&#32;it.)&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;hasOne(<span style='color:#006600'>"profile"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Same&#32;as&#32;above&#32;but&#32;setting&#32;the&#32;`joinType`&#32;to&#32;`inner`,&#32;which&#32;basically&#32;means&#32;this&#32;model&#32;should&#32;always&#32;have&#32;a&#32;record&#32;in&#32;the&#32;`profiles`&#32;table&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;hasOne(name=<span style='color:#006600'>"profile"</span>,&#32;joinType=<span style='color:#006600'>"inner"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Automatically&#32;delete&#32;the&#32;associated&#32;`profile`&#32;whenever&#32;this&#32;object&#32;is&#32;deleted&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;hasMany(name=<span style='color:#006600'>"comments"</span>,&#32;dependent=<span style='color:#006600'>"delete"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="hasproperty" d:title="hasProperty" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>hasProperty()</code></h1>
		<h2>Description</h2>
		<p>Returns `true` if the specified property name exists on the model.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">hasProperty(<em>property</em>)</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>property</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of property to inspect.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_8E30F29D223F23973D41B7485D00E679' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Get&#32;an&#32;object,&#32;set&#32;a&#32;value&#32;and&#32;then&#32;see&#32;if&#32;the&#32;property&#32;exists&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;employee&#32;=&#32;model(<span style='color:#006600'>"employee"</span>).new()</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;employee.firstName&#32;=&#32;<span style='color:#006600'>"dude"</span></span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;employee.hasProperty(<span style='color:#006600'>"firstName"</span>)</span>&gt;</span><span style='color:Gray;'>&lt;!---&#32;returns&#32;true&#32;---&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;This&#32;is&#32;also&#32;a&#32;dynamic&#32;method&#32;that&#32;you&#32;could&#32;do&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;employee.hasFirstName()</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="hiddenfield" d:title="hiddenField" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>hiddenField()</code></h1>
		<h2>Description</h2>
		<p>Builds and returns a string containing a hidden field form control based on the supplied `objectName` and `property`. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">hiddenField(<em>objectName</em>, <em>property</em> [, <em>association</em>, <em>position</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>objectName</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The variable name of the object to build the form control for.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>property</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The name of the property to use in the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>association</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The name of the association that the property is located on. Used for building nested forms that work with nested properties. If you are building a form with deep nesting, simply pass in a list to the nested object, and Wheels will figure it out.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>position</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The position used when referencing a `hasMany` relationship in the `association` argument. Used for building nested forms that work with nested properties. If you are building a form with deep nestings, simply pass in a list of positions, and Wheels will figure it out.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/hiddenfield for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="hiddenfieldtag" d:title="hiddenFieldTag" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>hiddenFieldTag()</code></h1>
		<h2>Description</h2>
		<p>Builds and returns a string containing a hidden field form control based on the supplied `name`. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">hiddenFieldTag(<em>name</em> [, <em>value</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name to populate in tag's `name` attribute.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>value</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Value to populate in tag's `value` attribute.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/hiddenfieldtag for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="highlight" d:title="highlight" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>highlight()</code></h1>
		<h2>Description</h2>
		<p>Highlights the phrase(s) everywhere in the text if found by wrapping it in a `span` tag.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">highlight(<em>text</em>, <em>phrases</em> [, <em>class</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>text</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Text to search.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>phrases</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">List of phrases to highlight.</td>
			</tr>
			<tr>
				<td valign="top"><code>class</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>highlight</code></td>
				<td valign="top">Class to use in `span` tags surrounding highlighted phrase(s).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/highlight for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="hourselecttag" d:title="hourSelectTag" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>hourSelectTag()</code></h1>
		<h2>Description</h2>
		<p>Builds and returns a string containing one select form control for the hours of the day based on the supplied `name`.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">hourSelectTag(<em>name</em> [, <em>selected</em>, <em>includeBlank</em>, <em>label</em>, <em>labelPlacement</em>, <em>prepend</em>, <em>append</em>, <em>prependToLabel</em>, <em>appendToLabel</em>, <em>twelveHour</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name to populate in tag's `name` attribute.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>selected</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The hour that should be selected initially.</td>
			</tr>
			<tr>
				<td valign="top"><code>includeBlank</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>label</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The label text to use in the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>labelPlacement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>around</code></td>
				<td valign="top">Whether to place the label `before`, `after`, or wrapped `around` the form control.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>prepend</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>append</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>prependToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>appendToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>twelveHour</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">whether to display the hours in 24 or 12 hour format. 12 hour format has AM/PM drop downs</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/hourselecttag for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="humanize" d:title="humanize" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>humanize()</code></h1>
		<h2>Description</h2>
		<p>Returns readable text by capitalizing and converting camel casing to multiple words.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">humanize(<em>text</em> [, <em>except</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>text</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Text to humanize.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>except</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">a list of strings (space separated) to replace within the output.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/humanize for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="hyphenize" d:title="hyphenize" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>hyphenize()</code></h1>
		<h2>Description</h2>
		<p>Converts camelCase strings to lowercase strings with hyphens as word delimiters instead. Example: `myVariable` becomes `my-variable`.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">hyphenize(<em>string</em>)</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>string</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The string to hyphenize.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/hyphenize for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="imagetag" d:title="imageTag" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>imageTag()</code></h1>
		<h2>Description</h2>
		<p>Returns an `img` tag. If the image is stored in the local `images` folder, the tag will also set the `width`, `height`, and `alt` attributes for you. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">imageTag(<em>source</em>)</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>source</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The file name of the image if it's availabe in the local file system (i.e. ColdFusion will be able to access it). Provide the full URL if the image is on a remote server.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/imagetag for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="includecontent" d:title="includeContent" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>includeContent()</code></h1>
		<h2>Description</h2>
		<p>Used to output the content for a particular section in a layout.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">includeContent([ <em>name</em>, <em>default</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>body</code></td>
				<td valign="top">Name of layout section to return content for.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>default</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">What to display as a default if the section is not defined.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/includecontent for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="includedinobject" d:title="includedInObject" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>includedInObject()</code></h1>
		<h2>Description</h2>
		<p>Used as a shortcut to check if the specified IDs are a part of the main form object. This method should only be used for `hasMany` associations.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">includedInObject(<em>objectName</em>, <em>association</em>, <em>keys</em>)</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>objectName</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of the variable containing the parent object to represent with this form field.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>association</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of the association set in the parent object to represent with this form field.</td>
			</tr>
			<tr>
				<td valign="top"><code>keys</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Primary keys associated with this form field.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/includedinobject for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="includelayout" d:title="includeLayout" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>includeLayout()</code></h1>
		<h2>Description</h2>
		<p>Includes the contents of another layout file. This is usually used to include a parent layout from within a child layout.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">includeLayout([ <em>name</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>layout</code></td>
				<td valign="top">Name of the layout file to include.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/includelayout for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="includepartial" d:title="includePartial" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>includePartial()</code></h1>
		<h2>Description</h2>
		<p>Includes the specified partial file in the view. Similar to using `cfinclude` but with the ability to cache the result and use Wheels-specific file look-up. By default, Wheels will look for the file in the current controller's view folder. To include a file relative from the base `views` folder, you can start the path supplied to `name` with a forward slash.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">includePartial(<em>partial</em> [, <em>group</em>, <em>cache</em>, <em>layout</em>, <em>spacer</em>, <em>dataFunction</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>partial</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The name of the partial file to be used. Prefix with a leading slash `/` if you need to build a path from the root `views` folder. Do not include the partial filename's underscore and file extension.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>group</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">If passing a query result set for the `partial` argument, use this to specify the field to group the query by. A new query will be passed into the partial template for you to iterate over.</td>
			</tr>
			<tr>
				<td valign="top"><code>cache</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Number of minutes to cache the content for.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>layout</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The layout to wrap the content in. Prefix with a leading slash `/` if you need to build a path from the root `views` folder. Pass `false` to not load a layout at all.</td>
			</tr>
			<tr>
				<td valign="top"><code>spacer</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">HTML or string to place between partials when called using a query.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>dataFunction</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Name of controller function to load data from.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/includepartial for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="invokewithtransaction" d:title="invokeWithTransaction" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>invokeWithTransaction()</code></h1>
		<h2>Description</h2>
		<p>Runs the specified method within a single database transaction.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">invokeWithTransaction(<em>method</em> [, <em>transaction</em>, <em>isolation</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>method</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Model method to run.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>transaction</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>commit</code></td>
				<td valign="top">Set this to `commit` to update the database when the save has completed, `rollback` to run all the database queries but not commit them, or `none` to skip transaction handling altogether.</td>
			</tr>
			<tr>
				<td valign="top"><code>isolation</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>read_committed</code></td>
				<td valign="top">Isolation level to be passed through to the `cftransaction` tag. See your CFML engine's documentation for more details about `cftransaction`'s `isolation` attribute.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_B87ACF0E19DC8007FA12AD66234B8D32' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;This&#32;is&#32;the&#32;method&#32;to&#32;be&#32;run&#32;inside&#32;a&#32;transaction&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"tranferFunds"</span>&#32;returntype=<span style='color:#0000CC'>"boolean"</span>&#32;output=<span style='color:#0000CC'>"false"</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfargument&#32;name=<span style='color:#0000CC'>"personFrom"</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfargument&#32;name=<span style='color:#0000CC'>"personTo"</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfargument&#32;name=<span style='color:#0000CC'>"amount"</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfif&#32;arguments.personFrom.withdraw(arguments.amount)&#32;and&#32;arguments.personTo.deposit(arguments.amount)&gt;</span><br />        <span style='color:#990033'>&lt;cfreturn&#32;true&gt;</span><br />    <span style='color:#990033'>&lt;cfelse&gt;</span><br />        <span style='color:#990033'>&lt;cfreturn&#32;false&gt;</span><br />    <span style='color:#990033'>&lt;/cfif&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;david&#32;=&#32;model(<span style='color:#006600'>"Person"</span>).findOneByName(<span style='color:#006600'>"David"</span>)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;mary&#32;=&#32;model(<span style='color:#006600'>"Person"</span>).findOneByName(<span style='color:#006600'>"Mary"</span>)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;invokeWithTransaction(method=<span style='color:#006600'>"transferFunds"</span>,&#32;personFrom=david,&#32;personTo=mary,&#32;amount=100)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="isajax" d:title="isAjax" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>isAjax()</code></h1>
		<h2>Description</h2>
		<p>Returns whether the page was called from JavaScript or not.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">isAjax()</span></code></p>
		<h2>Parameters</h2>
		<p>None.</p>
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_02FD605A6CEFEE0EDB1BB8A128661CA2' style='color:#000'><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;requestIsAjax&#32;=&#32;isAjax()</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="isclass" d:title="isClass" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>isClass()</code></h1>
		<h2>Description</h2>
		<p>Use this method within a model's method to check whether you are currently in a class-level object.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">isClass()</span></code></p>
		<h2>Parameters</h2>
		<p>None.</p>
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_7AED29B55703AE96D463B3AB9941A500' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Use&#32;the&#32;passed&#32;in&#32;`id`&#32;when&#32;we're&#32;already&#32;in&#32;an&#32;instance&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"memberIsAdmin"</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfif&#32;isClass()&gt;</span><br />        <span style='color:#990033'>&lt;cfreturn&#32;this.findByKey(arguments.id).admin&gt;</span><br />    <span style='color:#990033'>&lt;cfelse&gt;</span><br />        <span style='color:#990033'>&lt;cfreturn&#32;this.admin&gt;</span><br />    <span style='color:#990033'>&lt;/cfif&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="isget" d:title="isGet" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>isGet()</code></h1>
		<h2>Description</h2>
		<p>Returns whether the request was a normal `GET` request or not.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">isGet()</span></code></p>
		<h2>Parameters</h2>
		<p>None.</p>
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_D75EBEFF5162C41AD7E2CC132A24197C' style='color:#000'><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;requestIsGet&#32;=&#32;isGet()</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="isinstance" d:title="isInstance" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>isInstance()</code></h1>
		<h2>Description</h2>
		<p>Use this method to check whether you are currently in an instance object.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">isInstance()</span></code></p>
		<h2>Parameters</h2>
		<p>None.</p>
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_DEB005DD3D806566326E4B208E60C913' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Use&#32;the&#32;passed&#32;in&#32;`id`&#32;when&#32;we're&#32;not&#32;already&#32;in&#32;an&#32;instance&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"memberIsAdmin"</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfif&#32;isInstance()&gt;</span><br />        <span style='color:#990033'>&lt;cfreturn&#32;this.admin&gt;</span><br />    <span style='color:#990033'>&lt;cfelse&gt;</span><br />        <span style='color:#990033'>&lt;cfreturn&#32;this.findByKey(arguments.id).admin&gt;</span><br />    <span style='color:#990033'>&lt;/cfif&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="isnew" d:title="isNew" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>isNew()</code></h1>
		<h2>Description</h2>
		<p>Returns `true` if this object hasn't been saved yet. (In other words, no matching record exists in the database yet.) Returns `false` if a record exists.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">isNew()</span></code></p>
		<h2>Parameters</h2>
		<p>None.</p>
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_682948CD682C9F472A64F70D0D2E68D2' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Create&#32;a&#32;new&#32;object&#32;and&#32;then&#32;check&#32;if&#32;it&#32;is&#32;new&#32;(yes,&#32;this&#32;example&#32;is&#32;ridiculous.&#32;It&#32;makes&#32;more&#32;sense&#32;in&#32;the&#32;context&#32;of&#32;callbacks&#32;for&#32;example)&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;employee&#32;=&#32;model(<span style='color:#006600'>"employee"</span>).new()</span>&gt;</span><br /><span style='color:#990033'>&lt;cfif&#32;employee.isNew()&gt;</span><br />    <span style='color:Gray;'>&lt;!---&#32;Do&#32;something...&#32;---&gt;</span><br /><span style='color:#990033'>&lt;/cfif&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="ispost" d:title="isPost" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>isPost()</code></h1>
		<h2>Description</h2>
		<p>Returns whether the request came from a form `POST` submission or not.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">isPost()</span></code></p>
		<h2>Parameters</h2>
		<p>None.</p>
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_6827959EC7E9E905E9ED0E69062DDEB2' style='color:#000'><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;requestIsPost&#32;=&#32;isPost()</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="issecure" d:title="isSecure" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>isSecure()</code></h1>
		<h2>Description</h2>
		<p>Returns whether Wheels is communicating over a secure port.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">isSecure()</span></code></p>
		<h2>Parameters</h2>
		<p>None.</p>
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_911A9B013105C248676757F82E38F00E' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Redirect&#32;non-secure&#32;connections&#32;to&#32;the&#32;secure&#32;version&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfif&#32;not&#32;isSecure()&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;redirectTo(protocol=<span style='color:#006600'>"https"</span>)</span>&gt;</span><br /><span style='color:#990033'>&lt;/cfif&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="javascriptincludetag" d:title="javaScriptIncludeTag" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>javaScriptIncludeTag()</code></h1>
		<h2>Description</h2>
		<p>Returns a `script` tag for a JavaScript file (or several) based on the supplied arguments.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">javaScriptIncludeTag([ <em>sources</em>, <em>type</em>, <em>head</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>sources</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The name of one or many JavaScript files in the `javascripts` folder, minus the `.js` extension. (Can also be called with the `source` argument.)</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>type</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>text/javascript</code></td>
				<td valign="top">The `type` attribute for the `script` tag.</td>
			</tr>
			<tr>
				<td valign="top"><code>head</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Set to `true` to place the output in the `head` area of the HTML page instead of the default behavior, which is to place the output where the function is called from.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/javascriptincludetag for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="key" d:title="key" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>key()</code></h1>
		<h2>Description</h2>
		<p>Returns the value of the primary key for the object. If you have a single primary key named `id`, then `someObject.key()` is functionally equivalent to `someObject.id`. This method is more useful when you do dynamic programming and don't know the name of the primary key or when you use composite keys (in which case it's convenient to use this method to get a list of both key values returned).</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">key()</span></code></p>
		<h2>Parameters</h2>
		<p>None.</p>
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_AF1974F56CF1D27DCE6EF618D54DB437' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Get&#32;an&#32;object&#32;and&#32;then&#32;get&#32;the&#32;primary&#32;key&#32;value(s)&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;employee&#32;=&#32;model(<span style='color:#006600'>"employee"</span>).findByKey(params.key)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;<span style='color:blue'>val</span>&#32;=&#32;employee.key()</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="linkto" d:title="linkTo" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>linkTo()</code></h1>
		<h2>Description</h2>
		<p>Creates a link to another page in your application. Pass in the name of a `route` to use your configured routes or a `controller`/`action`/`key` combination. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">linkTo([ <em>text</em>, <em>confirm</em>, <em>route</em>, <em>controller</em>, <em>action</em>, <em>key</em>, <em>params</em>, <em>anchor</em>, <em>onlyPath</em>, <em>host</em>, <em>protocol</em>, <em>port</em>, <em>href</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>text</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The text content of the link.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>confirm</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Pass a message here to cause a JavaScript confirmation dialog box to pop up containing the message.</td>
			</tr>
			<tr>
				<td valign="top"><code>route</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of a route that you have configured in `config/routes.cfm`.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>controller</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of the controller to include in the URL.</td>
			</tr>
			<tr>
				<td valign="top"><code>action</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of the action to include in the URL.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>key</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Key(s) to include in the URL.</td>
			</tr>
			<tr>
				<td valign="top"><code>params</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Any additional params to be set in the query string.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>anchor</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Sets an anchor name to be appended to the path.</td>
			</tr>
			<tr>
				<td valign="top"><code>onlyPath</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">If `true`, returns only the relative URL (no protocol, host name or port).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>host</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Set this to override the current host.</td>
			</tr>
			<tr>
				<td valign="top"><code>protocol</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Set this to override the current protocol.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>port</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>0</code></td>
				<td valign="top">Set this to override the current port number.</td>
			</tr>
			<tr>
				<td valign="top"><code>href</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Pass a link to an external site here if you want to bypass the Wheels routing system altogether and link to an external URL.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/linkto for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="mailto" d:title="mailTo" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>mailTo()</code></h1>
		<h2>Description</h2>
		<p>Creates a `mailto` link tag to the specified email address, which is also used as the name of the link unless name is specified.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">mailTo(<em>emailAddress</em> [, <em>name</em>, <em>encode</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>emailAddress</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The email address to link to.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">A string to use as the link text ("Joe" or "Support Department", for example).</td>
			</tr>
			<tr>
				<td valign="top"><code>encode</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Pass `true` here to encode the email address, making it harder for bots to harvest it for example.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/mailto for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="maximum" d:title="maximum" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>maximum()</code></h1>
		<h2>Description</h2>
		<p>Calculates the maximum value for a given property. Uses the SQL function `MAX`. If no records can be found to perform the calculation on you can use the `ifNull` argument to decide what should be returned.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">maximum(<em>property</em> [, <em>where</em>, <em>include</em>, <em>parameterize</em>, <em>ifNull</em>, <em>includeSoftDeletes</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>property</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of the property to get the highest value for (must be a property of a numeric data type).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>where</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">This argument maps to the `WHERE` clause of the query. The following operators are supported: `=`, `!=`, `<>`, `<`, `<=`, `>`, `>=`, `LIKE`, `NOT LIKE`, `IN`, `NOT IN`, `IS NULL`, `IS NOT NULL`, `AND`, and `OR`. (Note that the key words need to be written in upper case.) You can also use parentheses to group statements. You do not need to specify the table name(s); Wheels will do that for you.</td>
			</tr>
			<tr>
				<td valign="top"><code>include</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Associations that should be included in the query using `INNER` or `LEFT OUTER` joins (which join type that is used depends on how the association has been set up in your model). If all included associations are set on the current model, you can specify them in a list (e.g. `department,addresses,emails`). You can build more complex `include` strings by using parentheses when the association is set on an included model, like `album(artist(genre))`, for example. These complex `include` strings only work when `returnAs` is set to `query` though.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>parameterize</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `true` to use `cfqueryparam` on all columns, or pass in a list of property names to use `cfqueryparam` on those only.</td>
			</tr>
			<tr>
				<td valign="top"><code>ifNull</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The value returned if no records are found. Common usage is to set this to `0` to make sure a numeric value is always returned instead of a blank string.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>includeSoftDeletes</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">You can set this argument to `true` to include soft-deleted records in the results.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/maximum for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="mimetypes" d:title="mimeTypes" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>mimeTypes()</code></h1>
		<h2>Description</h2>
		<p>Returns an associated MIME type based on a file extension.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">mimeTypes(<em>extension</em> [, <em>fallback</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>extension</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The extension to get the MIME type for.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>fallback</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>application/octet-stream</code></td>
				<td valign="top">the fallback MIME type to return.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_00DBFD8BC23484CCEDE54A1B823D7170' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Get&#32;the&#32;internally-stored&#32;MIME&#32;type&#32;for&#32;`xls`&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;mimeType&#32;=&#32;mimeTypes(<span style='color:#006600'>"xls"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Get&#32;the&#32;internally-stored&#32;MIME&#32;type&#32;for&#32;a&#32;dynamic&#32;value.&#32;Fall&#32;back&#32;to&#32;a&#32;MIME&#32;type&#32;of&#32;`text/plain`&#32;if&#32;it's&#32;not&#32;found&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;mimeType&#32;=&#32;mimeTypes(extension=params.type,&#32;fallback=<span style='color:#006600'>"text/plain"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="minimum" d:title="minimum" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>minimum()</code></h1>
		<h2>Description</h2>
		<p>Calculates the minimum value for a given property. Uses the SQL function `MIN`. If no records can be found to perform the calculation on you can use the `ifNull` argument to decide what should be returned.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">minimum(<em>property</em> [, <em>where</em>, <em>include</em>, <em>parameterize</em>, <em>ifNull</em>, <em>includeSoftDeletes</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>property</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of the property to get the lowest value for (must be a property of a numeric data type).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>where</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">This argument maps to the `WHERE` clause of the query. The following operators are supported: `=`, `!=`, `<>`, `<`, `<=`, `>`, `>=`, `LIKE`, `NOT LIKE`, `IN`, `NOT IN`, `IS NULL`, `IS NOT NULL`, `AND`, and `OR`. (Note that the key words need to be written in upper case.) You can also use parentheses to group statements. You do not need to specify the table name(s); Wheels will do that for you.</td>
			</tr>
			<tr>
				<td valign="top"><code>include</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Associations that should be included in the query using `INNER` or `LEFT OUTER` joins (which join type that is used depends on how the association has been set up in your model). If all included associations are set on the current model, you can specify them in a list (e.g. `department,addresses,emails`). You can build more complex `include` strings by using parentheses when the association is set on an included model, like `album(artist(genre))`, for example. These complex `include` strings only work when `returnAs` is set to `query` though.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>parameterize</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `true` to use `cfqueryparam` on all columns, or pass in a list of property names to use `cfqueryparam` on those only.</td>
			</tr>
			<tr>
				<td valign="top"><code>ifNull</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The value returned if no records are found. Common usage is to set this to `0` to make sure a numeric value is always returned instead of a blank string.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>includeSoftDeletes</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">You can set this argument to `true` to include soft-deleted records in the results.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/minimum for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="minuteselecttag" d:title="minuteSelectTag" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>minuteSelectTag()</code></h1>
		<h2>Description</h2>
		<p>Builds and returns a string containing one select form control for the minutes of an hour based on the supplied `name`.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">minuteSelectTag(<em>name</em> [, <em>selected</em>, <em>minuteStep</em>, <em>includeBlank</em>, <em>label</em>, <em>labelPlacement</em>, <em>prepend</em>, <em>append</em>, <em>prependToLabel</em>, <em>appendToLabel</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name to populate in tag's `name` attribute.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>selected</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The minute that should be selected initially.</td>
			</tr>
			<tr>
				<td valign="top"><code>minuteStep</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>1</code></td>
				<td valign="top">Pass in `10` to only show minute 10, 20, 30, etc.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>includeBlank</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").</td>
			</tr>
			<tr>
				<td valign="top"><code>label</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The label text to use in the form control.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>labelPlacement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>around</code></td>
				<td valign="top">Whether to place the label `before`, `after`, or wrapped `around` the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>prepend</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>append</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>prependToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>appendToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/minuteselecttag for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="model" d:title="model" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>model()</code></h1>
		<h2>Description</h2>
		<p>Returns a reference to the requested model so that class level methods can be called on it.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">model(<em>name</em>)</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of the model to get a reference to.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_2243C50A23A312CBA2A360C091A057C4' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;The&#32;`model("author")`&#32;part&#32;of&#32;the&#32;code&#32;below&#32;gets&#32;a&#32;reference&#32;to&#32;the&#32;model&#32;from&#32;the&#32;application&#32;scope,&#32;and&#32;then&#32;the&#32;`findByKey`&#32;class&#32;level&#32;method&#32;is&#32;called&#32;on&#32;it&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;authorObject&#32;=&#32;model(<span style='color:#006600'>"author"</span>).findByKey(1)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="monthselecttag" d:title="monthSelectTag" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>monthSelectTag()</code></h1>
		<h2>Description</h2>
		<p>Builds and returns a string containing a select form control for the months of the year based on the supplied `name`.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">monthSelectTag(<em>name</em> [, <em>selected</em>, <em>monthDisplay</em>, <em>includeBlank</em>, <em>label</em>, <em>labelPlacement</em>, <em>prepend</em>, <em>append</em>, <em>prependToLabel</em>, <em>appendToLabel</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name to populate in tag's `name` attribute.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>selected</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The month that should be selected initially.</td>
			</tr>
			<tr>
				<td valign="top"><code>monthDisplay</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>names</code></td>
				<td valign="top">Pass in `names`, `numbers`, or `abbreviations` to control display.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>includeBlank</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").</td>
			</tr>
			<tr>
				<td valign="top"><code>label</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The label text to use in the form control.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>labelPlacement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>around</code></td>
				<td valign="top">Whether to place the label `before`, `after`, or wrapped `around` the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>prepend</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>append</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>prependToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>appendToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/monthselecttag for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="nestedproperties" d:title="nestedProperties" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>nestedProperties()</code></h1>
		<h2>Description</h2>
		<p>Allows for nested objects, structs, and arrays to be set from params and other generated data.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">nestedProperties([ <em>association</em>, <em>autoSave</em>, <em>allowDelete</em>, <em>sortProperty</em>, <em>rejectIfBlank</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>association</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The association (or list of associations) you want to allow to be set through the params. This argument is also aliased as `associations`.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>autoSave</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Whether to save the association(s) when the parent object is saved.</td>
			</tr>
			<tr>
				<td valign="top"><code>allowDelete</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Set `allowDelete` to `true` to tell Wheels to look for the property `_delete` in your model. If present and set to a value that evaluates to `true`, the model will be deleted when saving the parent.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>sortProperty</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Set `sortProperty` to a property on the object that you would like to sort by. The property should be numeric, should start with 1, and should be consecutive. Only valid with `hasMany` associations.</td>
			</tr>
			<tr>
				<td valign="top"><code>rejectIfBlank</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">A list of properties that should not be blank. If any of the properties are blank, any CRUD operations will be rejected.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_2BC97F00C068C57B88BC6A08BEAC6630' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;In&#32;`models/User.cfc`,&#32;allow&#32;for&#32;`groupEntitlements`&#32;to&#32;be&#32;saved&#32;and&#32;deleted&#32;through&#32;the&#32;`user`&#32;object&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"init"</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;hasMany(<span style='color:#006600'>"groupEntitlements"</span>)</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;nestedProperties(association=<span style='color:#006600'>"groupEntitlements"</span>,&#32;allowDelete=true)</span>&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="new" d:title="new" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>new()</code></h1>
		<h2>Description</h2>
		<p>Creates a new object based on supplied properties and returns it. The object is not saved to the database; it only exists in memory. Property names and values can be passed in either using named arguments or as a struct to the `properties` argument.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">new([ <em>properties</em>, <em>callbacks</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>properties</code></td>
				<td valign="top"><code>struct</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[runtime expression]</code></td>
				<td valign="top">The properties you want to set on the object (can also be passed in as named arguments).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>callbacks</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `false` to disable callbacks for this operation.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_74914012636DE8D1ECFC57CFFEE3E139' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Create&#32;a&#32;new&#32;author&#32;in&#32;memory&#32;(not&#32;saved&#32;to&#32;the&#32;database)&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;newAuthor&#32;=&#32;model(<span style='color:#006600'>"author"</span>).new()</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Create&#32;a&#32;new&#32;author&#32;based&#32;on&#32;properties&#32;in&#32;a&#32;struct&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;newAuthor&#32;=&#32;model(<span style='color:#006600'>"author"</span>).new(params.authorStruct)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Create&#32;a&#32;new&#32;author&#32;by&#32;passing&#32;in&#32;named&#32;arguments&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;newAuthor&#32;=&#32;model(<span style='color:#006600'>"author"</span>).new(firstName=<span style='color:#006600'>"John"</span>,&#32;lastName=<span style='color:#006600'>"Doe"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;If&#32;you&#32;have&#32;a&#32;`hasOne`&#32;or&#32;`hasMany`&#32;association&#32;setup&#32;from&#32;`customer`&#32;to&#32;`order`,&#32;you&#32;can&#32;do&#32;a&#32;scoped&#32;call.&#32;(The&#32;`newOrder`&#32;method&#32;below&#32;will&#32;call&#32;`model("order").new(customerId=aCustomer.id)`&#32;internally.)&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;aCustomer&#32;=&#32;model(<span style='color:#006600'>"customer"</span>).findByKey(params.customerId)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;anOrder&#32;=&#32;aCustomer.newOrder(shipping=params.shipping)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="obfuscateparam" d:title="obfuscateParam" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>obfuscateParam()</code></h1>
		<h2>Description</h2>
		<p>Obfuscates a value. Typically used for hiding primary key values when passed along in the URL.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">obfuscateParam(<em>param</em>)</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>param</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Value to obfuscate.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_44636DEE17BC238A9753642BA9C21CCC' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Obfuscate&#32;the&#32;primary&#32;key&#32;value&#32;`99`&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;newValue&#32;=&#32;obfuscateParam(99)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="onlyprovides" d:title="onlyProvides" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>onlyProvides()</code></h1>
		<h2>Description</h2>
		<p>Use this in an individual controller action to define which formats the action will respond with. This can be used to define provides behavior in individual actions or to override a global setting set with @provides in the controller's `init()`.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">onlyProvides()</span></code></p>
		<h2>Parameters</h2>
		<p>None.</p>
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_5DBC494A3525358292EC7D147A041A18' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;In&#32;your&#32;controller&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"init"</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;provides(<span style='color:#006600'>"html,xml,json"</span>)</span>&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;This&#32;action&#32;will&#32;provide&#32;the&#32;formats&#32;defined&#32;in&#32;`init()`&#32;above&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"list"</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;products&#32;=&#32;model(<span style='color:#006600'>"product"</span>).findAll()</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;renderWith(products)</span>&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;This&#32;action&#32;will&#32;only&#32;provide&#32;the&#32;`html`&#32;type&#32;and&#32;will&#32;ignore&#32;what&#32;was&#32;defined&#32;in&#32;the&#32;call&#32;to&#32;`provides()`&#32;in&#32;the&#32;`init()`&#32;method&#32;above&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"new"</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;onlyProvides(<span style='color:#006600'>"html"</span>)</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;model(<span style='color:#006600'>"product"</span>).new()</span>&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="pagination" d:title="pagination" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>pagination()</code></h1>
		<h2>Description</h2>
		<p>Returns a struct with information about the specificed paginated query. The keys that will be included in the struct are `currentPage`, `totalPages` and `totalRecords`.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">pagination([ <em>handle</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>handle</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>query</code></td>
				<td valign="top">The handle given to the query to return pagination information for.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_23005A70C72A85C8F5D82FBE1967AD61' style='color:#000'><span style='color:#990033'>&lt;cfparam&#32;name=<span style='color:#0000CC'>"params.page"</span>&#32;default=<span style='color:#0000CC'>"1"</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;allAuthors&#32;=&#32;model(<span style='color:#006600'>"author"</span>).findAll(page=params.page,&#32;perPage=25,&#32;order=<span style='color:#006600'>"lastName"</span>,&#32;handle=<span style='color:#006600'>"authorsData"</span>)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;paginationData&#32;=&#32;pagination(<span style='color:#006600'>"authorsData"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="paginationlinks" d:title="paginationLinks" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>paginationLinks()</code></h1>
		<h2>Description</h2>
		<p>Builds and returns a string containing links to pages based on a paginated query. Uses @linkTo internally to build the link, so you need to pass in a `route` name or a `controller`/`action`/`key` combination. All other @linkTo arguments can be supplied as well, in which case they are passed through directly to @linkTo. If you have paginated more than one query in the controller, you can use the `handle` argument to reference them. (Don't forget to pass in a `handle` to the @findAll function in your controller first.)</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">paginationLinks([ <em>windowSize</em>, <em>alwaysShowAnchors</em>, <em>anchorDivider</em>, <em>linkToCurrentPage</em>, <em>prepend</em>, <em>append</em>, <em>prependToPage</em>, <em>prependOnFirst</em>, <em>prependOnAnchor</em>, <em>appendToPage</em>, <em>appendOnLast</em>, <em>appendOnAnchor</em>, <em>classForCurrent</em>, <em>handle</em>, <em>name</em>, <em>showSinglePage</em>, <em>pageNumberAsParam</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>windowSize</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>2</code></td>
				<td valign="top">The number of page links to show around the current page.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>alwaysShowAnchors</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Whether or not links to the first and last page should always be displayed.</td>
			</tr>
			<tr>
				<td valign="top"><code>anchorDivider</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code> ... </code></td>
				<td valign="top">String to place next to the anchors on either side of the list.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>linkToCurrentPage</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Whether or not the current page should be linked to.</td>
			</tr>
			<tr>
				<td valign="top"><code>prepend</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String or HTML to be prepended before result.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>append</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String or HTML to be appended after result.</td>
			</tr>
			<tr>
				<td valign="top"><code>prependToPage</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String or HTML to be prepended before each page number.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>prependOnFirst</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Whether or not to prepend the `prependToPage` string on the first page in the list.</td>
			</tr>
			<tr>
				<td valign="top"><code>prependOnAnchor</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Whether or not to prepend the `prependToPage` string on the anchors.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>appendToPage</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String or HTML to be appended after each page number.</td>
			</tr>
			<tr>
				<td valign="top"><code>appendOnLast</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Whether or not to append the `appendToPage` string on the last page in the list.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>appendOnAnchor</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Whether or not to append the `appendToPage` string on the anchors.</td>
			</tr>
			<tr>
				<td valign="top"><code>classForCurrent</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Class name for the current page number (if `linkToCurrentPage` is `true`, the class name will go on the `a` element. If not, a `span` element will be used).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>handle</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>query</code></td>
				<td valign="top">The handle given to the query that the pagination links should be displayed for.</td>
			</tr>
			<tr>
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>page</code></td>
				<td valign="top">The name of the param that holds the current page number.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>showSinglePage</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Will show a single page when set to `true`. (The default behavior is to return an empty string when there is only one page in the pagination).</td>
			</tr>
			<tr>
				<td valign="top"><code>pageNumberAsParam</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Decides whether to link the page number as a param or as part of a route. (The default behavior is `true`).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/paginationlinks for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="passwordfield" d:title="passwordField" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>passwordField()</code></h1>
		<h2>Description</h2>
		<p>Builds and returns a string containing a password field form control based on the supplied `objectName` and `property`. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">passwordField(<em>objectName</em>, <em>property</em> [, <em>association</em>, <em>position</em>, <em>label</em>, <em>labelPlacement</em>, <em>prepend</em>, <em>append</em>, <em>prependToLabel</em>, <em>appendToLabel</em>, <em>errorElement</em>, <em>errorClass</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>objectName</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The variable name of the object to build the form control for.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>property</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The name of the property to use in the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>association</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The name of the association that the property is located on. Used for building nested forms that work with nested properties. If you are building a form with deep nesting, simply pass in a list to the nested object, and Wheels will figure it out.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>position</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The position used when referencing a `hasMany` relationship in the `association` argument. Used for building nested forms that work with nested properties. If you are building a form with deep nestings, simply pass in a list of positions, and Wheels will figure it out.</td>
			</tr>
			<tr>
				<td valign="top"><code>label</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>useDefaultLabel</code></td>
				<td valign="top">The label text to use in the form control.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>labelPlacement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>around</code></td>
				<td valign="top">Whether to place the label `before`, `after`, or wrapped `around` the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>prepend</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>append</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>prependToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>appendToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>errorElement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>span</code></td>
				<td valign="top">HTML tag to wrap the form control with when the object contains errors.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>errorClass</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>fieldWithErrors</code></td>
				<td valign="top">The class name of the HTML tag that wraps the form control when there are errors.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/passwordfield for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="passwordfieldtag" d:title="passwordFieldTag" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>passwordFieldTag()</code></h1>
		<h2>Description</h2>
		<p>Builds and returns a string containing a password field form control based on the supplied `name`. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">passwordFieldTag(<em>name</em> [, <em>value</em>, <em>label</em>, <em>labelPlacement</em>, <em>prepend</em>, <em>append</em>, <em>prependToLabel</em>, <em>appendToLabel</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name to populate in tag's `name` attribute.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>value</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Value to populate in tag's `value` attribute.</td>
			</tr>
			<tr>
				<td valign="top"><code>label</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The label text to use in the form control.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>labelPlacement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>around</code></td>
				<td valign="top">Whether to place the label `before`, `after`, or wrapped `around` the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>prepend</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>append</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>prependToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>appendToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/passwordfieldtag for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="pluginnames" d:title="pluginNames" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>pluginNames()</code></h1>
		<h2>Description</h2>
		<p>Returns a list of all installed plugins' names.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">pluginNames()</span></code></p>
		<h2>Parameters</h2>
		<p>None.</p>
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_E71FAC64A4A7AC46399BA6FD10E2DF49' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Check&#32;if&#32;the&#32;Scaffold&#32;plugin&#32;is&#32;installed&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfif&#32;ListFindNoCase(<span style='color:#0000CC'>"scaffold"</span>,&#32;pluginNames())&gt;</span><br />    <span style='color:Gray;'>&lt;!---&#32;do&#32;something&#32;cool&#32;---&gt;</span><br /><span style='color:#990033'>&lt;/cfif&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="pluralize" d:title="pluralize" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>pluralize()</code></h1>
		<h2>Description</h2>
		<p>Returns the plural form of the passed in word. Can also pluralize a word based on a value passed to the `count` argument.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">pluralize(<em>word</em> [, <em>count</em>, <em>returnCount</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>word</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The word to pluralize.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>count</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>-1</code></td>
				<td valign="top">Pluralization will occur when this value is not `1`.</td>
			</tr>
			<tr>
				<td valign="top"><code>returnCount</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Will return `count` prepended to the pluralization when `true` and `count` is not `-1`.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/pluralize for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="primarykey" d:title="primaryKey" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>primaryKey()</code></h1>
		<h2>Description</h2>
		<p>Returns the name of the primary key for this model's table. This is determined through database introspection. If composite primary keys have been used, they will both be returned in a list. This function is also aliased as `primaryKeys()`.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">primaryKey([ <em>position</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>position</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>0</code></td>
				<td valign="top">If you are accessing a composite primary key, pass the position of a single key to fetch.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_10295DE56C63CFDF5FF06546D5969ADE' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Get&#32;the&#32;name&#32;of&#32;the&#32;primary&#32;key&#32;of&#32;the&#32;table&#32;mapped&#32;to&#32;the&#32;`employee`&#32;model&#32;(which&#32;is&#32;the&#32;`employees`&#32;table&#32;by&#32;default)&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;keyName&#32;=&#32;model(<span style='color:#006600'>"employee"</span>).primaryKey()</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="primarykeys" d:title="primaryKeys" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>primaryKeys()</code></h1>
		<h2>Description</h2>
		<p>Alias for @primaryKey. Use this for better readability when you're accessing multiple primary keys.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">primaryKeys([ <em>position</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>position</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>0</code></td>
				<td valign="top">If you are accessing a composite primary key, pass the position of a single key to fetch.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_787A3C828237E998788F0DB1DB82B62A' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Get&#32;a&#32;list&#32;of&#32;the&#32;names&#32;of&#32;the&#32;primary&#32;keys&#32;in&#32;the&#32;table&#32;mapped&#32;to&#32;the&#32;`employee`&#32;model&#32;(which&#32;is&#32;the&#32;`employees`&#32;table&#32;by&#32;default)&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;keyNames&#32;=&#32;model(<span style='color:#006600'>"employee"</span>).primaryKeys()</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="properties" d:title="properties" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>properties()</code></h1>
		<h2>Description</h2>
		<p>Returns a structure of all the properties with their names as keys and the values of the property as values.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">properties()</span></code></p>
		<h2>Parameters</h2>
		<p>None.</p>
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_DB8FEBB3A1AB811A7AA8DDC5228E61BA' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Get&#32;a&#32;structure&#32;of&#32;all&#32;the&#32;properties&#32;for&#32;an&#32;object&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;user&#32;=&#32;model(<span style='color:#006600'>"user"</span>).findByKey(1)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;props&#32;=&#32;user.properties()</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="property" d:title="property" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>property()</code></h1>
		<h2>Description</h2>
		<p>Use this method to map an object property to either a table column with a different name than the property or to a SQL expression. You only need to use this method when you want to override the default object relational mapping that Wheels performs.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">property(<em>name</em> [, <em>column</em>, <em>sql</em>, <em>label</em>, <em>defaultValue</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The name that you want to use for the column or SQL function result in the CFML code.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>column</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The name of the column in the database table to map the property to.</td>
			</tr>
			<tr>
				<td valign="top"><code>sql</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">A SQL expression to use to calculate the property value.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>label</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">A custom label for this property to be referenced in the interface and error messages.</td>
			</tr>
			<tr>
				<td valign="top"><code>defaultValue</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">A default value for this property.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_EED0995878C89BFC0A7A6653B35EAB48' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Tell&#32;Wheels&#32;that&#32;when&#32;we&#32;are&#32;referring&#32;to&#32;`firstName`&#32;in&#32;the&#32;CFML&#32;code,&#32;it&#32;should&#32;translate&#32;to&#32;the&#32;`STR_USERS_FNAME`&#32;column&#32;when&#32;interacting&#32;with&#32;the&#32;database&#32;instead&#32;of&#32;the&#32;default&#32;(which&#32;would&#32;be&#32;the&#32;`firstname`&#32;column)&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;property(name=<span style='color:#006600'>"firstName"</span>,&#32;column=<span style='color:#006600'>"STR_USERS_FNAME"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Tell&#32;Wheels&#32;that&#32;when&#32;we&#32;are&#32;referring&#32;to&#32;`fullName`&#32;in&#32;the&#32;CFML&#32;code,&#32;it&#32;should&#32;concatenate&#32;the&#32;`STR_USERS_FNAME`&#32;and&#32;`STR_USERS_LNAME`&#32;columns&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;property(name=<span style='color:#006600'>"fullName"</span>,&#32;sql=<span style='color:#006600'>"STR_USERS_FNAME&#32;+&#32;'&#32;'&#32;+&#32;STR_USERS_LNAME"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Tell&#32;Wheels&#32;that&#32;when&#32;displaying&#32;error&#32;messages&#32;or&#32;labels&#32;for&#32;form&#32;fields,&#32;we&#32;want&#32;to&#32;use&#32;`First&#32;name(s)`&#32;as&#32;the&#32;label&#32;for&#32;the&#32;`STR_USERS_FNAME`&#32;column&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;property(name=<span style='color:#006600'>"firstName"</span>,&#32;label=<span style='color:#006600'>"First&#32;name(s)"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Tell&#32;Wheels&#32;that&#32;when&#32;creating&#32;new&#32;objects,&#32;we&#32;want&#32;them&#32;to&#32;be&#32;auto-populated&#32;with&#32;a&#32;`firstName`&#32;property&#32;of&#32;value&#32;`Dave`&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;property(name=<span style='color:#006600'>"firstName"</span>,&#32;defaultValue=<span style='color:#006600'>"Dave"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="propertyispresent" d:title="propertyIsPresent" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>propertyIsPresent()</code></h1>
		<h2>Description</h2>
		<p>Returns `true` if the specified property exists on the model and is not a blank string.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">propertyIsPresent(<em>property</em>)</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>property</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of property to inspect.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_FA1B4BEC90EB7513A1D86B0BB477C656' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Get&#32;an&#32;object,&#32;set&#32;a&#32;value&#32;and&#32;then&#32;see&#32;if&#32;the&#32;property&#32;exists&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;employee&#32;=&#32;model(<span style='color:#006600'>"employee"</span>).new()</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;employee.firstName&#32;=&#32;<span style='color:#006600'>"dude"</span></span>&gt;</span><br /><span style='color:#990033'>&lt;cfreturn&#32;employee.propertyIsPresent(<span style='color:#0000CC'>"firstName"</span>)&gt;</span><span style='color:Gray;'>&lt;!---&#32;Returns&#32;true&#32;---&gt;</span><br /><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;employee.firstName&#32;=&#32;<span style='color:#006600'>""</span></span>&gt;</span><br /><span style='color:#990033'>&lt;cfreturn&#32;employee.propertyIsPresent(<span style='color:#0000CC'>"firstName"</span>)&gt;</span><span style='color:Gray;'>&lt;!---&#32;Returns&#32;false&#32;---&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="propertynames" d:title="propertyNames" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>propertyNames()</code></h1>
		<h2>Description</h2>
		<p>Returns a list of property names ordered by their respective column's ordinal position in the database table. Also includes calculated property names that will be generated by the Wheels ORM.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">propertyNames()</span></code></p>
		<h2>Parameters</h2>
		<p>None.</p>
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_2ED1D1E05F5099D5A4B6F941B6909936' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Get&#32;a&#32;list&#32;of&#32;the&#32;property&#32;names&#32;in&#32;use&#32;in&#32;the&#32;user&#32;model&#32;---&gt;</span><br />&#32;&#32;        <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;propNames&#32;=&#32;model(<span style='color:#006600'>"user"</span>).propertyNames()</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="protectedproperties" d:title="protectedProperties" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>protectedProperties()</code></h1>
		<h2>Description</h2>
		<p>Use this method to specify which properties cannot be set through mass assignment.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">protectedProperties([ <em>properties</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>properties</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Property name (or list of property names) that are not allowed to be altered through mass assignment.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_AF39577245BF419E0463F39BD64DF6DC' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;In&#32;`models/User.cfc`,&#32;`firstName`&#32;and&#32;`lastName`&#32;cannot&#32;be&#32;changed&#32;through&#32;mass&#32;assignment&#32;operations&#32;like&#32;`updateAll()`&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"init"</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;protectedProperties(<span style='color:#006600'>"firstName,lastName"</span>)</span>&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="provides" d:title="provides" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>provides()</code></h1>
		<h2>Description</h2>
		<p>Defines formats that the controller will respond with upon request. The format can be requested through a URL variable called `format`, by appending the format name to the end of a URL as an extension (when URL rewriting is enabled), or in the request header.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">provides([ <em>formats</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>formats</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Formats to instruct the controller to provide. Valid values are `html` (the default), `xml`, `json`, `csv`, `pdf`, and `xls`.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_EFFCF9E964F41B02CA74999DFBFFCB7D' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;In&#32;your&#32;controller&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"init"</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;provides(<span style='color:#006600'>"html,xml,json"</span>)</span>&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="radiobutton" d:title="radioButton" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>radioButton()</code></h1>
		<h2>Description</h2>
		<p>Builds and returns a string containing a radio button form control based on the supplied `objectName` and `property`. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">radioButton(<em>objectName</em>, <em>property</em>, <em>tagValue</em> [, <em>association</em>, <em>position</em>, <em>label</em>, <em>labelPlacement</em>, <em>prepend</em>, <em>append</em>, <em>prependToLabel</em>, <em>appendToLabel</em>, <em>errorElement</em>, <em>errorClass</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>objectName</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The variable name of the object to build the form control for.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>property</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The name of the property to use in the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>association</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The name of the association that the property is located on. Used for building nested forms that work with nested properties. If you are building a form with deep nesting, simply pass in a list to the nested object, and Wheels will figure it out.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>position</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The position used when referencing a `hasMany` relationship in the `association` argument. Used for building nested forms that work with nested properties. If you are building a form with deep nestings, simply pass in a list of positions, and Wheels will figure it out.</td>
			</tr>
			<tr>
				<td valign="top"><code>tagValue</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The value of the radio button when `selected`.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>label</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>useDefaultLabel</code></td>
				<td valign="top">The label text to use in the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>labelPlacement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>around</code></td>
				<td valign="top">Whether to place the label `before`, `after`, or wrapped `around` the form control.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>prepend</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>append</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>prependToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>appendToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>errorElement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>span</code></td>
				<td valign="top">HTML tag to wrap the form control with when the object contains errors.</td>
			</tr>
			<tr>
				<td valign="top"><code>errorClass</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>fieldWithErrors</code></td>
				<td valign="top">The class name of the HTML tag that wraps the form control when there are errors.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/radiobutton for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="radiobuttontag" d:title="radioButtonTag" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>radioButtonTag()</code></h1>
		<h2>Description</h2>
		<p>Builds and returns a string containing a radio button form control based on the supplied `name`. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">radioButtonTag(<em>name</em>, <em>value</em> [, <em>checked</em>, <em>label</em>, <em>labelPlacement</em>, <em>prepend</em>, <em>append</em>, <em>prependToLabel</em>, <em>appendToLabel</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name to populate in tag's `name` attribute.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>value</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Value to populate in tag's `value` attribute.</td>
			</tr>
			<tr>
				<td valign="top"><code>checked</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Whether or not to check the radio button by default.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>label</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The label text to use in the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>labelPlacement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>around</code></td>
				<td valign="top">Whether to place the label `before`, `after`, or wrapped `around` the form control.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>prepend</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>append</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>prependToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>appendToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/radiobuttontag for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="redirectto" d:title="redirectTo" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>redirectTo()</code></h1>
		<h2>Description</h2>
		<p>Redirects the browser to the supplied `controller`/`action`/`key`, `route` or back to the referring page. Internally, this function uses the @URLFor function to build the link and the `cflocation` tag to perform the redirect.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">redirectTo([ <em>back</em>, <em>addToken</em>, <em>statusCode</em>, <em>route</em>, <em>controller</em>, <em>action</em>, <em>key</em>, <em>params</em>, <em>anchor</em>, <em>onlyPath</em>, <em>host</em>, <em>protocol</em>, <em>port</em>, <em>delay</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>back</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Set to `true` to redirect back to the referring page.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>addToken</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">See documentation for your CFML engine's implementation of `cflocation`.</td>
			</tr>
			<tr>
				<td valign="top"><code>statusCode</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>302</code></td>
				<td valign="top">See documentation for your CFML engine's implementation of `cflocation`.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>route</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of a route that you have configured in `config/routes.cfm`.</td>
			</tr>
			<tr>
				<td valign="top"><code>controller</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of the controller to include in the URL.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>action</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of the action to include in the URL.</td>
			</tr>
			<tr>
				<td valign="top"><code>key</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Key(s) to include in the URL.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>params</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Any additional params to be set in the query string.</td>
			</tr>
			<tr>
				<td valign="top"><code>anchor</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Sets an anchor name to be appended to the path.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>onlyPath</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">If `true`, returns only the relative URL (no protocol, host name or port).</td>
			</tr>
			<tr>
				<td valign="top"><code>host</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Set this to override the current host.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>protocol</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Set this to override the current protocol.</td>
			</tr>
			<tr>
				<td valign="top"><code>port</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>0</code></td>
				<td valign="top">Set this to override the current port number.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>delay</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Set to `true` to delay the redirection until after the rest of your action code has executed.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_BEAD0BAC3005444ABEAD97BF504371C7' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Redirect&#32;to&#32;an&#32;action&#32;after&#32;successfully&#32;saving&#32;a&#32;user&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfif&#32;user.save()&gt;</span><br />&#32;&#32;&#32;&#32;<span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;redirectTo(action=<span style='color:#006600'>"saveSuccessful"</span>)</span>&gt;</span><br /><span style='color:#990033'>&lt;/cfif&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Redirect&#32;to&#32;a&#32;specific&#32;page&#32;on&#32;a&#32;secure&#32;server&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;redirectTo(controller=<span style='color:#006600'>"checkout"</span>,&#32;action=<span style='color:#006600'>"start"</span>,&#32;params=<span style='color:#006600'>"type=express"</span>,&#32;protocol=<span style='color:#006600'>"https"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Redirect&#32;to&#32;a&#32;route&#32;specified&#32;in&#32;`config/routes.cfm`&#32;and&#32;pass&#32;in&#32;the&#32;screen&#32;name&#32;that&#32;the&#32;route&#32;takes&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;redirectTo(route=<span style='color:#006600'>"profile"</span>,&#32;screenName=<span style='color:#006600'>"Joe"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Redirect&#32;back&#32;to&#32;the&#32;page&#32;the&#32;user&#32;came&#32;from&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;redirectTo(back=true)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="reload" d:title="reload" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>reload()</code></h1>
		<h2>Description</h2>
		<p>Reloads the property values of this object from the database.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">reload()</span></code></p>
		<h2>Parameters</h2>
		<p>None.</p>
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_C3F91DCBB3BB7504DC547979E583E56B' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Get&#32;an&#32;object,&#32;call&#32;a&#32;method&#32;on&#32;it&#32;that&#32;could&#32;potentially&#32;change&#32;values,&#32;and&#32;then&#32;reload&#32;the&#32;values&#32;from&#32;the&#32;database&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;employee&#32;=&#32;model(<span style='color:#006600'>"employee"</span>).findByKey(params.key)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;employee.someCallThatChangesValuesInTheDatabase()</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;employee.reload()</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="rendernothing" d:title="renderNothing" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>renderNothing()</code></h1>
		<h2>Description</h2>
		<p>Instructs the controller to render an empty string when it's finished processing the action. This is very similar to calling `cfabort` with the advantage that any after filters you have set on the action will still be run.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">renderNothing()</span></code></p>
		<h2>Parameters</h2>
		<p>None.</p>
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_A1BBE77E8CB25B3C66F8236AADB06CEE' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Render&#32;a&#32;blank&#32;white&#32;page&#32;to&#32;the&#32;client&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;renderNothing()</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="renderpage" d:title="renderPage" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>renderPage()</code></h1>
		<h2>Description</h2>
		<p>Instructs the controller which view template and layout to render when it's finished processing the action. Note that when passing values for `controller` and/or `action`, this function does not load the actual action but rather just loads the corresponding view template.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">renderPage([ <em>controller</em>, <em>action</em>, <em>template</em>, <em>layout</em>, <em>cache</em>, <em>returnAs</em>, <em>hideDebugInformation</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>controller</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[runtime expression]</code></td>
				<td valign="top">Controller to include the view page for.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>action</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[runtime expression]</code></td>
				<td valign="top">Action to include the view page for.</td>
			</tr>
			<tr>
				<td valign="top"><code>template</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">A specific template to render. Prefix with a leading slash `/` if you need to build a path from the root `views` folder.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>layout</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The layout to wrap the content in. Prefix with a leading slash `/` if you need to build a path from the root `views` folder. Pass `false` to not load a layout at all.</td>
			</tr>
			<tr>
				<td valign="top"><code>cache</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Number of minutes to cache the content for.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>returnAs</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Set to `string` to return the result instead of automatically sending it to the client.</td>
			</tr>
			<tr>
				<td valign="top"><code>hideDebugInformation</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Set to `true` to hide the debug information at the end of the output. This is useful when you're testing XML output in an environment where the global setting for `showDebugInformation` is `true`.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_B0D9763D81340DCA99A0B65EDDF7F254' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Render&#32;a&#32;view&#32;page&#32;for&#32;a&#32;different&#32;action&#32;within&#32;the&#32;same&#32;controller&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;renderPage(action=<span style='color:#006600'>"edit"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Render&#32;a&#32;view&#32;page&#32;for&#32;a&#32;different&#32;action&#32;within&#32;a&#32;different&#32;controller&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;renderPage(controller=<span style='color:#006600'>"blog"</span>,&#32;action=<span style='color:#006600'>"new"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Another&#32;way&#32;to&#32;render&#32;the&#32;blog/new&#32;template&#32;from&#32;within&#32;a&#32;different&#32;controller&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;renderPage(template=<span style='color:#006600'>"/blog/new"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Render&#32;the&#32;view&#32;page&#32;for&#32;the&#32;current&#32;action&#32;but&#32;without&#32;a&#32;layout&#32;and&#32;cache&#32;it&#32;for&#32;60&#32;minutes&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;renderPage(layout=false,&#32;cache=60)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Load&#32;a&#32;layout&#32;from&#32;a&#32;different&#32;folder&#32;within&#32;`views`&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;renderPage(layout=<span style='color:#006600'>"/layouts/blog"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Don't&#32;render&#32;the&#32;view&#32;immediately&#32;but&#32;rather&#32;return&#32;and&#32;store&#32;in&#32;a&#32;variable&#32;for&#32;further&#32;processing&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;myView&#32;=&#32;renderPage(returnAs=<span style='color:#006600'>"string"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="renderpartial" d:title="renderPartial" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>renderPartial()</code></h1>
		<h2>Description</h2>
		<p>Instructs the controller to render a partial when it's finished processing the action.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">renderPartial(<em>partial</em> [, <em>cache</em>, <em>layout</em>, <em>returnAs</em>, <em>dataFunction</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>partial</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The name of the partial file to be used. Prefix with a leading slash `/` if you need to build a path from the root `views` folder. Do not include the partial filename's underscore and file extension.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>cache</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Number of minutes to cache the content for.</td>
			</tr>
			<tr>
				<td valign="top"><code>layout</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The layout to wrap the content in. Prefix with a leading slash `/` if you need to build a path from the root `views` folder. Pass `false` to not load a layout at all.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>returnAs</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Set to `string` to return the result instead of automatically sending it to the client.</td>
			</tr>
			<tr>
				<td valign="top"><code>dataFunction</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Name of a controller function to load data from.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_AA92FB277A28F83388FABF2991970A9E' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Render&#32;the&#32;partial&#32;`_comment.cfm`&#32;located&#32;in&#32;the&#32;current&#32;controller's&#32;view&#32;folder&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;renderPartial(<span style='color:#006600'>"comment"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Render&#32;the&#32;partial&#32;at&#32;`views/shared/_comment.cfm`&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;renderPartial(<span style='color:#006600'>"/shared/comment"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="rendertext" d:title="renderText" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>renderText()</code></h1>
		<h2>Description</h2>
		<p>Instructs the controller to render specified text when it's finished processing the action.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">renderText(<em>text</em>)</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>text</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The text to be rendered.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_D8C2F3F22D988CBFF03747E35B149294' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Render&#32;just&#32;the&#32;text&#32;"Done!"&#32;to&#32;the&#32;client&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;renderText(<span style='color:#006600'>"Done!"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Render&#32;serialized&#32;product&#32;data&#32;to&#32;the&#32;client&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;products&#32;=&#32;model(<span style='color:#006600'>"product"</span>).findAll()</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;renderText(<span style='color:blue'>SerializeJson</span>(products))</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="renderwith" d:title="renderWith" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>renderWith()</code></h1>
		<h2>Description</h2>
		<p>Instructs the controller to render the data passed in to the format that is requested. If the format requested is `json` or `xml`, Wheels will transform the data into that format automatically. For other formats (or to override the automatic formatting), you can also create a view template in this format: `nameofaction.xml.cfm`, `nameofaction.json.cfm`, `nameofaction.pdf.cfm`, etc.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">renderWith(<em>data</em> [, <em>controller</em>, <em>action</em>, <em>template</em>, <em>layout</em>, <em>cache</em>, <em>returnAs</em>, <em>hideDebugInformation</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>data</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Data to format and render.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>controller</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[runtime expression]</code></td>
				<td valign="top">Controller to include the view page for.</td>
			</tr>
			<tr>
				<td valign="top"><code>action</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[runtime expression]</code></td>
				<td valign="top">Action to include the view page for.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>template</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">A specific template to render. Prefix with a leading slash `/` if you need to build a path from the root `views` folder.</td>
			</tr>
			<tr>
				<td valign="top"><code>layout</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The layout to wrap the content in. Prefix with a leading slash `/` if you need to build a path from the root `views` folder. Pass `false` to not load a layout at all.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>cache</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Number of minutes to cache the content for.</td>
			</tr>
			<tr>
				<td valign="top"><code>returnAs</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Set to `string` to return the result instead of automatically sending it to the client.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>hideDebugInformation</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Set to `true` to hide the debug information at the end of the output. This is useful when you're testing XML output in an environment where the global setting for `showDebugInformation` is `true`.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_5DBC494A3525358292EC7D147A041A18' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;In&#32;your&#32;controller&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"init"</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;provides(<span style='color:#006600'>"html,xml,json"</span>)</span>&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;This&#32;action&#32;will&#32;provide&#32;the&#32;formats&#32;defined&#32;in&#32;`init()`&#32;above&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"list"</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;products&#32;=&#32;model(<span style='color:#006600'>"product"</span>).findAll()</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;renderWith(products)</span>&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;This&#32;action&#32;will&#32;only&#32;provide&#32;the&#32;`html`&#32;type&#32;and&#32;will&#32;ignore&#32;what&#32;was&#32;defined&#32;in&#32;the&#32;call&#32;to&#32;`provides()`&#32;in&#32;the&#32;`init()`&#32;method&#32;above&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"new"</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;onlyProvides(<span style='color:#006600'>"html"</span>)</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;model(<span style='color:#006600'>"product"</span>).new()</span>&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="resetcycle" d:title="resetCycle" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>resetCycle()</code></h1>
		<h2>Description</h2>
		<p>Resets a cycle so that it starts from the first list value the next time it is called.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">resetCycle([ <em>name</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>default</code></td>
				<td valign="top">The name of the cycle to reset.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/resetcycle for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="response" d:title="response" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>response()</code></h1>
		<h2>Description</h2>
		<p>Returns content that Wheels will send to the client in response to the request.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">response()</span></code></p>
		<h2>Parameters</h2>
		<p>None.</p>
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_71F5C969687D9B4CAD0B1C27731B001B' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;In&#32;a&#32;controller&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"init"</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;filters(type=<span style='color:#006600'>"after"</span>,&#32;through=<span style='color:#006600'>"translateResponse"</span>)</span>&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;After&#32;filter&#32;translates&#32;response&#32;and&#32;sets&#32;it&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"translateResponse"</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;var&#32;wheelsResponse&#32;=&#32;response()</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;var&#32;translatedResponse&#32;=&#32;someTranslationMethod(wheelsResponse)</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;setResponse(translatedResponse)</span>&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="save" d:title="save" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>save()</code></h1>
		<h2>Description</h2>
		<p>Saves the object if it passes validation and callbacks. Returns `true` if the object was saved successfully to the database, `false` if not.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">save([ <em>parameterize</em>, <em>reload</em>, <em>validate</em>, <em>transaction</em>, <em>callbacks</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>parameterize</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `true` to use `cfqueryparam` on all columns, or pass in a list of property names to use `cfqueryparam` on those only.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>reload</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Set to `true` to reload the object from the database once an insert/update has completed.</td>
			</tr>
			<tr>
				<td valign="top"><code>validate</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `false` to skip validations for this operation.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>transaction</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[runtime expression]</code></td>
				<td valign="top">Set this to `commit` to update the database when the save has completed, `rollback` to run all the database queries but not commit them, or `none` to skip transaction handling altogether.</td>
			</tr>
			<tr>
				<td valign="top"><code>callbacks</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `false` to disable callbacks for this operation.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_FA1C73EB8DF46BD0AE6B29B50FDF8897' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Save&#32;the&#32;user&#32;object&#32;to&#32;the&#32;database&#32;(will&#32;automatically&#32;do&#32;an&#32;`INSERT`&#32;or&#32;`UPDATE`&#32;statement&#32;depending&#32;on&#32;if&#32;the&#32;record&#32;is&#32;new&#32;or&#32;already&#32;exists&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;user.save()</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Save&#32;the&#32;user&#32;object&#32;directly&#32;in&#32;an&#32;if&#32;statement&#32;without&#32;using&#32;`cfqueryparam`&#32;and&#32;take&#32;appropriate&#32;action&#32;based&#32;on&#32;the&#32;result&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfif&#32;user.save(parameterize=false)&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;flashInsert(notice=<span style='color:#006600'>"The&#32;user&#32;was&#32;saved!"</span>)</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;redirectTo(action=<span style='color:#006600'>"edit"</span>)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfelse&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;flashInsert(alert=<span style='color:#006600'>"Error,&#32;please&#32;correct!"</span>)</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;renderPage(action=<span style='color:#006600'>"edit"</span>)</span>&gt;</span><br /><span style='color:#990033'>&lt;/cfif&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="secondselecttag" d:title="secondSelectTag" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>secondSelectTag()</code></h1>
		<h2>Description</h2>
		<p>Builds and returns a string containing one select form control for the seconds of a minute based on the supplied `name`.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">secondSelectTag(<em>name</em> [, <em>selected</em>, <em>includeBlank</em>, <em>label</em>, <em>labelPlacement</em>, <em>prepend</em>, <em>append</em>, <em>prependToLabel</em>, <em>appendToLabel</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name to populate in tag's `name` attribute.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>selected</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The second that should be selected initially.</td>
			</tr>
			<tr>
				<td valign="top"><code>includeBlank</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>label</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The label text to use in the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>labelPlacement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>around</code></td>
				<td valign="top">Whether to place the label `before`, `after`, or wrapped `around` the form control.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>prepend</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>append</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>prependToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>appendToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/secondselecttag for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="select" d:title="select" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>select()</code></h1>
		<h2>Description</h2>
		<p>Builds and returns a string containing a `select` form control based on the supplied `objectName` and `property`. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">select(<em>objectName</em>, <em>property</em>, <em>options</em> [, <em>association</em>, <em>position</em>, <em>includeBlank</em>, <em>valueField</em>, <em>textField</em>, <em>label</em>, <em>labelPlacement</em>, <em>prepend</em>, <em>append</em>, <em>prependToLabel</em>, <em>appendToLabel</em>, <em>errorElement</em>, <em>errorClass</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>objectName</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The variable name of the object to build the form control for.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>property</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The name of the property to use in the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>association</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The name of the association that the property is located on. Used for building nested forms that work with nested properties. If you are building a form with deep nesting, simply pass in a list to the nested object, and Wheels will figure it out.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>position</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The position used when referencing a `hasMany` relationship in the `association` argument. Used for building nested forms that work with nested properties. If you are building a form with deep nestings, simply pass in a list of positions, and Wheels will figure it out.</td>
			</tr>
			<tr>
				<td valign="top"><code>options</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">A collection to populate the select form control with. Can be a query recordset or an array of objects.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>includeBlank</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").</td>
			</tr>
			<tr>
				<td valign="top"><code>valueField</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The column or property to use for the value of each list element. Used only when a query or array of objects has been supplied in the `options` argument.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>textField</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The column or property to use for the value of each list element that the end user will see. Used only when a query or array of objects has been supplied in the `options` argument.</td>
			</tr>
			<tr>
				<td valign="top"><code>label</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>useDefaultLabel</code></td>
				<td valign="top">The label text to use in the form control.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>labelPlacement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>around</code></td>
				<td valign="top">Whether to place the label `before`, `after`, or wrapped `around` the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>prepend</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>append</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>prependToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>appendToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>errorElement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>span</code></td>
				<td valign="top">HTML tag to wrap the form control with when the object contains errors.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>errorClass</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>fieldWithErrors</code></td>
				<td valign="top">The class name of the HTML tag that wraps the form control when there are errors.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/select for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="selecttag" d:title="selectTag" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>selectTag()</code></h1>
		<h2>Description</h2>
		<p>Builds and returns a string containing a select form control based on the supplied `name` and `options`. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">selectTag(<em>name</em>, <em>options</em> [, <em>selected</em>, <em>includeBlank</em>, <em>multiple</em>, <em>valueField</em>, <em>textField</em>, <em>label</em>, <em>labelPlacement</em>, <em>prepend</em>, <em>append</em>, <em>prependToLabel</em>, <em>appendToLabel</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name to populate in tag's `name` attribute.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>options</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">A collection to populate the select form control with. Can be a query recordset or an array of objects.</td>
			</tr>
			<tr>
				<td valign="top"><code>selected</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Value of option that should be selected by default.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>includeBlank</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").</td>
			</tr>
			<tr>
				<td valign="top"><code>multiple</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Whether to allow multiple selection of options in the select form control.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>valueField</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The column or property to use for the value of each list element. Used only when a query or array of objects has been supplied in the `options` argument.</td>
			</tr>
			<tr>
				<td valign="top"><code>textField</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The column or property to use for the value of each list element that the end user will see. Used only when a query or array of objects has been supplied in the `options` argument.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>label</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The label text to use in the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>labelPlacement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>around</code></td>
				<td valign="top">Whether to place the label `before`, `after`, or wrapped `around` the form control.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>prepend</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>append</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>prependToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>appendToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/selecttag for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="sendemail" d:title="sendEmail" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>sendEmail()</code></h1>
		<h2>Description</h2>
		<p>Sends an email using a template and an optional layout to wrap it in. Besides the Wheels-specific arguments documented here, you can also pass in any argument that is accepted by the `cfmail` tag as well as your own arguments to be used by the view.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">sendEmail(<em>from</em>, <em>to</em>, <em>subject</em> [, <em>template</em>, <em>layout</em>, <em>file</em>, <em>detectMultipart</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>template</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The path to the email template or two paths if you want to send a multipart email. if the `detectMultipart` argument is `false`, the template for the text version should be the first one in the list. This argument is also aliased as `templates`.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>from</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Email address to send from.</td>
			</tr>
			<tr>
				<td valign="top"><code>to</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">List of email addresses to send the email to.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>subject</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The subject line of the email.</td>
			</tr>
			<tr>
				<td valign="top"><code>layout</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Layout(s) to wrap the email template in. This argument is also aliased as `layouts`.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>file</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">A list of the names of the files to attach to the email. This will reference files stored in the `files` folder (or a path relative to it). This argument is also aliased as `files`.</td>
			</tr>
			<tr>
				<td valign="top"><code>detectMultipart</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">When set to `true` and multiple values are provided for the `template` argument, Wheels will detect which of the templates is text and which one is HTML (by counting the `<` characters).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_996A90542C7FF75DB8F864515960C848' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Get&#32;a&#32;member&#32;and&#32;send&#32;a&#32;welcome&#32;email,&#32;passing&#32;in&#32;a&#32;few&#32;custom&#32;variables&#32;to&#32;the&#32;template&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;newMember&#32;=&#32;model(<span style='color:#006600'>"member"</span>).findByKey(params.member.id)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;sendEmail(<br />    to=newMember.email,<br />    template=<span style='color:#006600'>"myemailtemplate"</span>,<br />    subject=<span style='color:#006600'>"Thank&#32;You&#32;for&#32;Becoming&#32;a&#32;Member"</span>,<br />    recipientName=newMember.name,<br />    startDate=newMember.startDate<br />)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="sendfile" d:title="sendFile" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>sendFile()</code></h1>
		<h2>Description</h2>
		<p>Sends a file to the user (from the `files` folder or a path relative to it by default).</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">sendFile(<em>file</em> [, <em>name</em>, <em>type</em>, <em>disposition</em>, <em>directory</em>, <em>deleteFile</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>file</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The file to send to the user.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The file name to show in the browser download dialog box.</td>
			</tr>
			<tr>
				<td valign="top"><code>type</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The HTTP content type to deliver the file as.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>disposition</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>attachment</code></td>
				<td valign="top">Set to `inline` to have the browser handle the opening of the file (possibly inline in the browser) or set to `attachment` to force a download dialog box.</td>
			</tr>
			<tr>
				<td valign="top"><code>directory</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Directory outside of the webroot where the file exists. Must be a full path.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>deleteFile</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Pass in `true` to delete the file on the server after sending it.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_5533F4E0D7DFEA2A611DC976D35D756F' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Send&#32;a&#32;PDF&#32;file&#32;to&#32;the&#32;user&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;sendFile(file=<span style='color:#006600'>"wheels_tutorial_20081028_J657D6HX.pdf"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Send&#32;the&#32;same&#32;file&#32;but&#32;give&#32;the&#32;user&#32;a&#32;different&#32;name&#32;in&#32;the&#32;browser&#32;dialog&#32;window&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;sendFile(file=<span style='color:#006600'>"wheels_tutorial_20081028_J657D6HX.pdf"</span>,&#32;name=<span style='color:#006600'>"Tutorial.pdf"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Send&#32;a&#32;file&#32;that&#32;is&#32;located&#32;outside&#32;of&#32;the&#32;web&#32;root&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;sendFile(file=<span style='color:#006600'>"../../tutorials/wheels_tutorial_20081028_J657D6HX.pdf"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="set" d:title="set" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>set()</code></h1>
		<h2>Description</h2>
		<p>Use to configure a global setting or set a default for a function.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">set()</span></code></p>
		<h2>Parameters</h2>
		<p>None.</p>
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_89E356533A44B20790BF533D9345D568' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Example&#32;1:&#32;Set&#32;the&#32;`URLRewriting`&#32;setting&#32;to&#32;`Partial`&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;set(URLRewriting=<span style='color:#006600'>"Partial"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Example&#32;2:&#32;Set&#32;default&#32;values&#32;for&#32;the&#32;arguments&#32;in&#32;the&#32;`buttonTo`&#32;view&#32;helper.&#32;This&#32;works&#32;for&#32;the&#32;majority&#32;of&#32;Wheels&#32;functions/arguments.&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;set(functionName=<span style='color:#006600'>"buttonTo"</span>,&#32;onlyPath=true,&#32;host=<span style='color:#006600'>""</span>,&#32;protocol=<span style='color:#006600'>""</span>,&#32;port=0,&#32;text=<span style='color:#006600'>""</span>,&#32;confirm=<span style='color:#006600'>""</span>,&#32;image=<span style='color:#006600'>""</span>,&#32;disable=<span style='color:#006600'>""</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Example&#32;3:&#32;Set&#32;the&#32;default&#32;values&#32;for&#32;a&#32;form&#32;helper&#32;to&#32;get&#32;the&#32;form&#32;marked&#32;up&#32;to&#32;your&#32;preferences&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;set(functionName=<span style='color:#006600'>"textField"</span>,&#32;labelPlacement=<span style='color:#006600'>"before"</span>,&#32;prependToLabel=<span style='color:#006600'>"&lt;div</span>&gt;</span>"</span>,&#32;append=<span style='color:#0000CC'>"&lt;/div&gt;"</span>,&#32;appendToLabel=<span style='color:#0000CC'>"&lt;br&#32;/&gt;"</span>)&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="setfilterchain" d:title="setFilterChain" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>setFilterChain()</code></h1>
		<h2>Description</h2>
		<p>Use this function if you need a more low level way of setting the entire filter chain for a controller.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">setFilterChain(<em>chain</em>)</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>chain</code></td>
				<td valign="top"><code>array</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">An array of structs, each of which represent an `argumentCollection` that get passed to the `filters` function. This should represent the entire filter chain that you want to use for this controller.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_997EA29C16D1616BDD743D6508BBB5DF' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Set&#32;filter&#32;chain&#32;directly&#32;in&#32;an&#32;array&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;setFilterChain([<br />    <span style='color:#000099'>{</span>through=<span style='color:#006600'>"restrictAccess"</span><span style='color:#000099'>}</span>,<br />    <span style='color:#000099'>{</span>through=<span style='color:#006600'>"isLoggedIn,checkIPAddress"</span>,&#32;except=<span style='color:#006600'>"home,login"</span><span style='color:#000099'>}</span>,<br />    <span style='color:#000099'>{</span>type=<span style='color:#006600'>"after"</span>,&#32;through=<span style='color:#006600'>"logConversion"</span>,&#32;only=<span style='color:#006600'>"thankYou"</span><span style='color:#000099'>}</span><br />])</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="setpagination" d:title="setPagination" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>setPagination()</code></h1>
		<h2>Description</h2>
		<p>Allows you to set a pagination handle for a custom query so you can perform pagination on it in your view with `paginationLinks()`.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">setPagination(<em>totalRecords</em> [, <em>currentPage</em>, <em>perPage</em>, <em>handle</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>totalRecords</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Total count of records that should be represented by the paginated links.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>currentPage</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>1</code></td>
				<td valign="top">Page number that should be represented by the data being fetched and the paginated links.</td>
			</tr>
			<tr>
				<td valign="top"><code>perPage</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>25</code></td>
				<td valign="top">Number of records that should be represented on each page of data.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>handle</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>query</code></td>
				<td valign="top">Name of handle to reference in @paginationLinks.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/setpagination for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="setprimarykey" d:title="setPrimaryKey" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>setPrimaryKey()</code></h1>
		<h2>Description</h2>
		<p>Allows you to pass in the name(s) of the property(s) that should be used as the primary key(s). Pass as a list if defining a composite primary key. Also aliased as `setPrimaryKeys()`.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">setPrimaryKey(<em>property</em>)</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>property</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Property (or list of properties) to set as the primary key.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_F1A3BB374FC65DBC1AFDE3280E84167F' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;In&#32;`models/User.cfc`,&#32;define&#32;the&#32;primary&#32;key&#32;as&#32;a&#32;column&#32;called&#32;`userID`&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"init"</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;setPrimaryKey(<span style='color:#006600'>"userID"</span>)</span>&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="setprimarykeys" d:title="setPrimaryKeys" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>setPrimaryKeys()</code></h1>
		<h2>Description</h2>
		<p>Alias for @setPrimaryKey. Use this for better readability when you're setting multiple properties as the primary key.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">setPrimaryKeys(<em>property</em>)</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>property</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Property (or list of properties) to set as the primary key.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_52A79EB0A5E2338DFDAFA1366284278E' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;In&#32;`models/Subscription.cfc`,&#32;define&#32;the&#32;primary&#32;key&#32;as&#32;composite&#32;of&#32;the&#32;columns&#32;`customerId`&#32;and&#32;`publicationId`&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"init"</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;setPrimaryKeys(<span style='color:#006600'>"customerId,publicationId"</span>)</span>&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="setproperties" d:title="setProperties" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>setProperties()</code></h1>
		<h2>Description</h2>
		<p>Allows you to set all the properties of an object at once by passing in a structure with keys matching the property names.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">setProperties([ <em>properties</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>properties</code></td>
				<td valign="top"><code>struct</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[runtime expression]</code></td>
				<td valign="top">The properties you want to set on the object (can also be passed in as named arguments).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_A5945CD15A5AC705C9A42E1B3785DB34' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Update&#32;the&#32;properties&#32;of&#32;the&#32;object&#32;with&#32;the&#32;params&#32;struct&#32;containing&#32;the&#32;values&#32;of&#32;a&#32;form&#32;post&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;user&#32;=&#32;model(<span style='color:#006600'>"user"</span>).findByKey(1)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;user.setProperties(params.user)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="setresponse" d:title="setResponse" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>setResponse()</code></h1>
		<h2>Description</h2>
		<p>Sets content that Wheels will send to the client in response to the request.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">setResponse(<em>content</em>)</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>content</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The content to set as the response.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_1631F0057A7A78CE705B5EB4BE471F0D' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;In&#32;a&#32;controller&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"init"</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;filters(type=<span style='color:#006600'>"after"</span>,&#32;through=<span style='color:#006600'>"translateResponse"</span>)</span>&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;After&#32;filter&#32;translates&#32;response&#32;and&#32;sets&#32;it&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"translateResponse"</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;var&#32;wheelsResponse&#32;=&#32;response()</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;var&#32;translatedResponse&#32;=&#32;someTranslationFunction(wheelsResponse)</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;setResponse(translatedResponse)</span>&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="settablenameprefix" d:title="setTableNamePrefix" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>setTableNamePrefix()</code></h1>
		<h2>Description</h2>
		<p>Sets a prefix to prepend to the table name when this model runs SQL queries.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">setTableNamePrefix(<em>prefix</em>)</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>prefix</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">A prefix to prepend to the table name.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_247B44A0DC58238112643F29283E3936' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;In&#32;`models/User.cfc`,&#32;add&#32;a&#32;prefix&#32;to&#32;the&#32;default&#32;table&#32;name&#32;of&#32;`tbl`&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"init"</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;setTableNamePrefix(<span style='color:#006600'>"tbl"</span>)</span>&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="setverificationchain" d:title="setVerificationChain" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>setVerificationChain()</code></h1>
		<h2>Description</h2>
		<p>Use this function if you need a more low level way of setting the entire verification chain for a controller.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">setVerificationChain(<em>chain</em>)</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>chain</code></td>
				<td valign="top"><code>array</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">An array of structs, each of which represent an `argumentCollection` that get passed to the `verifies` function. This should represent the entire verification chain that you want to use for this controller.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_785520A3F8D545CE21C718C7DDE44A99' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Set&#32;verification&#32;chain&#32;directly&#32;in&#32;an&#32;array&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;setVerificationChain([<br />    <span style='color:#000099'>{</span>only=<span style='color:#006600'>"handleForm"</span>,&#32;post=true<span style='color:#000099'>}</span>,<br />    <span style='color:#000099'>{</span>only=<span style='color:#006600'>"edit"</span>,&#32;get=true,&#32;params=<span style='color:#006600'>"userId"</span>,&#32;paramsTypes=<span style='color:#006600'>"integer"</span><span style='color:#000099'>}</span>,<br />    <span style='color:#000099'>{</span>only=<span style='color:#006600'>"edit"</span>,&#32;get=true,&#32;params=<span style='color:#006600'>"userId"</span>,&#32;paramsTypes=<span style='color:#006600'>"integer"</span>,&#32;handler=<span style='color:#006600'>"index"</span>,&#32;error=<span style='color:#006600'>"Invalid&#32;userId"</span><span style='color:#000099'>}</span><br />])</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="simpleformat" d:title="simpleFormat" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>simpleFormat()</code></h1>
		<h2>Description</h2>
		<p>Replaces single newline characters with HTML break tags and double newline characters with HTML paragraph tags (properly closed to comply with XHTML standards).</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">simpleFormat(<em>text</em> [, <em>wrap</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>text</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The text to format.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>wrap</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `true` to wrap the result in a paragraph.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/simpleformat for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="singularize" d:title="singularize" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>singularize()</code></h1>
		<h2>Description</h2>
		<p>Returns the singular form of the passed in word.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">singularize(<em>word</em>)</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>word</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to singularize.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/singularize for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="startformtag" d:title="startFormTag" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>startFormTag()</code></h1>
		<h2>Description</h2>
		<p>Builds and returns a string containing the opening form tag. The form's action will be built according to the same rules as `URLFor`. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">startFormTag([ <em>method</em>, <em>multipart</em>, <em>spamProtection</em>, <em>route</em>, <em>controller</em>, <em>action</em>, <em>key</em>, <em>params</em>, <em>anchor</em>, <em>onlyPath</em>, <em>host</em>, <em>protocol</em>, <em>port</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>method</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>post</code></td>
				<td valign="top">The type of method to use in the form tag. `get` and `post` are the options.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>multipart</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Set to `true` if the form should be able to upload files.</td>
			</tr>
			<tr>
				<td valign="top"><code>spamProtection</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Set to `true` to protect the form against spammers (done with JavaScript).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>route</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of a route that you have configured in `config/routes.cfm`.</td>
			</tr>
			<tr>
				<td valign="top"><code>controller</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of the controller to include in the URL.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>action</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of the action to include in the URL.</td>
			</tr>
			<tr>
				<td valign="top"><code>key</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Key(s) to include in the URL.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>params</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Any additional params to be set in the query string.</td>
			</tr>
			<tr>
				<td valign="top"><code>anchor</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Sets an anchor name to be appended to the path.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>onlyPath</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">If `true`, returns only the relative URL (no protocol, host name or port).</td>
			</tr>
			<tr>
				<td valign="top"><code>host</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Set this to override the current host.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>protocol</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Set this to override the current protocol.</td>
			</tr>
			<tr>
				<td valign="top"><code>port</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>0</code></td>
				<td valign="top">Set this to override the current port number.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/startformtag for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="striplinks" d:title="stripLinks" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>stripLinks()</code></h1>
		<h2>Description</h2>
		<p>Removes all links from an HTML string, leaving just the link text.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">stripLinks(<em>html</em>)</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>html</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The HTML to remove links from.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/striplinks for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="striptags" d:title="stripTags" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>stripTags()</code></h1>
		<h2>Description</h2>
		<p>Removes all HTML tags from a string.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">stripTags(<em>html</em>)</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>html</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The HTML to remove tag markup from.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/striptags for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="stylesheetlinktag" d:title="styleSheetLinkTag" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>styleSheetLinkTag()</code></h1>
		<h2>Description</h2>
		<p>Returns a `link` tag for a stylesheet (or several) based on the supplied arguments.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">styleSheetLinkTag([ <em>sources</em>, <em>type</em>, <em>media</em>, <em>head</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>sources</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The name of one or many CSS files in the `stylesheets` folder, minus the `.css` extension. (Can also be called with the `source` argument.)</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>type</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>text/css</code></td>
				<td valign="top">The `type` attribute for the `link` tag.</td>
			</tr>
			<tr>
				<td valign="top"><code>media</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>all</code></td>
				<td valign="top">The `media` attribute for the `link` tag.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>head</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Set to `true` to place the output in the `head` area of the HTML page instead of the default behavior, which is to place the output where the function is called from.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/stylesheetlinktag for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="submittag" d:title="submitTag" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>submitTag()</code></h1>
		<h2>Description</h2>
		<p>Builds and returns a string containing a submit button `form` control. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">submitTag([ <em>value</em>, <em>image</em>, <em>disable</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>value</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>Save changes</code></td>
				<td valign="top">Message to display in the button form control.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>image</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">File name of the image file to use in the button form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>disable</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Whether or not to disable the button upon clicking. (prevents double-clicking.)</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/submittag for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="sum" d:title="sum" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>sum()</code></h1>
		<h2>Description</h2>
		<p>Calculates the sum of values for a given property. Uses the SQL function `SUM`. If no records can be found to perform the calculation on you can use the `ifNull` argument to decide what should be returned.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">sum(<em>property</em> [, <em>where</em>, <em>include</em>, <em>distinct</em>, <em>parameterize</em>, <em>ifNull</em>, <em>includeSoftDeletes</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>property</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of the property to get the sum for (must be a property of a numeric data type).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>where</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">This argument maps to the `WHERE` clause of the query. The following operators are supported: `=`, `!=`, `<>`, `<`, `<=`, `>`, `>=`, `LIKE`, `NOT LIKE`, `IN`, `NOT IN`, `IS NULL`, `IS NOT NULL`, `AND`, and `OR`. (Note that the key words need to be written in upper case.) You can also use parentheses to group statements. You do not need to specify the table name(s); Wheels will do that for you.</td>
			</tr>
			<tr>
				<td valign="top"><code>include</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Associations that should be included in the query using `INNER` or `LEFT OUTER` joins (which join type that is used depends on how the association has been set up in your model). If all included associations are set on the current model, you can specify them in a list (e.g. `department,addresses,emails`). You can build more complex `include` strings by using parentheses when the association is set on an included model, like `album(artist(genre))`, for example. These complex `include` strings only work when `returnAs` is set to `query` though.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>distinct</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">When `true`, `SUM` returns the sum of unique values only.</td>
			</tr>
			<tr>
				<td valign="top"><code>parameterize</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `true` to use `cfqueryparam` on all columns, or pass in a list of property names to use `cfqueryparam` on those only.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>ifNull</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The value returned if no records are found. Common usage is to set this to `0` to make sure a numeric value is always returned instead of a blank string.</td>
			</tr>
			<tr>
				<td valign="top"><code>includeSoftDeletes</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">You can set this argument to `true` to include soft-deleted records in the results.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/sum for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="table" d:title="table" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>table()</code></h1>
		<h2>Description</h2>
		<p>Use this method to tell Wheels what database table to connect to for this model. You only need to use this method when your table naming does not follow the standard Wheels convention of a singular object name mapping to a plural table name.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">table(<em>name</em>)</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of the table to map this model to.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_66D88127486B3E0D2B2E09752E7E0895' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;In&#32;models/User.cfc&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"init"</span>&gt;</span><br />    <span style='color:Gray;'>&lt;!---&#32;Tell&#32;Wheels&#32;to&#32;use&#32;the&#32;`tbl_USERS`&#32;table&#32;in&#32;the&#32;database&#32;for&#32;the&#32;`user`&#32;model&#32;instead&#32;of&#32;the&#32;default&#32;(which&#32;would&#32;be&#32;`users`)&#32;---&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;table(<span style='color:#006600'>"tbl_USERS"</span>)</span>&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="tablename" d:title="tableName" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>tableName()</code></h1>
		<h2>Description</h2>
		<p>Returns the name of the database table that this model is mapped to.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">tableName()</span></code></p>
		<h2>Parameters</h2>
		<p>None.</p>
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_EB220CA697810F050605B8EE71DA2A6F' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Check&#32;what&#32;table&#32;the&#32;user&#32;model&#32;uses&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;whatAmIMappedTo&#32;=&#32;model(<span style='color:#006600'>"user"</span>).tableName()</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="textarea" d:title="textArea" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>textArea()</code></h1>
		<h2>Description</h2>
		<p>Builds and returns a string containing a text area field form control based on the supplied `objectName` and `property`. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">textArea(<em>objectName</em>, <em>property</em> [, <em>association</em>, <em>position</em>, <em>label</em>, <em>labelPlacement</em>, <em>prepend</em>, <em>append</em>, <em>prependToLabel</em>, <em>appendToLabel</em>, <em>errorElement</em>, <em>errorClass</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>objectName</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The variable name of the object to build the form control for.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>property</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The name of the property to use in the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>association</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The name of the association that the property is located on. Used for building nested forms that work with nested properties. If you are building a form with deep nesting, simply pass in a list to the nested object, and Wheels will figure it out.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>position</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The position used when referencing a `hasMany` relationship in the `association` argument. Used for building nested forms that work with nested properties. If you are building a form with deep nestings, simply pass in a list of positions, and Wheels will figure it out.</td>
			</tr>
			<tr>
				<td valign="top"><code>label</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>useDefaultLabel</code></td>
				<td valign="top">The label text to use in the form control.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>labelPlacement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>around</code></td>
				<td valign="top">Whether to place the label `before`, `after`, or wrapped `around` the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>prepend</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>append</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>prependToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>appendToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>errorElement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>span</code></td>
				<td valign="top">HTML tag to wrap the form control with when the object contains errors.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>errorClass</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>fieldWithErrors</code></td>
				<td valign="top">The class name of the HTML tag that wraps the form control when there are errors.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/textarea for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="textareatag" d:title="textAreaTag" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>textAreaTag()</code></h1>
		<h2>Description</h2>
		<p>Builds and returns a string containing a text area form control based on the supplied `name`. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">textAreaTag(<em>name</em> [, <em>content</em>, <em>label</em>, <em>labelPlacement</em>, <em>prepend</em>, <em>append</em>, <em>prependToLabel</em>, <em>appendToLabel</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name to populate in tag's `name` attribute.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>content</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Content to display in `textarea` on page load.</td>
			</tr>
			<tr>
				<td valign="top"><code>label</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The label text to use in the form control.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>labelPlacement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>around</code></td>
				<td valign="top">Whether to place the label `before`, `after`, or wrapped `around` the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>prepend</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>append</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>prependToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>appendToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/textareatag for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="textfield" d:title="textField" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>textField()</code></h1>
		<h2>Description</h2>
		<p>Builds and returns a string containing a text field form control based on the supplied `objectName` and `property`. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">textField(<em>objectName</em>, <em>property</em> [, <em>association</em>, <em>position</em>, <em>label</em>, <em>labelPlacement</em>, <em>prepend</em>, <em>append</em>, <em>prependToLabel</em>, <em>appendToLabel</em>, <em>errorElement</em>, <em>errorClass</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>objectName</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The variable name of the object to build the form control for.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>property</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The name of the property to use in the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>association</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The name of the association that the property is located on. Used for building nested forms that work with nested properties. If you are building a form with deep nesting, simply pass in a list to the nested object, and Wheels will figure it out.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>position</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The position used when referencing a `hasMany` relationship in the `association` argument. Used for building nested forms that work with nested properties. If you are building a form with deep nestings, simply pass in a list of positions, and Wheels will figure it out.</td>
			</tr>
			<tr>
				<td valign="top"><code>label</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>useDefaultLabel</code></td>
				<td valign="top">The label text to use in the form control.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>labelPlacement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>around</code></td>
				<td valign="top">Whether to place the label `before`, `after`, or wrapped `around` the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>prepend</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>append</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>prependToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>appendToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>errorElement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>span</code></td>
				<td valign="top">HTML tag to wrap the form control with when the object contains errors.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>errorClass</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>fieldWithErrors</code></td>
				<td valign="top">The class name of the HTML tag that wraps the form control when there are errors.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/textfield for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="textfieldtag" d:title="textFieldTag" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>textFieldTag()</code></h1>
		<h2>Description</h2>
		<p>Builds and returns a string containing a text field form control based on the supplied `name`. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">textFieldTag(<em>name</em> [, <em>value</em>, <em>label</em>, <em>labelPlacement</em>, <em>prepend</em>, <em>append</em>, <em>prependToLabel</em>, <em>appendToLabel</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name to populate in tag's `name` attribute.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>value</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Value to populate in tag's `value` attribute.</td>
			</tr>
			<tr>
				<td valign="top"><code>label</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The label text to use in the form control.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>labelPlacement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>around</code></td>
				<td valign="top">Whether to place the label `before`, `after`, or wrapped `around` the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>prepend</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>append</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>prependToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>appendToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/textfieldtag for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="timeagoinwords" d:title="timeAgoInWords" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>timeAgoInWords()</code></h1>
		<h2>Description</h2>
		<p>Pass in a date to this method, and it will return a string describing the approximate time difference between that date and the current date.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">timeAgoInWords(<em>fromTime</em> [, <em>includeSeconds</em>, <em>toTime</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>fromTime</code></td>
				<td valign="top"><code>date</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Date to compare from.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>includeSeconds</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Whether or not to include the number of seconds in the returned string.</td>
			</tr>
			<tr>
				<td valign="top"><code>toTime</code></td>
				<td valign="top"><code>date</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[runtime expression]</code></td>
				<td valign="top">Date to compare to.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/timeagoinwords for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="timeselect" d:title="timeSelect" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>timeSelect()</code></h1>
		<h2>Description</h2>
		<p>Builds and returns a string containing three select form controls for hour, minute, and second based on the supplied `objectName` and `property`.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">timeSelect([ <em>objectName</em>, <em>property</em>, <em>association</em>, <em>position</em>, <em>order</em>, <em>separator</em>, <em>minuteStep</em>, <em>includeBlank</em>, <em>label</em>, <em>labelPlacement</em>, <em>prepend</em>, <em>append</em>, <em>prependToLabel</em>, <em>appendToLabel</em>, <em>errorElement</em>, <em>errorClass</em>, <em>combine</em>, <em>twelveHour</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>objectName</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The variable name of the object to build the form control for.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>property</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The name of the property to use in the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>association</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The name of the association that the property is located on. Used for building nested forms that work with nested properties. If you are building a form with deep nesting, simply pass in a list to the nested object, and Wheels will figure it out.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>position</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The position used when referencing a `hasMany` relationship in the `association` argument. Used for building nested forms that work with nested properties. If you are building a form with deep nestings, simply pass in a list of positions, and Wheels will figure it out.</td>
			</tr>
			<tr>
				<td valign="top"><code>order</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>hour,minute,second</code></td>
				<td valign="top">Use to change the order of or exclude time select tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>separator</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>:</code></td>
				<td valign="top">Use to change the character that is displayed between the time select tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>minuteStep</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>1</code></td>
				<td valign="top">Pass in `10` to only show minute 10, 20, 30, etc.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>includeBlank</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").</td>
			</tr>
			<tr>
				<td valign="top"><code>label</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">The label text to use in the form control. The label will be applied to all `select` tags, but you can pass in a list to cutomize each one individually.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>labelPlacement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>around</code></td>
				<td valign="top">Whether to place the label `before`, `after`, or wrapped `around` the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>prepend</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>append</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>prependToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>appendToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>errorElement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>span</code></td>
				<td valign="top">HTML tag to wrap the form control with when the object contains errors.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>errorClass</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>fieldWithErrors</code></td>
				<td valign="top">The class name of the HTML tag that wraps the form control when there are errors.</td>
			</tr>
			<tr>
				<td valign="top"><code>combine</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Set to `false` to not combine the select parts into a single `DateTime` object.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>twelveHour</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">whether to display the hours in 24 or 12 hour format. 12 hour format has AM/PM drop downs</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/timeselect for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="timeselecttags" d:title="timeSelectTags" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>timeSelectTags()</code></h1>
		<h2>Description</h2>
		<p>Builds and returns a string containing three select form controls for hour, minute, and second based on `name`.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">timeSelectTags(<em>name</em> [, <em>selected</em>, <em>order</em>, <em>separator</em>, <em>minuteStep</em>, <em>includeBlank</em>, <em>label</em>, <em>labelPlacement</em>, <em>prepend</em>, <em>append</em>, <em>prependToLabel</em>, <em>appendToLabel</em>, <em>combine</em>, <em>twelveHour</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name to populate in tag's `name` attribute.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>selected</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Value of option that should be selected by default.</td>
			</tr>
			<tr>
				<td valign="top"><code>order</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>hour,minute,second</code></td>
				<td valign="top">Use to change the order of or exclude time select tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>separator</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>:</code></td>
				<td valign="top">Use to change the character that is displayed between the time select tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>minuteStep</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>1</code></td>
				<td valign="top">Pass in `10` to only show minute 10, 20, 30, etc.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>includeBlank</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").</td>
			</tr>
			<tr>
				<td valign="top"><code>label</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The label text to use in the form control. The label will be applied to all `select` tags, but you can pass in a list to cutomize each one individually.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>labelPlacement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>around</code></td>
				<td valign="top">Whether to place the label `before`, `after`, or wrapped `around` the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>prepend</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>append</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>prependToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>appendToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>combine</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Set to `false` to not combine the select parts into a single `DateTime` object.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>twelveHour</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">whether to display the hours in 24 or 12 hour format. 12 hour format has AM/PM drop downs</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/timeselecttags for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="timeuntilinwords" d:title="timeUntilInWords" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>timeUntilInWords()</code></h1>
		<h2>Description</h2>
		<p>Pass in a date to this method, and it will return a string describing the approximate time difference between the current date and that date.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">timeUntilInWords(<em>toTime</em> [, <em>includeSeconds</em>, <em>fromTime</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>toTime</code></td>
				<td valign="top"><code>date</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Date to compare to.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>includeSeconds</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Whether or not to include the number of seconds in the returned string.</td>
			</tr>
			<tr>
				<td valign="top"><code>fromTime</code></td>
				<td valign="top"><code>date</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[runtime expression]</code></td>
				<td valign="top">Date to compare from.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/timeuntilinwords for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="titleize" d:title="titleize" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>titleize()</code></h1>
		<h2>Description</h2>
		<p>Capitalizes all words in the text to create a nicer looking title.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">titleize(<em>word</em>)</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>word</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The text to turn into a title.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/titleize for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="toggle" d:title="toggle" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>toggle()</code></h1>
		<h2>Description</h2>
		<p>Assigns to the property specified the opposite of the property's current boolean value. Throws an error if the property cannot be converted to a boolean value. Returns this object if save called internally is `false`.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">toggle([ <em>save</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>save</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Argument to decide whether save the property after it has been toggled. Defaults to true.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_4F27DAEF5105BF78CA2B51FC73FEC74B' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Get&#32;an&#32;object,&#32;and&#32;toggle&#32;a&#32;boolean&#32;property&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;user&#32;=&#32;model(<span style='color:#006600'>"user"</span>).findByKey(58)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;isSuccess&#32;=&#32;user.toggle(<span style='color:#006600'>"isActive"</span>)</span>&gt;</span><span style='color:Gray;'>&lt;!---&#32;returns&#32;whether&#32;the&#32;object&#32;was&#32;saved&#32;properly&#32;---&gt;</span><br /><span style='color:Gray;'>&lt;!---&#32;You&#32;can&#32;also&#32;use&#32;a&#32;dynamic&#32;helper&#32;for&#32;this&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;isSuccess&#32;=&#32;user.toggleIsActive()</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="toxhtml" d:title="toXHTML" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>toXHTML()</code></h1>
		<h2>Description</h2>
		<p>Returns an XHTML-compliant string.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">toXHTML(<em>text</em>)</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>text</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to make XHTML-compliant.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/toxhtml for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="truncate" d:title="truncate" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>truncate()</code></h1>
		<h2>Description</h2>
		<p>Truncates text to the specified length and replaces the last characters with the specified truncate string (which defaults to "...").</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">truncate(<em>text</em> [, <em>length</em>, <em>truncateString</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>text</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The text to truncate.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>length</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>30</code></td>
				<td valign="top">Length to truncate the text to.</td>
			</tr>
			<tr>
				<td valign="top"><code>truncateString</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>...</code></td>
				<td valign="top">String to replace the last characters with.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/truncate for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="update" d:title="update" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>update()</code></h1>
		<h2>Description</h2>
		<p>Updates the object with the supplied properties and saves it to the database. Returns `true` if the object was saved successfully to the database and `false` otherwise.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">update([ <em>properties</em>, <em>parameterize</em>, <em>reload</em>, <em>validate</em>, <em>transaction</em>, <em>callbacks</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>properties</code></td>
				<td valign="top"><code>struct</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[runtime expression]</code></td>
				<td valign="top">The properties you want to set on the object (can also be passed in as named arguments).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>parameterize</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `true` to use `cfqueryparam` on all columns, or pass in a list of property names to use `cfqueryparam` on those only.</td>
			</tr>
			<tr>
				<td valign="top"><code>reload</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Set to `true` to force Wheels to query the database even though an identical query may have been run in the same request. (The default in Wheels is to get the second query from the request-level cache.)</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>validate</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `false` to skip validations for this operation.</td>
			</tr>
			<tr>
				<td valign="top"><code>transaction</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[runtime expression]</code></td>
				<td valign="top">Set this to `commit` to update the database when the save has completed, `rollback` to run all the database queries but not commit them, or `none` to skip transaction handling altogether.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>callbacks</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `false` to disable callbacks for this operation.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_81AE3C6D7E4B4D854E9EC3A2D1E8C509' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Get&#32;a&#32;post&#32;object&#32;and&#32;then&#32;update&#32;its&#32;title&#32;in&#32;the&#32;database&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;post&#32;=&#32;model(<span style='color:#006600'>"post"</span>).findByKey(33)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;post.update(title=<span style='color:#006600'>"New&#32;version&#32;of&#32;Wheels&#32;just&#32;released"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Get&#32;a&#32;post&#32;object&#32;and&#32;then&#32;update&#32;its&#32;title&#32;and&#32;other&#32;properties&#32;based&#32;on&#32;what&#32;is&#32;pased&#32;in&#32;from&#32;the&#32;URL/form&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;post&#32;=&#32;model(<span style='color:#006600'>"post"</span>).findByKey(params.key)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;post.update(title=<span style='color:#006600'>"New&#32;version&#32;of&#32;Wheels&#32;just&#32;released"</span>,&#32;properties=params.post)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;If&#32;you&#32;have&#32;a&#32;`hasOne`&#32;association&#32;setup&#32;from&#32;`author`&#32;to&#32;`bio`,&#32;you&#32;can&#32;do&#32;a&#32;scoped&#32;call.&#32;(The&#32;`setBio`&#32;method&#32;below&#32;will&#32;call&#32;`bio.update(authorId=anAuthor.id)`&#32;internally.)&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;author&#32;=&#32;model(<span style='color:#006600'>"author"</span>).findByKey(params.authorId)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;bio&#32;=&#32;model(<span style='color:#006600'>"bio"</span>).findByKey(params.bioId)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;author.setBio(bio)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;If&#32;you&#32;have&#32;a&#32;`hasMany`&#32;association&#32;setup&#32;from&#32;`owner`&#32;to&#32;`car`,&#32;you&#32;can&#32;do&#32;a&#32;scoped&#32;call.&#32;(The&#32;`addCar`&#32;method&#32;below&#32;will&#32;call&#32;`car.update(ownerId=anOwner.id)`&#32;internally.)&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;anOwner&#32;=&#32;model(<span style='color:#006600'>"owner"</span>).findByKey(params.ownerId)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;aCar&#32;=&#32;model(<span style='color:#006600'>"car"</span>).findByKey(params.carId)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;anOwner.addCar(aCar)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;If&#32;you&#32;have&#32;a&#32;`hasMany`&#32;association&#32;setup&#32;from&#32;`post`&#32;to&#32;`comment`,&#32;you&#32;can&#32;do&#32;a&#32;scoped&#32;call.&#32;(The&#32;`removeComment`&#32;method&#32;below&#32;will&#32;call&#32;`comment.update(postId="")`&#32;internally.)&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;aPost&#32;=&#32;model(<span style='color:#006600'>"post"</span>).findByKey(params.postId)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;aComment&#32;=&#32;model(<span style='color:#006600'>"comment"</span>).findByKey(params.commentId)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;aPost.removeComment(aComment)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="updateall" d:title="updateAll" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>updateAll()</code></h1>
		<h2>Description</h2>
		<p>Updates all properties for the records that match the `where` argument. Property names and values can be passed in either using named arguments or as a struct to the `properties` argument. By default, objects will not be instantiated and therefore callbacks and validations are not invoked. You can change this behavior by passing in `instantiate=true`. This method returns the number of records that were updated.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">updateAll([ <em>where</em>, <em>include</em>, <em>properties</em>, <em>reload</em>, <em>parameterize</em>, <em>instantiate</em>, <em>validate</em>, <em>transaction</em>, <em>callbacks</em>, <em>includeSoftDeletes</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>where</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">This argument maps to the `WHERE` clause of the query. The following operators are supported: `=`, `!=`, `<>`, `<`, `<=`, `>`, `>=`, `LIKE`, `NOT LIKE`, `IN`, `NOT IN`, `IS NULL`, `IS NOT NULL`, `AND`, and `OR`. (Note that the key words need to be written in upper case.) You can also use parentheses to group statements. You do not need to specify the table name(s); Wheels will do that for you.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>include</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Associations that should be included in the query using `INNER` or `LEFT OUTER` joins (which join type that is used depends on how the association has been set up in your model). If all included associations are set on the current model, you can specify them in a list (e.g. `department,addresses,emails`). You can build more complex `include` strings by using parentheses when the association is set on an included model, like `album(artist(genre))`, for example. These complex `include` strings only work when `returnAs` is set to `query` though.</td>
			</tr>
			<tr>
				<td valign="top"><code>properties</code></td>
				<td valign="top"><code>struct</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[runtime expression]</code></td>
				<td valign="top">The properties you want to set on the object (can also be passed in as named arguments).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>reload</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Set to `true` to force Wheels to query the database even though an identical query may have been run in the same request. (The default in Wheels is to get the second query from the request-level cache.)</td>
			</tr>
			<tr>
				<td valign="top"><code>parameterize</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `true` to use `cfqueryparam` on all columns, or pass in a list of property names to use `cfqueryparam` on those only.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>instantiate</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Whether or not to instantiate the object(s) first. When objects are not instantiated, any callbacks and validations set on them will be skipped.</td>
			</tr>
			<tr>
				<td valign="top"><code>validate</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `false` to skip validations for this operation.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>transaction</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[runtime expression]</code></td>
				<td valign="top">Set this to `commit` to update the database when the save has completed, `rollback` to run all the database queries but not commit them, or `none` to skip transaction handling altogether.</td>
			</tr>
			<tr>
				<td valign="top"><code>callbacks</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `false` to disable callbacks for this operation.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>includeSoftDeletes</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">You can set this argument to `true` to include soft-deleted records in the results.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/updateall for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="updatebykey" d:title="updateByKey" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>updateByKey()</code></h1>
		<h2>Description</h2>
		<p>Finds the object with the supplied key and saves it (if validation permits it) with the supplied properties and/or named arguments. Property names and values can be passed in either using named arguments or as a struct to the `properties` argument. Returns `true` if the object was found and updated successfully, `false` otherwise.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">updateByKey(<em>key</em> [, <em>properties</em>, <em>reload</em>, <em>validate</em>, <em>transaction</em>, <em>callbacks</em>, <em>includeSoftDeletes</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>key</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Primary key value(s) of the record to fetch. Separate with comma if passing in multiple primary key values. Accepts a string, list, or a numeric value.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>properties</code></td>
				<td valign="top"><code>struct</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[runtime expression]</code></td>
				<td valign="top">The properties you want to set on the object (can also be passed in as named arguments).</td>
			</tr>
			<tr>
				<td valign="top"><code>reload</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Set to `true` to force Wheels to query the database even though an identical query may have been run in the same request. (The default in Wheels is to get the second query from the request-level cache.)</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>validate</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `false` to skip validations for this operation.</td>
			</tr>
			<tr>
				<td valign="top"><code>transaction</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[runtime expression]</code></td>
				<td valign="top">Set this to `commit` to update the database when the save has completed, `rollback` to run all the database queries but not commit them, or `none` to skip transaction handling altogether.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>callbacks</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `false` to disable callbacks for this operation.</td>
			</tr>
			<tr>
				<td valign="top"><code>includeSoftDeletes</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">You can set this argument to `true` to include soft-deleted records in the results.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_3CA925C1EFB888746EBE934B0ACA426C' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Updates&#32;the&#32;object&#32;with&#32;`33`&#32;as&#32;the&#32;primary&#32;key&#32;value&#32;with&#32;values&#32;passed&#32;in&#32;through&#32;the&#32;URL/form&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;result&#32;=&#32;model(<span style='color:#006600'>"post"</span>).updateByKey(33,&#32;params.post)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Updates&#32;the&#32;object&#32;with&#32;`33`&#32;as&#32;the&#32;primary&#32;key&#32;using&#32;named&#32;arguments&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;result&#32;=&#32;model(<span style='color:#006600'>"post"</span>).updateByKey(key=33,&#32;title=<span style='color:#006600'>"New&#32;version&#32;of&#32;Wheels&#32;just&#32;released"</span>,&#32;published=1)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="updateone" d:title="updateOne" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>updateOne()</code></h1>
		<h2>Description</h2>
		<p>Gets an object based on the arguments used and updates it with the supplied properties. Returns `true` if an object was found and updated successfully, `false` otherwise.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">updateOne([ <em>where</em>, <em>order</em>, <em>properties</em>, <em>reload</em>, <em>validate</em>, <em>transaction</em>, <em>callbacks</em>, <em>includeSoftDeletes</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>where</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">This argument maps to the `WHERE` clause of the query. The following operators are supported: `=`, `!=`, `<>`, `<`, `<=`, `>`, `>=`, `LIKE`, `NOT LIKE`, `IN`, `NOT IN`, `IS NULL`, `IS NOT NULL`, `AND`, and `OR`. (Note that the key words need to be written in upper case.) You can also use parentheses to group statements. You do not need to specify the table name(s); Wheels will do that for you.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>order</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Maps to the `ORDER BY` clause of the query. You do not need to specify the table name(s); Wheels will do that for you.</td>
			</tr>
			<tr>
				<td valign="top"><code>properties</code></td>
				<td valign="top"><code>struct</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[runtime expression]</code></td>
				<td valign="top">The properties you want to set on the object (can also be passed in as named arguments).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>reload</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Set to `true` to force Wheels to query the database even though an identical query may have been run in the same request. (The default in Wheels is to get the second query from the request-level cache.)</td>
			</tr>
			<tr>
				<td valign="top"><code>validate</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `false` to skip validations for this operation.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>transaction</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[runtime expression]</code></td>
				<td valign="top">Set this to `commit` to update the database when the save has completed, `rollback` to run all the database queries but not commit them, or `none` to skip transaction handling altogether.</td>
			</tr>
			<tr>
				<td valign="top"><code>callbacks</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `false` to disable callbacks for this operation.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>includeSoftDeletes</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">You can set this argument to `true` to include soft-deleted records in the results.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/updateone for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="updateproperties" d:title="updateProperties" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>updateProperties()</code></h1>
		<h2>Description</h2>
		<p>Updates all the properties from the `properties` argument or other named arguments. If the object is invalid, the save will fail and `false` will be returned.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">updateProperties([ <em>properties</em>, <em>parameterize</em>, <em>validate</em>, <em>transaction</em>, <em>callbacks</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>properties</code></td>
				<td valign="top"><code>struct</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[runtime expression]</code></td>
				<td valign="top">Struct containing key/value pairs with properties and associated values that need to be updated globally.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>parameterize</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `true` to use `cfqueryparam` on all columns, or pass in a list of property names to use `cfqueryparam` on those only.</td>
			</tr>
			<tr>
				<td valign="top"><code>validate</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `false` to skip validations for this operation.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>transaction</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[runtime expression]</code></td>
				<td valign="top">Set this to `commit` to update the database when the save has completed, `rollback` to run all the database queries but not commit them, or `none` to skip transaction handling altogether.</td>
			</tr>
			<tr>
				<td valign="top"><code>callbacks</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `false` to disable callbacks for this operation.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_B87647B515D2547CDFDF94CC70176A3B' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Sets&#32;the&#32;`new`&#32;property&#32;to&#32;`1`&#32;through&#32;`updateProperties()`&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;product&#32;=&#32;model(<span style='color:#006600'>"product"</span>).findByKey(56)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;product.updateProperties(new=1)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="updateproperty" d:title="updateProperty" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>updateProperty()</code></h1>
		<h2>Description</h2>
		<p>Updates a single property and saves the record without going through the normal validation procedure. This is especially useful for boolean flags on existing records.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">updateProperty(<em>property</em>, <em>value</em> [, <em>parameterize</em>, <em>transaction</em>, <em>callbacks</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>property</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of the property to update the value for globally.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>value</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Value to set on the given property globally.</td>
			</tr>
			<tr>
				<td valign="top"><code>parameterize</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `true` to use `cfqueryparam` on all columns, or pass in a list of property names to use `cfqueryparam` on those only.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>transaction</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[runtime expression]</code></td>
				<td valign="top">Set this to `commit` to update the database when the save has completed, `rollback` to run all the database queries but not commit them, or `none` to skip transaction handling altogether.</td>
			</tr>
			<tr>
				<td valign="top"><code>callbacks</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `false` to disable callbacks for this operation.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_321DBD7AD861CAC71FE341EF749D4C1C' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Sets&#32;the&#32;`new`&#32;property&#32;to&#32;`1`&#32;through&#32;updateProperty()&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;product&#32;=&#32;model(<span style='color:#006600'>"product"</span>).findByKey(56)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;product.updateProperty(<span style='color:#006600'>"new"</span>,&#32;1)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="urlfor" d:title="URLFor" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>URLFor()</code></h1>
		<h2>Description</h2>
		<p>Creates an internal URL based on supplied arguments.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">URLFor([ <em>route</em>, <em>controller</em>, <em>action</em>, <em>key</em>, <em>params</em>, <em>anchor</em>, <em>onlyPath</em>, <em>host</em>, <em>protocol</em>, <em>port</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>route</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of a route that you have configured in `config/routes.cfm`.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>controller</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of the controller to include in the URL.</td>
			</tr>
			<tr>
				<td valign="top"><code>action</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of the action to include in the URL.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>key</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Key(s) to include in the URL.</td>
			</tr>
			<tr>
				<td valign="top"><code>params</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Any additional params to be set in the query string.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>anchor</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Sets an anchor name to be appended to the path.</td>
			</tr>
			<tr>
				<td valign="top"><code>onlyPath</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">If `true`, returns only the relative URL (no protocol, host name or port).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>host</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Set this to override the current host.</td>
			</tr>
			<tr>
				<td valign="top"><code>protocol</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Set this to override the current protocol.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>port</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>0</code></td>
				<td valign="top">Set this to override the current port number.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/urlfor for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="useslayout" d:title="usesLayout" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>usesLayout()</code></h1>
		<h2>Description</h2>
		<p>Used within a controller's `init()` method to specify controller- or action-specific layouts.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">usesLayout(<em>template</em> [, <em>ajax</em>, <em>except</em>, <em>only</em>, <em>useDefault</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>template</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of the layout template or method name you want to use</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>ajax</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of the layout template you want to use for AJAX requests</td>
			</tr>
			<tr>
				<td valign="top"><code>except</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">List of actions that SHOULD NOT get the layout</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>only</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">List of action that SHOULD ONLY get the layout</td>
			</tr>
			<tr>
				<td valign="top"><code>useDefault</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">When specifying conditions or a method, pass `true` to use the default `layout.cfm` if none of the conditions are met</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_9966910256FE36A5EE418CA2C96B6DD9' style='color:#000'><span style='color:Gray;'>&lt;!---<br />    Example&#32;1:&#32;We&#32;want&#32;this&#32;layout&#32;to&#32;be&#32;used&#32;as&#32;the&#32;default&#32;throughout&#32;the&#32;entire<br />    controller,&#32;except&#32;for&#32;the&#32;myajax&#32;action<br />&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"init"</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;usesLayout(template=<span style='color:#006600'>"myLayout"</span>,&#32;except=<span style='color:#006600'>"myajax"</span>)</span>&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---<br />    Example&#32;2:&#32;Use&#32;a&#32;custom&#32;layout&#32;for&#32;these&#32;actions&#32;but&#32;use&#32;the&#32;default&#32;layout.cfm<br />    for&#32;the&#32;rest<br />---&gt;</span><br /><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"init"</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;usesLayout(template=<span style='color:#006600'>"myLayout"</span>,&#32;only=<span style='color:#006600'>"termsOfService,shippingPolicy"</span>)</span>&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Example&#32;3:&#32;Define&#32;a&#32;custom&#32;method&#32;to&#32;decide&#32;which&#32;layout&#32;to&#32;display&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"init"</span>&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;usesLayout(<span style='color:#006600'>"setLayout"</span>)</span>&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /><br /><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"setLayout"</span>&gt;</span><br />    <span style='color:Gray;'>&lt;!---&#32;Use&#32;holiday&#32;theme&#32;for&#32;the&#32;month&#32;of&#32;December&#32;---&gt;</span><br />    <span style='color:#990033'>&lt;cfif&#32;Month(Now())&#32;eq&#32;12&gt;</span><br />        <span style='color:#990033'>&lt;cfreturn&#32;<span style='color:#0000CC'>"holiday"</span>&gt;</span><br />    <span style='color:Gray;'>&lt;!---&#32;Otherwise,&#32;use&#32;default&#32;layout&#32;by&#32;returning&#32;`true`&#32;---&gt;</span><br />    <span style='color:#990033'>&lt;cfelse&gt;</span><br />        <span style='color:#990033'>&lt;cfreturn&#32;true&gt;</span><br />    <span style='color:#990033'>&lt;/cfif&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="valid" d:title="valid" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>valid()</code></h1>
		<h2>Description</h2>
		<p>Runs the validation on the object and returns `true` if it passes it. Wheels will run the validation process automatically whenever an object is saved to the database, but sometimes it's useful to be able to run this method to see if the object is valid without saving it to the database.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">valid([ <em>callbacks</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>callbacks</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>true</code></td>
				<td valign="top">Set to `false` to disable callbacks for this operation.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_76688E8CC228CDCCAE7A7D771810C071' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Check&#32;if&#32;a&#32;user&#32;is&#32;valid&#32;before&#32;proceeding&#32;with&#32;execution&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;user&#32;=&#32;model(<span style='color:#006600'>"user"</span>).new(params.user)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfif&#32;user.valid()&gt;</span><br />    <span style='color:Gray;'>&lt;!---&#32;Do&#32;something&#32;here&#32;---&gt;</span><br /><span style='color:#990033'>&lt;/cfif&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="validate" d:title="validate" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>validate()</code></h1>
		<h2>Description</h2>
		<p>Registers method(s) that should be called to validate objects before they are saved.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">validate([ <em>methods</em>, <em>condition</em>, <em>unless</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>methods</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Method name or list of method names to call. (Can also be called with the `method` argument.)</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>condition</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String expression to be evaluated that decides if validation will be run (if the expression returns `true` validation will run).</td>
			</tr>
			<tr>
				<td valign="top"><code>unless</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String expression to be evaluated that decides if validation will be run (if the expression returns `false` validation will run).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_9CFA5825123106BF26291FA4A9A66E60' style='color:#000'><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"init"</span>&gt;</span><br />    <span style='color:Gray;'>&lt;!---&#32;Register&#32;the&#32;`checkPhoneNumber`&#32;method&#32;below&#32;to&#32;be&#32;called&#32;to&#32;validate&#32;objects&#32;before&#32;they&#32;are&#32;saved&#32;---&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;validate(<span style='color:#006600'>"checkPhoneNumber"</span>)</span>&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /><br /><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"checkPhoneNumber"</span>&gt;</span><br />    <span style='color:Gray;'>&lt;!---&#32;Make&#32;sure&#32;area&#32;code&#32;is&#32;`614`&#32;---&gt;</span><br />    <span style='color:#990033'>&lt;cfreturn&#32;Left(this.phoneNumber,&#32;3)&#32;is&#32;<span style='color:#0000CC'>"614"</span>&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="validateoncreate" d:title="validateOnCreate" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>validateOnCreate()</code></h1>
		<h2>Description</h2>
		<p>Registers method(s) that should be called to validate new objects before they are inserted.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">validateOnCreate([ <em>methods</em>, <em>condition</em>, <em>unless</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>methods</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Method name or list of method names to call. (Can also be called with the `method` argument.)</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>condition</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String expression to be evaluated that decides if validation will be run (if the expression returns `true` validation will run).</td>
			</tr>
			<tr>
				<td valign="top"><code>unless</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String expression to be evaluated that decides if validation will be run (if the expression returns `false` validation will run).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_CFE4A74307B6B27D699A59EC328FCA42' style='color:#000'><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"init"</span>&gt;</span><br />    <span style='color:Gray;'>&lt;!---&#32;Register&#32;the&#32;`checkPhoneNumber`&#32;method&#32;below&#32;to&#32;be&#32;called&#32;to&#32;validate&#32;new&#32;objects&#32;before&#32;they&#32;are&#32;inserted&#32;---&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;validateOnCreate(<span style='color:#006600'>"checkPhoneNumber"</span>)</span>&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /><br /><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"checkPhoneNumber"</span>&gt;</span><br />    <span style='color:Gray;'>&lt;!---&#32;Make&#32;sure&#32;area&#32;code&#32;is&#32;`614`&#32;---&gt;</span><br />    <span style='color:#990033'>&lt;cfreturn&#32;Left(this.phoneNumber,&#32;3)&#32;is&#32;<span style='color:#0000CC'>"614"</span>&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="validateonupdate" d:title="validateOnUpdate" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>validateOnUpdate()</code></h1>
		<h2>Description</h2>
		<p>Registers method(s) that should be called to validate existing objects before they are updated.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">validateOnUpdate([ <em>methods</em>, <em>condition</em>, <em>unless</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>methods</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Method name or list of method names to call. (Can also be called with the `method` argument.)</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>condition</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String expression to be evaluated that decides if validation will be run (if the expression returns `true` validation will run).</td>
			</tr>
			<tr>
				<td valign="top"><code>unless</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String expression to be evaluated that decides if validation will be run (if the expression returns `false` validation will run).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_347D3FED1539F278F1A526190320A1E6' style='color:#000'><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"init"</span>&gt;</span><br />    <span style='color:Gray;'>&lt;!---&#32;Register&#32;the&#32;`check`&#32;method&#32;below&#32;to&#32;be&#32;called&#32;to&#32;validate&#32;existing&#32;objects&#32;before&#32;they&#32;are&#32;updated&#32;---&gt;</span><br />    <span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;validateOnUpdate(<span style='color:#006600'>"checkPhoneNumber"</span>)</span>&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /><br /><span style='color:#990033'>&lt;cffunction&#32;name=<span style='color:#0000CC'>"checkPhoneNumber"</span>&gt;</span><br />    <span style='color:Gray;'>&lt;!---&#32;Make&#32;sure&#32;area&#32;code&#32;is&#32;`614`&#32;---&gt;</span><br />    <span style='color:#990033'>&lt;cfreturn&#32;Left(this.phoneNumber,&#32;3)&#32;is&#32;<span style='color:#0000CC'>"614"</span>&gt;</span><br /><span style='color:#990033'>&lt;/cffunction&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="validatesconfirmationof" d:title="validatesConfirmationOf" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>validatesConfirmationOf()</code></h1>
		<h2>Description</h2>
		<p>Validates that the value of the specified property also has an identical confirmation value. (This is common when having a user type in their email address a second time to confirm, confirming a password by typing it a second time, etc.) The confirmation value only exists temporarily and never gets saved to the database. By convention, the confirmation property has to be named the same as the property with "Confirmation" appended at the end. Using the password example, to confirm our `password` property, we would create a property called `passwordConfirmation`.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">validatesConfirmationOf([ <em>properties</em>, <em>message</em>, <em>when</em>, <em>condition</em>, <em>unless</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>properties</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of property or list of property names to validate against (can also be called with the `property` argument).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>message</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[property] should match confirmation</code></td>
				<td valign="top">Supply a custom error message here to override the built-in one.</td>
			</tr>
			<tr>
				<td valign="top"><code>when</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>onSave</code></td>
				<td valign="top">Pass in `onCreate` or `onUpdate` to limit when this validation occurs (by default validation will occur on both create and update, i.e. `onSave`).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>condition</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String expression to be evaluated that decides if validation will be run (if the expression returns `true` validation will run).</td>
			</tr>
			<tr>
				<td valign="top"><code>unless</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String expression to be evaluated that decides if validation will be run (if the expression returns `false` validation will run).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_6C6A42DC8333943A1FC56DAF8F8F7AEA' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Make&#32;sure&#32;that&#32;the&#32;user&#32;has&#32;to&#32;confirm&#32;their&#32;password&#32;correctly&#32;the&#32;first&#32;time&#32;they&#32;register&#32;(usually&#32;done&#32;by&#32;typing&#32;it&#32;again&#32;in&#32;a&#32;second&#32;form&#32;field)&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;validatesConfirmationOf(property=<span style='color:#006600'>"password"</span>,&#32;when=<span style='color:#006600'>"onCreate"</span>,&#32;message=<span style='color:#006600'>"Your&#32;password&#32;and&#32;its&#32;confirmation&#32;do&#32;not&#32;match.&#32;Please&#32;try&#32;again."</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="validatesexclusionof" d:title="validatesExclusionOf" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>validatesExclusionOf()</code></h1>
		<h2>Description</h2>
		<p>Validates that the value of the specified property does not exist in the supplied list.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">validatesExclusionOf(<em>list</em> [, <em>properties</em>, <em>message</em>, <em>when</em>, <em>allowBlank</em>, <em>condition</em>, <em>unless</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>properties</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of property or list of property names to validate against (can also be called with the `property` argument).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>list</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Single value or list of values that should not be allowed.</td>
			</tr>
			<tr>
				<td valign="top"><code>message</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[property] is reserved</code></td>
				<td valign="top">Supply a custom error message here to override the built-in one.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>when</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>onSave</code></td>
				<td valign="top">Pass in `onCreate` or `onUpdate` to limit when this validation occurs (by default validation will occur on both create and update, i.e. `onSave`).</td>
			</tr>
			<tr>
				<td valign="top"><code>allowBlank</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">If set to `true`, validation will be skipped if the property value is an empty string or doesn't exist at all. This is useful if you only want to run this validation after it passes the @validatesPresenceOf test, thus avoiding duplicate error messages if it doesn't.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>condition</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String expression to be evaluated that decides if validation will be run (if the expression returns `true` validation will run).</td>
			</tr>
			<tr>
				<td valign="top"><code>unless</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String expression to be evaluated that decides if validation will be run (if the expression returns `false` validation will run).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_530F3D319392DC87179FB94DCA4CB998' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Do&#32;not&#32;allow&#32;"PHP"&#32;or&#32;"Fortran"&#32;to&#32;be&#32;saved&#32;to&#32;the&#32;database&#32;as&#32;a&#32;cool&#32;language&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;validatesExclusionOf(property=<span style='color:#006600'>"coolLanguage"</span>,&#32;list=<span style='color:#006600'>"php,fortran"</span>,&#32;message=<span style='color:#006600'>"Haha,&#32;you&#32;can&#32;not&#32;be&#32;serious.&#32;Try&#32;again,&#32;please."</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="validatesformatof" d:title="validatesFormatOf" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>validatesFormatOf()</code></h1>
		<h2>Description</h2>
		<p>Validates that the value of the specified property is formatted correctly by matching it against a regular expression using the `regEx` argument and/or against a built-in CFML validation type using the `type` argument (`creditcard`, `date`, `email`, etc.).</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">validatesFormatOf([ <em>properties</em>, <em>regEx</em>, <em>type</em>, <em>message</em>, <em>when</em>, <em>allowBlank</em>, <em>condition</em>, <em>unless</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>properties</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of property or list of property names to validate against (can also be called with the `property` argument).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>regEx</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Regular expression to verify against.</td>
			</tr>
			<tr>
				<td valign="top"><code>type</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">One of the following types to verify against: `creditcard`, `date`, `email`, `eurodate`, `guid`, `social_security_number`, `ssn`, `telephone`, `time`, `URL`, `USdate`, `UUID`, `variableName`, `zipcode` (will be passed through to your CFML engine's `IsValid()` function).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>message</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[property] is invalid</code></td>
				<td valign="top">Supply a custom error message here to override the built-in one.</td>
			</tr>
			<tr>
				<td valign="top"><code>when</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>onSave</code></td>
				<td valign="top">Pass in `onCreate` or `onUpdate` to limit when this validation occurs (by default validation will occur on both create and update, i.e. `onSave`).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>allowBlank</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">If set to `true`, validation will be skipped if the property value is an empty string or doesn't exist at all. This is useful if you only want to run this validation after it passes the @validatesPresenceOf test, thus avoiding duplicate error messages if it doesn't.</td>
			</tr>
			<tr>
				<td valign="top"><code>condition</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String expression to be evaluated that decides if validation will be run (if the expression returns `true` validation will run).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>unless</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String expression to be evaluated that decides if validation will be run (if the expression returns `false` validation will run).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_C275EAE27E968EAED6CDA31B3378C8FF' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Make&#32;sure&#32;that&#32;the&#32;user&#32;has&#32;entered&#32;a&#32;correct&#32;credit&#32;card&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;validatesFormatOf(property=<span style='color:#006600'>"cc"</span>,&#32;type=<span style='color:#006600'>"creditcard"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Make&#32;sure&#32;that&#32;the&#32;user&#32;has&#32;entered&#32;an&#32;email&#32;address&#32;ending&#32;with&#32;the&#32;`.se`&#32;domain&#32;when&#32;the&#32;`ipCheck()`&#32;method&#32;returns&#32;`true`,&#32;and&#32;it's&#32;not&#32;Sunday.&#32;Also&#32;supply&#32;a&#32;custom&#32;error&#32;message&#32;that&#32;overrides&#32;the&#32;Wheels&#32;default&#32;one&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;validatesFormatOf(property=<span style='color:#006600'>"email"</span>,&#32;regEx=<span style='color:#006600'>"^.*@.*.se$"</span>,&#32;if=<span style='color:#006600'>"ipCheck()"</span>,&#32;unless=<span style='color:#006600'>"DayOfWeek()&#32;IS&#32;1"</span>,&#32;message=<span style='color:#006600'>"Sorry,&#32;you&#32;must&#32;have&#32;a&#32;Swedish&#32;email&#32;address&#32;to&#32;use&#32;this&#32;website."</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="validatesinclusionof" d:title="validatesInclusionOf" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>validatesInclusionOf()</code></h1>
		<h2>Description</h2>
		<p>Validates that the value of the specified property exists in the supplied list.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">validatesInclusionOf(<em>list</em> [, <em>properties</em>, <em>message</em>, <em>when</em>, <em>allowBlank</em>, <em>condition</em>, <em>unless</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>properties</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of property or list of property names to validate against (can also be called with the `property` argument).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>list</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">List of allowed values.</td>
			</tr>
			<tr>
				<td valign="top"><code>message</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[property] is not included in the list</code></td>
				<td valign="top">Supply a custom error message here to override the built-in one.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>when</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>onSave</code></td>
				<td valign="top">Pass in `onCreate` or `onUpdate` to limit when this validation occurs (by default validation will occur on both create and update, i.e. `onSave`).</td>
			</tr>
			<tr>
				<td valign="top"><code>allowBlank</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">If set to `true`, validation will be skipped if the property value is an empty string or doesn't exist at all. This is useful if you only want to run this validation after it passes the @validatesPresenceOf test, thus avoiding duplicate error messages if it doesn't.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>condition</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String expression to be evaluated that decides if validation will be run (if the expression returns `true` validation will run).</td>
			</tr>
			<tr>
				<td valign="top"><code>unless</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String expression to be evaluated that decides if validation will be run (if the expression returns `false` validation will run).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_76F199941B9CF66619A0F2AC51CB1F4F' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Make&#32;sure&#32;that&#32;the&#32;user&#32;selects&#32;either&#32;"Wheels"&#32;or&#32;"Rails"&#32;as&#32;their&#32;framework&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;validatesInclusionOf(property=<span style='color:#006600'>"frameworkOfChoice"</span>,&#32;list=<span style='color:#006600'>"wheels,rails"</span>,&#32;message=<span style='color:#006600'>"Please&#32;try&#32;again,&#32;and&#32;this&#32;time,&#32;select&#32;a&#32;decent&#32;framework!"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="validateslengthof" d:title="validatesLengthOf" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>validatesLengthOf()</code></h1>
		<h2>Description</h2>
		<p>Validates that the value of the specified property matches the length requirements supplied. Use the `exactly`, `maximum`, `minimum` and `within` arguments to specify the length requirements.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">validatesLengthOf([ <em>properties</em>, <em>message</em>, <em>when</em>, <em>allowBlank</em>, <em>exactly</em>, <em>maximum</em>, <em>minimum</em>, <em>within</em>, <em>condition</em>, <em>unless</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>properties</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of property or list of property names to validate against (can also be called with the `property` argument).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>message</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[property] is the wrong length</code></td>
				<td valign="top">Supply a custom error message here to override the built-in one.</td>
			</tr>
			<tr>
				<td valign="top"><code>when</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>onSave</code></td>
				<td valign="top">Pass in `onCreate` or `onUpdate` to limit when this validation occurs (by default validation will occur on both create and update, i.e. `onSave`).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>allowBlank</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">If set to `true`, validation will be skipped if the property value is an empty string or doesn't exist at all. This is useful if you only want to run this validation after it passes the @validatesPresenceOf test, thus avoiding duplicate error messages if it doesn't.</td>
			</tr>
			<tr>
				<td valign="top"><code>exactly</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>0</code></td>
				<td valign="top">The exact length that the property value must be.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>maximum</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>0</code></td>
				<td valign="top">The maximum length that the property value can be.</td>
			</tr>
			<tr>
				<td valign="top"><code>minimum</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>0</code></td>
				<td valign="top">The minimum length that the property value can be.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>within</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">A list of two values (minimum and maximum) that the length of the property value must fall within.</td>
			</tr>
			<tr>
				<td valign="top"><code>condition</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String expression to be evaluated that decides if validation will be run (if the expression returns `true` validation will run).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>unless</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String expression to be evaluated that decides if validation will be run (if the expression returns `false` validation will run).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_8F4FE4DB97EE6854C36CF52F91ACDD52' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Make&#32;sure&#32;that&#32;the&#32;`firstname`&#32;and&#32;`lastName`&#32;properties&#32;are&#32;not&#32;more&#32;than&#32;50&#32;characters&#32;and&#32;use&#32;square&#32;brackets&#32;to&#32;dynamically&#32;insert&#32;the&#32;property&#32;name&#32;when&#32;the&#32;error&#32;message&#32;is&#32;displayed&#32;to&#32;the&#32;user.&#32;(The&#32;`firstName`&#32;property&#32;will&#32;be&#32;displayed&#32;as&#32;"first&#32;name".)&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;validatesLengthOf(properties=<span style='color:#006600'>"firstName,lastName"</span>,&#32;maximum=50,&#32;message=<span style='color:#006600'>"Please&#32;shorten&#32;your&#32;[property]&#32;please.&#32;50&#32;characters&#32;is&#32;the&#32;maximum&#32;length&#32;allowed."</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Make&#32;sure&#32;that&#32;the&#32;`password`&#32;property&#32;is&#32;between&#32;4&#32;and&#32;15&#32;characters&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;validatesLengthOf(property=<span style='color:#006600'>"password"</span>,&#32;within=<span style='color:#006600'>"4,20"</span>,&#32;message=<span style='color:#006600'>"The&#32;password&#32;length&#32;must&#32;be&#32;between&#32;4&#32;and&#32;20&#32;characters."</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="validatesnumericalityof" d:title="validatesNumericalityOf" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>validatesNumericalityOf()</code></h1>
		<h2>Description</h2>
		<p>Validates that the value of the specified property is numeric.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">validatesNumericalityOf([ <em>properties</em>, <em>message</em>, <em>when</em>, <em>allowBlank</em>, <em>onlyInteger</em>, <em>condition</em>, <em>unless</em>, <em>odd</em>, <em>even</em>, <em>greaterThan</em>, <em>greaterThanOrEqualTo</em>, <em>equalTo</em>, <em>lessThan</em>, <em>lessThanOrEqualTo</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>properties</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of property or list of property names to validate against (can also be called with the `property` argument).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>message</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[property] is not a number</code></td>
				<td valign="top">Supply a custom error message here to override the built-in one.</td>
			</tr>
			<tr>
				<td valign="top"><code>when</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>onSave</code></td>
				<td valign="top">Pass in `onCreate` or `onUpdate` to limit when this validation occurs (by default validation will occur on both create and update, i.e. `onSave`).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>allowBlank</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">If set to `true`, validation will be skipped if the property value is an empty string or doesn't exist at all. This is useful if you only want to run this validation after it passes the @validatesPresenceOf test, thus avoiding duplicate error messages if it doesn't.</td>
			</tr>
			<tr>
				<td valign="top"><code>onlyInteger</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Specifies whether the property value must be an integer.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>condition</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String expression to be evaluated that decides if validation will be run (if the expression returns `true` validation will run).</td>
			</tr>
			<tr>
				<td valign="top"><code>unless</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String expression to be evaluated that decides if validation will be run (if the expression returns `false` validation will run).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>odd</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Specifies whether or not the value must be an odd number.</td>
			</tr>
			<tr>
				<td valign="top"><code>even</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Specifies whether or not the value must be an even number.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>greaterThan</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Specifies whether or not the value must be greater than the supplied value.</td>
			</tr>
			<tr>
				<td valign="top"><code>greaterThanOrEqualTo</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Specifies whether or not the value must be greater than or equal the supplied value.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>equalTo</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Specifies whether or not the value must be equal to the supplied value.</td>
			</tr>
			<tr>
				<td valign="top"><code>lessThan</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Specifies whether or not the value must be less than the supplied value.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>lessThanOrEqualTo</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Specifies whether or not the value must be less than or equal the supplied value.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_176E8D1077DA3758330703E35F8B6DCE' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Make&#32;sure&#32;that&#32;the&#32;score&#32;is&#32;a&#32;number&#32;with&#32;no&#32;decimals&#32;but&#32;only&#32;when&#32;a&#32;score&#32;is&#32;supplied.&#32;(Tetting&#32;`allowBlank`&#32;to&#32;`true`&#32;means&#32;that&#32;objects&#32;are&#32;allowed&#32;to&#32;be&#32;saved&#32;without&#32;scores,&#32;typically&#32;resulting&#32;in&#32;`NULL`&#32;values&#32;being&#32;inserted&#32;in&#32;the&#32;database&#32;table)&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;validatesNumericalityOf(property=<span style='color:#006600'>"score"</span>,&#32;onlyInteger=true,&#32;allowBlank=true,&#32;message=<span style='color:#006600'>"Please&#32;enter&#32;a&#32;correct&#32;score."</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="validatespresenceof" d:title="validatesPresenceOf" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>validatesPresenceOf()</code></h1>
		<h2>Description</h2>
		<p>Validates that the specified property exists and that its value is not blank.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">validatesPresenceOf([ <em>properties</em>, <em>message</em>, <em>when</em>, <em>condition</em>, <em>unless</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>properties</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of property or list of property names to validate against (can also be called with the `property` argument).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>message</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[property] can't be empty</code></td>
				<td valign="top">Supply a custom error message here to override the built-in one.</td>
			</tr>
			<tr>
				<td valign="top"><code>when</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>onSave</code></td>
				<td valign="top">Pass in `onCreate` or `onUpdate` to limit when this validation occurs (by default validation will occur on both create and update, i.e. `onSave`).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>condition</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String expression to be evaluated that decides if validation will be run (if the expression returns `true` validation will run).</td>
			</tr>
			<tr>
				<td valign="top"><code>unless</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String expression to be evaluated that decides if validation will be run (if the expression returns `false` validation will run).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_A7B3F4345332DF44E5119F478EB820D1' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Make&#32;sure&#32;that&#32;the&#32;user&#32;data&#32;can&#32;not&#32;be&#32;saved&#32;to&#32;the&#32;database&#32;without&#32;the&#32;`emailAddress`&#32;property.&#32;(It&#32;must&#32;exist&#32;and&#32;not&#32;be&#32;an&#32;empty&#32;string)&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;validatesPresenceOf(<span style='color:#006600'>"emailAddress"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="validatesuniquenessof" d:title="validatesUniquenessOf" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>validatesUniquenessOf()</code></h1>
		<h2>Description</h2>
		<p>Validates that the value of the specified property is unique in the database table. Useful for ensuring that two users can't sign up to a website with identical screen names for example. When a new record is created, a check is made to make sure that no record already exists in the database with the given value for the specified property. When the record is updated, the same check is made but disregarding the record itself.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">validatesUniquenessOf([ <em>properties</em>, <em>message</em>, <em>when</em>, <em>allowBlank</em>, <em>scope</em>, <em>condition</em>, <em>unless</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>properties</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name of property or list of property names to validate against (can also be called with the `property` argument).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>message</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>[property] has already been taken</code></td>
				<td valign="top">Supply a custom error message here to override the built-in one.</td>
			</tr>
			<tr>
				<td valign="top"><code>when</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>onSave</code></td>
				<td valign="top">Pass in `onCreate` or `onUpdate` to limit when this validation occurs (by default validation will occur on both create and update, i.e. `onSave`).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>allowBlank</code></td>
				<td valign="top"><code>boolean</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">If set to `true`, validation will be skipped if the property value is an empty string or doesn't exist at all. This is useful if you only want to run this validation after it passes the @validatesPresenceOf test, thus avoiding duplicate error messages if it doesn't.</td>
			</tr>
			<tr>
				<td valign="top"><code>scope</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">One or more properties by which to limit the scope of the uniqueness constraint.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>condition</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String expression to be evaluated that decides if validation will be run (if the expression returns `true` validation will run).</td>
			</tr>
			<tr>
				<td valign="top"><code>unless</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String expression to be evaluated that decides if validation will be run (if the expression returns `false` validation will run).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_2208C27504AEF96D734965986EC61787' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Make&#32;sure&#32;that&#32;two&#32;users&#32;with&#32;the&#32;same&#32;screen&#32;name&#32;won't&#32;ever&#32;exist&#32;in&#32;the&#32;database&#32;(although&#32;to&#32;be&#32;100%&#32;safe,&#32;you&#32;should&#32;consider&#32;using&#32;database&#32;locking&#32;as&#32;well)&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;validatesUniquenessOf(property=<span style='color:#006600'>"username"</span>,&#32;message=<span style='color:#006600'>"Sorry,&#32;that&#32;username&#32;is&#32;already&#32;taken."</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Same&#32;as&#32;above&#32;but&#32;allow&#32;identical&#32;user&#32;names&#32;as&#32;long&#32;as&#32;they&#32;belong&#32;to&#32;a&#32;different&#32;account&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;validatesUniquenessOf(property=<span style='color:#006600'>"username"</span>,&#32;scope=<span style='color:#006600'>"accountId"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="verificationchain" d:title="verificationChain" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>verificationChain()</code></h1>
		<h2>Description</h2>
		<p>Returns an array of all the verifications set on this controller in the order in which they will be executed.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">verificationChain()</span></code></p>
		<h2>Parameters</h2>
		<p>None.</p>
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_4DBF8BD2AF612848392464DBB95DE3FD' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Get&#32;verification&#32;chain,&#32;remove&#32;the&#32;first&#32;item,&#32;and&#32;set&#32;it&#32;back&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;myVerificationChain&#32;=&#32;verificationChain()</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;<span style='color:blue'>ArrayDeleteAt</span>(myVerificationChain,&#32;1)</span>&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;setVerificationChain(myVerificationChain)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="verifies" d:title="verifies" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>verifies()</code></h1>
		<h2>Description</h2>
		<p>Instructs Wheels to verify that some specific criterias are met before running an action.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">verifies([ <em>only</em>, <em>except</em>, <em>post</em>, <em>get</em>, <em>ajax</em>, <em>cookie</em>, <em>session</em>, <em>params</em>, <em>handler</em>, <em>cookieTypes</em>, <em>sessionTypes</em>, <em>paramsTypes</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>only</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">List of action names to limit this verification to.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>except</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">List of action names to exclude this verification from.</td>
			</tr>
			<tr>
				<td valign="top"><code>post</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Set to `true` to verify that this is a `POST` request.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>get</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Set to `true` to verify that this is a `GET` request.</td>
			</tr>
			<tr>
				<td valign="top"><code>ajax</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Set to `true` to verify that this is an AJAX request.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>cookie</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Verify that the passed in variable name exists in the `cookie` scope.</td>
			</tr>
			<tr>
				<td valign="top"><code>session</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Verify that the passed in variable name exists in the `session` scope.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>params</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Verify that the passed in variable name exists in the `params` struct.</td>
			</tr>
			<tr>
				<td valign="top"><code>handler</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">Pass in the name of a function that should handle failed verifications. The default is to just abort the request when a verification fails.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>cookieTypes</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">List of types to check each listed `cookie` value against (will be passed through to your CFML engine's `IsValid` function).</td>
			</tr>
			<tr>
				<td valign="top"><code>sessionTypes</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">List of types to check each list `session` value against (will be passed through to your CFML engine's `IsValid` function).</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>paramsTypes</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">List of types to check each `params` value against (will be passed through to your CFML engine's `IsValid` function).</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
<span id='formatted_code_92C243414EEB4546EDB136E138FAC11B' style='color:#000'><span style='color:Gray;'>&lt;!---&#32;Tell&#32;Wheels&#32;to&#32;verify&#32;that&#32;the&#32;`handleForm`&#32;action&#32;is&#32;always&#32;a&#32;`POST`&#32;request&#32;when&#32;executed&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;verifies(only=<span style='color:#006600'>"handleForm"</span>,&#32;post=true)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Make&#32;sure&#32;that&#32;the&#32;edit&#32;action&#32;is&#32;a&#32;`GET`&#32;request,&#32;that&#32;`userId`&#32;exists&#32;in&#32;the&#32;`params`&#32;struct,&#32;and&#32;that&#32;it's&#32;an&#32;integer&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;verifies(only=<span style='color:#006600'>"edit"</span>,&#32;get=true,&#32;params=<span style='color:#006600'>"userId"</span>,&#32;paramsTypes=<span style='color:#006600'>"integer"</span>)</span>&gt;</span><br /><br /><span style='color:Gray;'>&lt;!---&#32;Just&#32;like&#32;above,&#32;only&#32;this&#32;time&#32;we&#32;want&#32;to&#32;redirect&#32;the&#32;visitor&#32;to&#32;the&#32;index&#32;page&#32;of&#32;the&#32;controller&#32;if&#32;the&#32;request&#32;is&#32;invalid&#32;and&#32;show&#32;an&#32;error&#32;in&#32;The&#32;Flash&#32;---&gt;</span><br /><span style='color:#990033'>&lt;cfset<span style='color:#000000'>&#32;verifies(only=<span style='color:#006600'>"edit"</span>,&#32;get=true,&#32;params=<span style='color:#006600'>"userId"</span>,&#32;paramsTypes=<span style='color:#006600'>"integer"</span>,&#32;handler=<span style='color:#006600'>"index"</span>,&#32;error=<span style='color:#006600'>"Invalid&#32;userId"</span>)</span>&gt;</span><br /></span>
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="wordtruncate" d:title="wordTruncate" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>wordTruncate()</code></h1>
		<h2>Description</h2>
		<p>Truncates text to the specified length of words and replaces the remaining characters with the specified truncate string (which defaults to "...").</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">wordTruncate(<em>text</em> [, <em>length</em>, <em>truncateString</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>text</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">The text to truncate.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>length</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>5</code></td>
				<td valign="top">Number of words to truncate the text to.</td>
			</tr>
			<tr>
				<td valign="top"><code>truncateString</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>...</code></td>
				<td valign="top">String to replace the last characters with.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/wordtruncate for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="yearselecttag" d:title="yearSelectTag" d:parental-control="1">
	
		<span class="picture">
			<img src="Images/dictionary.png" alt="CFWheels (http://cfwheels.org)" class="floatright"/>
		</span>
		<h1><code>yearSelectTag()</code></h1>
		<h2>Description</h2>
		<p>Builds and returns a string containing a select form control for a range of years based on the supplied `name`.</p>
		<h2>Function Syntax</h2>
		<p><code><span class="pre">yearSelectTag(<em>name</em> [, <em>selected</em>, <em>startYear</em>, <em>endYear</em>, <em>includeBlank</em>, <em>label</em>, <em>labelPlacement</em>, <em>prepend</em>, <em>append</em>, <em>prependToLabel</em>, <em>appendToLabel</em> ])</span></code></p>
		<h2>Parameters</h2>
	<table>
		<thead>
			<tr>
				<th>Parameter</th>
				<th>Type</th>
				<th>Required</th>
				<th>Default</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td valign="top"><code>name</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">Yes</td>
				<td valign="top"><code></code></td>
				<td valign="top">Name to populate in tag's `name` attribute.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>selected</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The year that should be selected initially.</td>
			</tr>
			<tr>
				<td valign="top"><code>startYear</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>2005</code></td>
				<td valign="top">First year in select list.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>endYear</code></td>
				<td valign="top"><code>numeric</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>2015</code></td>
				<td valign="top">Last year in select list.</td>
			</tr>
			<tr>
				<td valign="top"><code>includeBlank</code></td>
				<td valign="top"><code>any</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>false</code></td>
				<td valign="top">Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>label</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">The label text to use in the form control.</td>
			</tr>
			<tr>
				<td valign="top"><code>labelPlacement</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code>around</code></td>
				<td valign="top">Whether to place the label `before`, `after`, or wrapped `around` the form control.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>prepend</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>append</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr class="highlight">
				<td valign="top"><code>prependToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
			<tr>
				<td valign="top"><code>appendToLabel</code></td>
				<td valign="top"><code>string</code></td>
				<td valign="top" class="required">No</td>
				<td valign="top"><code></code></td>
				<td valign="top">String to append to the form control's `label`. Useful to wrap the form control with HTML tags.</td>
			</tr>
		</tbody>
	</table>
	
		<h2>Examples</h2>
		<code class="block">
Visit http://cfwheels.org/docs/1-1/function/yearselecttag for an example.
		</code>
	</d:entry>
<d:entry xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng" id="front_back_matter" d:title="Front/Back Matter">
		<h1><b>CFWheels</b></h1>
		<h2>Front/Back Matter</h2>
		<div>
			<br/><br/>
		</div>
		<div>
		</div>
		<div>
		</div>
		<br/>
	</d:entry>
